[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Estadística a Inferencia II",
    "section": "",
    "text": "‎\nLa estadística trata sobre la recolección, organización, análisis e interpretación de datos, es por ello que la estadística es esencial para el correcto análisis de datos.\nExisten dos grandes conjuntos de herramientas para analizar datos:\nAnálisis Exploratorio de Datos (EDA): Consiste en resúmenes numéricos como la media, moda, desviación estándar, rangos intercuartiles, etc (esto se conoce también como estadística descriptiva). Además hace énfasis en el uso de métodos visuales para inspeccionar los datos, como por ejemplo histogramas y gráficos de dispersión.\nEstadística Inferencial: Consiste en usar datos para generar enunciados que exceden los propios datos. A veces esto implica realizar predicciones, a veces entender los detalles de algún fenómeno en particular o elegir entre varias explicaciones plausibles.\nMuchos de los cursos y libros sobre estadística, principalmente aquellos dirigidos a no-estadísticos, enseñan una serie de recetas que más o menos tienen la siguiente forma.\nLa principal meta de estos cursos es la de enseñar a usar la lata adecuada y con suerte alguna que otra discusión sobre el emplatado. Esta aproximación pedagógica, dificulta entender conceptualmente la unidad de los diferentes métodos enseñados y tiene como resultado la reproducción de prácticas poco transparentes y/o útiles.\nEn este curso se intenta una aproximación totalmente diferente. También aprenderemos recetas, pero intentaremos que los platos tengan un sabor más casero y menos enlatado, aprenderemos a mezclar ingredientes frescos que se acomoden a diferentes situaciones gastronómicas.\nEste enfoque es posible por dos razones:",
    "crumbs": [
      "‎"
    ]
  },
  {
    "objectID": "index.html#a-quienes-está-dirijido",
    "href": "index.html#a-quienes-está-dirijido",
    "title": "Estadística a Inferencia II",
    "section": "A quienes está dirijido?",
    "text": "A quienes está dirijido?\nEste es un curso introductorio para personas sin conocimiento previo de estadística o ciencia de datos. Se asume familiaridad con Python y librerías de Python usadas en análisis de datos como Numpy, matplotlib, Pandas, etc.\nQuienes no sepan Python, pero tengan familiaridad con otros lenguajes de programación también podrán aprovechar el curso, aunque puede que experimente un poco más de fricción.\nPor último quienes no tengan interés en aprender a usar código para analisis de datos pueden aún aprovechar parte del material para obtener una visión a vuelo de pájaro de los métodos Bayesianos.",
    "crumbs": [
      "‎"
    ]
  },
  {
    "objectID": "index.html#cómo-usar-este-material",
    "href": "index.html#cómo-usar-este-material",
    "title": "Estadística a Inferencia II",
    "section": "Cómo usar este material",
    "text": "Cómo usar este material\n\nVersión estática: Esta página contiene una versión estática del material. Es decir podrás ver el texto y las figuras pero no podrás modificarlos, ni interactuar con el material.\nVersión interactiva online: . Esta versión permite interactuar con el material, modificarlo y ejecutarlo en tu navegador.\nVersión interactiva local: También es posible descargar el material y ejecutarlo en tu propia computadora. Para ello hacé click y seguí las instrucciones de la próxima sección (Instalación).",
    "crumbs": [
      "‎"
    ]
  },
  {
    "objectID": "index.html#instalación",
    "href": "index.html#instalación",
    "title": "Estadística a Inferencia II",
    "section": "Instalación",
    "text": "Instalación\nPara usar este material es necesario tener instalado Python. Se recomienda la versión 3.9 o superior. Además es necesario instalar los siguientes paquetes:\n\nPyMC 5.8.2\nArviZ 0.16.1\nPreliZ 0.3.3\ngraphviz (una dependencia opcional de PyMC)\n\nSe recomienda instalar primero Anaconda. Luego instalar el resto de los paquetes con los comandos:\nconda install pip\npip install pymc==5.8.3 arviz==0.16.1 preliz==0.3.3 graphviz\nComo alternativa pueden crear un ambiente con los paquetes necesario descargando el archivo y ejecutando el comando\nconda env create -f environment.yml",
    "crumbs": [
      "‎"
    ]
  },
  {
    "objectID": "index.html#contribuciones",
    "href": "index.html#contribuciones",
    "title": "Estadística a Inferencia II",
    "section": "Contribuciones",
    "text": "Contribuciones\nTodo el contenido de este repositorio es abierto, esto quiere decir que cualquier persona interesada puede contribuir al mismo. Todas las contribuciones serán bien recibidas incluyendo:\n\nCorrecciones ortográficas\nNuevas figuras\nCorrecciones en el código Python, incluidas mejoras de estilo\nMejores ejemplos\nMejores explicaciones\nCorrecciones de errores conceptuales\n\nLa forma de contribuir es vía Github, es decir los cambios deberán ser hechos en forma de pull requests y los problemas/bugs deberán reportarse como Issues.",
    "crumbs": [
      "‎"
    ]
  },
  {
    "objectID": "01_Inferencia_Bayesiana.html",
    "href": "01_Inferencia_Bayesiana.html",
    "title": "1  Inferencia Bayesiana",
    "section": "",
    "text": "1.1 El universo Bayesiano\nEn este curso aprenderemos sobre una forma de hacer estadística llamada usualmente estadística Bayesiana. El nombre se debe a Thomas Bayes (1702-1761) un ministro presbiteriano, y matemático aficionado, quien derivó por primera vez lo que ahora conocemos como el teorema de Bayes, el cual fue publicado (postumanente) en 1763. Sin embargo una de las primeras personas en realmente desarrollar métodos Bayesianos, fue Pierre-Simon Laplace (1749-1827), por lo que tal vez sería un poco más correcto hablar de Estadística Laplaciana y no Bayesiana.\nHay dos ideas centrales que hacen que un método sea Bayesiano:\nEn el universo Bayesiano las cantidades conocidas son consideradas fijas y usualmente les llamamos datos. Por el contrario toda cantidad desconocida es considerada como una variable aleatoria y es considerada un parámetros dentro de un modelo Bayesiano.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Inferencia Bayesiana</span>"
    ]
  },
  {
    "objectID": "01_Inferencia_Bayesiana.html#el-universo-bayesiano",
    "href": "01_Inferencia_Bayesiana.html#el-universo-bayesiano",
    "title": "1  Inferencia Bayesiana",
    "section": "",
    "text": "Toda cantidad desconocida es modelada utilizando una distribución de probabilidad de algún tipo.\nEl teorema de Bayes es usado para actualizar dicha distribución a la luz de los datos.\n\n\n\n1.1.1 Teorema de Bayes\nEl teorema de Bayes es una consecuencia directa de la regla del producto, veamos.\n\\[\\begin{align}\np(\\theta, Y) = p(\\theta \\mid Y)\\; p(Y) \\\\\np(\\theta, Y) = p(Y \\mid \\theta)\\; p(\\theta)\n\\end{align}\\] Dado que los dos términos a la derecha de la igualdad son iguales entre si podemos escribir que:\n\\[\np(\\theta \\mid Y) \\; p(Y) = p(Y \\mid \\theta)\\; p(\\theta)\n\\]\nReordenando llegamos al Teorema de Bayes!\n\\[\np(\\theta \\mid Y) = \\frac{p(Y \\mid \\theta) p(\\theta)}{p(Y)}\n\\]\nEl cual también suele ser escrito de la siguiente forma:\n\\[\n\\overbrace{p(\\theta \\mid Y)}^{\\text{posterior}} = \\frac{\\overbrace{p(Y \\mid \\theta)}^{\\text{likelihood}} \\overbrace{p(\\theta)}^{\\text{prior}}}{\\underbrace{\\int_{\\Theta} p(Y \\mid \\theta) p(\\theta) \\text{d}\\theta}_{\\text{likelihood marginal}}}\n\\]\nEl a priori es la forma de introducir conocimiento previo sobre los valores que pueden tomar los parámetros. A veces cuando no sabemos demasiado se suelen usar a prioris que asignan igual probabilidad a todos los valores de los parámetros, otras veces se puede elegir a prioris que restrinjan los valores de los parámetros a rangos razonables, algo que se conoce como regularización, por ejemplo solo valores positivos. Muchas veces contamos con información mucho más precisa como medidas experimentales previas o límites impuesto por alguna teoría.\nEl likelihood es la forma de incluir nuestros datos en el análisis. Es una expresión matemática que especifica la plausibilidad de los datos. El likelihood es central tanto en estadística Bayesiana como en estadística no-Bayesiana. A medida que la cantidad de datos aumenta el likelihood tiene cada vez más peso en los resultados, esto explica el porqué a veces los resultados de la estadística Bayesiana y frecuentista coinciden cuando la muestra es grande.\nEl a posteriori es la distribución de probabilidad para los parámetros. Es la consecuencia lógica de haber usado un conjunto de datos, un likelihood y un a priori. Se lo suele pensar como la versión actualizada del a priori. De hecho un a posteriori puede ser un a priori de un análisis a futuro.\nLa likelihood marginal (también llamado evidencia) es el likelihood promediado sobre todas los posibles hipótesis (o conjunto de parámetros) \\(\\theta\\), esto es equivalente a \\(p(Y)\\). En general, la evidencia puede ser vista como una simple constante de normalización que en la mayoría de los problemas prácticos puede (y suele) omitirse. Por lo que el teorema de Bayes suele aparecer escrito como:\n\\[\np(\\theta \\mid Y) \\propto p(Y \\mid \\theta) p(\\theta)\n\\]\nEl rol de todos estos términos irá quedando más claro a medida que avancemos.\n\n\n1.1.2 El a posteriori como único estimador\nEl a posteriori representa todo lo que sabemos de un problema, dado un modelo y un conjunto de datos. Y por lo tanto cualquier cantidad que nos interese sobre el problema puede deducirse a partir de él. Típicamente esto toma la forma de integrales como la siguiente.\n\\[\nJ = \\int \\varphi(\\theta) \\ \\ p(\\theta \\mid Y) d\\theta\n\\]\nPor ejemplo, para calcular la media de \\(\\theta\\) deberíamos reemplazar \\(\\varphi(\\theta)\\), por \\(\\theta\\):\n\\[\n\\bar \\theta = \\int \\theta \\ \\ p(\\theta \\mid Y) d\\theta\n\\]\nEsto no es más que la definición de un promedio pesado, donde cada valor de \\(\\theta\\) es pesado según la probabilidad asignada por el a posteriori.\nEn la práctica, y al usar métodos computacionales como los usados en este curso, estas integrales pueden aproximarse usando sumas.\n\n\n1.1.3 Estadística Bayesiana en tres pasos\nEl teorema de Bayes es el único estimador usado en estadística Bayesiana. Por lo que conceptualmente la estadística Bayesiana resulta muy simple. Según George Box y Andrew Gelman et al. (2013) la estadística Bayesiana se reduce a tres pasos:\n\nCrear un modelo probabilístico. Los modelos probabilísticos son historias que dan cuenta de como se generan los datos observados (o por observar). Los modelos se expresan usando distribuciones de probabilidad.\nCondicionar el modelo a los datos observados a fin de obtener el a posteriori. Usando el teorema de Bayes se actualizan las probabilidades asignadas a priori de acuerdo a los datos observados obteniéndose las probabilidades a posteriori.\nCriticar el ajuste del modelo generado a los datos y evaluar las consecuencias del modelo. Se puede demostrar que dada la información previa y los datos observados no existe otro mecanismo capaz de generar una mejor inferencia que la estadística Bayesiana. Esto parece maravilloso, pero hay un problema, sólo es cierto si se asumen que los datos y el modelo son correctos. En la práctica, los datos pueden contener errores y los modelos son a duras penas aproximaciones de fenómenos reales. Por lo tanto es necesario realizar varias evaluaciones, incluyendo si las predicciones generadas por el modelo se ajustan a los datos observados, si las conclusiones obtenidas tienen sentido dado el marco conceptual en el que uno trabaja, la sensibilidad de los resultados a los detalles del modelo (sobre todo a detalles para los cuales no tenemos demasiada información), etc. Además, es posible que realizar inferencia Bayesiana sea demasiado costosa en la práctica por lo que sea conveniente realizar aproximaciones.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Inferencia Bayesiana</span>"
    ]
  },
  {
    "objectID": "01_Inferencia_Bayesiana.html#inferencia-bayesiana",
    "href": "01_Inferencia_Bayesiana.html#inferencia-bayesiana",
    "title": "1  Inferencia Bayesiana",
    "section": "1.2 Inferencia Bayesiana",
    "text": "1.2 Inferencia Bayesiana\nEn la práctica la mayoría de los modelos tendrán más de un parámetro, pero empecemos con un modelo con un solo parámetro.\n\n1.2.1 El problema de la moneda\nA juzgar por la cantidad de ejemplos sobre monedas arrojadas al aires en libros de estadística y probabilidad, pareciera que las monedas son uno de los objetos de estudio centrales de estas disciplinas.\nUna de las razones detrás de la ubiquidad de este ejemplo es que las monedas son objetos familiares que facilitan discutir conceptos que de otra forma podrían sonar demasiado abstractos. De todas formas quizá la razón más importante sea que el problema puede ser modelado de forma simple y que muchos problemas reales son conceptualmente similares, de hecho cualquier problema en donde obtengamos resultados binarios (0/1, enfermo/sano, spam/no-spam, etc) puede ser pensado como si estuviéramos hablando de monedas. En definitiva el modelo que veremos a continuación (ejemplificado con monedas) sirve para cualquier situación en la cual los datos observados solo pueden tomar dos valores mutuamente excluyentes. Debido a que estos valores son nominales y son dos, a este modelo se le llama binomial.\nEn el siguiente ejemplo trataremos de determinar el grado en que una moneda está sesgada. En general cuando se habla de sesgo se hace referencia a la desviación de algún valor (por ejemplo, igual proporción de caras y cecas), pero aquí usaremos el termino sesgo de forma más general. Diremos que el sesgo es un valor en el intervalo [0, 1], siendo 0 para una moneda que siempre cae ceca y 1 para una moneda que siempre cae cara y lo representaremos con la variable \\(\\theta\\). A fin de cuantificar \\(\\theta\\) arrojaremos una moneda al aire repetidas veces, por practicidad arrojaremos la moneda de forma computacional (¡pero nada nos impide hacerlo manualmente!). Llevaremos registro del resultado en la variable \\(y\\). Siendo \\(y\\) la cantidad de caras obtenidas en un experimento.\nHabiendo definido nuestro problema debemos expresarlo en términos del teorema de Bayes,\n\\[\np(\\theta \\mid Y) \\propto p(Y \\mid  \\theta) p(\\theta)\n\\]\nDonde, como dijimos \\(\\theta = 1\\) quiere decir 100% cara y \\(\\theta = 0\\) 100% ceca.\nAhora sólo restar reemplazar los dos términos a la derecha de la igualdad, el a priori y el likelihood, por distribuciones de probabilidad adecuadas y luego multiplicarlas para obtener el término a la izquierda, el a posteriori. Como es la primera vez que haremos ésto, lo haremos paso a paso y analíticamente. En el próximo capítulo veremos cómo hacerlo computacionalmente.\n\n\n1.2.2 Definiendo el a priori\nEl a priori lo modelaremos usando una distribución Beta, que es una distribución muy usada en estadística Bayesiana. La \\(pdf\\) de esta distribución es:\n\\[\np(\\theta)= \\frac{\\Gamma(\\alpha+\\beta)}{\\Gamma(\\alpha)\\Gamma(\\beta)}\\, \\theta^{\\alpha-1}(1-\\theta)^{\\beta-1}\n\\]\nEl primer término es una constante de normalización. Por suerte para nuestro problema nos basta con establecer una proporcionalidad, por lo que podemos simplificar esta expresión y escribir la distribución Beta de la siguiente forma.\n\\[\np(\\theta) \\propto  \\theta^{\\alpha-1}(1-\\theta)^{\\beta-1}\n\\]\nHay varias razones para usar una distribución Beta para este y otros problemas:\n\nLa distribución Beta varía entre 0 y 1, de igual forma que lo hace \\(\\theta\\) en nuestro modelo.\nEsta distribución combinada con la que elegiremos como likelihood (ver más adelante), nos permitirá resolver el problema de forma analítica.\nEs una distribución versátil para expresar distintas situaciones.\n\nRespecto al último punto, veamos un ejemplo. Supongamos que el experimento de la moneda es realizado por tres personas. Una de ellas dice no saber nada de la moneda por lo tanto a priori todos los valores de \\(\\theta\\) son igualmente probables. La segunda persona desconfía de la moneda, ya que sospecha que es una moneda trucada, por lo tanto considera que está sesgada, pero no sabe para cual de las dos opciones. Por último, la tercer persona asegura que lo más probable es que \\(\\theta\\) tome un valor alrededor de 0.5 ya que así lo indican experimentos previos y análisis teóricos sobre tiradas de monedas. Todas estas situaciones pueden ser modeladas por la distribución Beta, como se ve a continuación.\n\n_, axes = plt.subplots(1, 3, figsize=(12, 3), sharey=True)\n\nparams = [(1, 1), (0.5, 0.5), (20, 20)]\n\nfor (a, b), ax  in zip(params, axes):\n    ax = pz.Beta(a, b).plot_pdf(ax=ax, legend=\"title\")\n    ax.set_ylim(0, 7)\n\n\n\n\n\n\n\n\n\npz.Beta().plot_interactive(xy_lim=(None, None, None, 10))\n\n\n\n\n\n\n1.2.3 Definiendo el likelihood\nHabiendo definido el a priori veamos ahora el likelihood. Asumiendo que el resultado obtenido al arrojar una moneda no influye en el resultado de posteriores experimentos (es decir los experimentos son independientes entre sí) es razonable utilizar como likelihood la distribución binomial.\n\\[\np(y \\mid \\theta) = \\frac{N!}{y!(N-y)!} \\theta^y (1 - \\theta)^{N−y}\n\\]\nDonde N es la cantidad total de experimentos (monedas arrojadas al aire) e \\(y\\) es la cantidad de caras obtenidas. A los fines prácticos podríamos simplificar la igualdad anterior y convertirla en una proporcionalidad, eliminando el término \\(\\frac{N!}{y!(N-y)!}\\) ya que ese término no depende de \\(\\theta\\) que es lo que nos interesa averiguar. Por lo que podríamos establecer que:\n\\[\np(y \\mid \\theta) \\propto \\theta^y (1 - \\theta)^{N−y}\n\\]\nLa elección de esta distribución para modelar nuestro problema es razonable ya que \\(\\theta\\) es la chance de obtener una cara al arrojar una moneda y ese hecho ha ocurrido \\(y\\) veces, de la misma forma \\(1-\\theta\\) es la chance de obtener ceca lo cual ha sido observado \\(N-y\\) veces.\n\npz.Binomial(1, 0.5).plot_interactive(pointinterval=False, xy_lim=(None, None, None, 1))\n\n\n\n\n\n\n1.2.4 Obteniendo el a posteriori\nSe puede demostrar que siempre que usemos como prior una función Beta y como likelihood una distribución binomial obtendremos como resultado una distribución a posteriori, la cual será una Beta con los siguientes parámetros:\n\\[\np(\\theta \\mid y) = \\operatorname{Beta}(\\alpha_{a priori} + y, \\beta_{a priori} + N - y)\n\\]\nVeamos de donde surge este resultado, según el teorema de Bayes la distribución a posteriori es el producto del likelihood y la distribución a priori.\n\\[\np(\\theta \\mid y) = p(y \\mid \\theta) p(\\theta) * c\n\\]\nPor lo tanto, en nuestro caso tendremos que:\n\\[\np(\\theta \\mid y) \\propto \\underbrace{\\frac{N!}{y!(N-y)!} \\theta^y (1 - \\theta)^{N−y}}_{\\text{likelihood}} \\underbrace{\\frac{\\Gamma(\\alpha+\\beta)}{\\Gamma(\\alpha)\\Gamma(\\beta)}\\, \\theta^{\\alpha-1}(1-\\theta)^{\\beta-1}}_{\\text{prior}}\n\\]\nSi omitimos las constantes de normalizando del likelihood y prior, obtenemos que el a posteriori es:\n\\[\np(\\theta \\mid y) \\propto \\theta^{\\alpha-1+y}(1-\\theta)^{\\beta-1+N−y}\n\\]\nPodemos ver que la expresión a la derecha de la proporcionalidad tiene la misma forma funcional (sin considerar la constante de proporcionalidad) que una distribución Beta con parámetros \\(\\alpha_{\\text{a posteriori}} = \\alpha_{\\text{a priori}} + y \\quad \\beta_{\\text{a posteriori}} = \\beta_{\\text{a priori}} + N - y\\).\nCuando se cumple que para un cierto likelihood la forma funcional del a priori y la del a posteriori coinciden se dice que el a priori es conjugado con el likelihood. Históricamente los problemas en estadística Bayesiana estuvieron restringidos al uso de a prioris conjugados, ya que estos garantizan la tratabilidad matemática del problema, es decir garantizan que es posible obtener una expresión analítica para nuestro problema. En el próximo capítulo veremos técnicas computacionales modernas que permiten calcular la distribución a posteriori incluso cuando no se usan a prioris conjugados. Estas técnicas computacionales han permitido el resurgimiento de la estadística Bayesiana en las últimas décadas.\n\n\n1.2.5 Notación y visualización de modelos Bayesianos\nPara representar modelos en estadística Bayesiana (y en probabilidad en general) se suele utilizar la siguiente notación\n\\[\n\\begin{align}\n\\theta \\sim & \\operatorname{Beta}(\\alpha, \\beta) \\\\\nY \\sim & \\operatorname{Bin}(n=1, p=\\theta)\n\\end{align}\n\\]\nEl símbolo \\(\\sim\\) indica que la variable a la izquierda se distribuye según la distribución a la derecha. Entonces podríamos decir que \\(\\mathbf{\\theta}\\) es una variable aleatoria con distribución \\(\\operatorname{Beta}\\), y que \\(\\operatorname{Beta}\\) está definida por los parámetros \\(\\alpha\\) y \\(\\beta\\), este es nuestro a priori. En la siguiente línea tenemos el likelihood el cual está definido por una distribución binomial con parámetros \\(n=1\\) y \\(p=\\theta\\).\nGráficamente esto se puede representar usando los diagramas de Kruschke:\n\nEn el primer nivel (de arriba hacia abajo) se observa el a priori, luego el likelihood, y por último los datos. Las flechas indican la vinculación entre las partes del modelo y el signo \\(\\sim\\) la naturaleza estocástica de las variables.\n\n\n1.2.6 Obteniendo los datos\nBien, ahora que sabemos cómo calcular el a posteriori, lo único que resta es conseguir los datos. En este ejemplo los datos son sintéticos, es decir los obtuve computacionalmente mediante un generador de números (pseudo)aleatorios, pero bien podrían haber surgido de un experimento con una moneda real.\n\n\n1.2.7 Calculando el a posteriori\nEn el próximo capítulo veremos cómo usar métodos computacionales para computar un a posteriori sin necesidad de derivarlo analíticamente. Esto es lo que haremos para resolver el resto de los problemas del curso. Pero dado que ya nos tomamos el trabajo de derivar analíticamente la expresión para el a posteriori vamos a usar esa expresión. Si miran el código de la siguiente celda verán que la mayoría de las lineas se encargan de dibujar los resultados y no de calcularlos. El cálculo del a posteriori ocurre en la línea 20. Cada una de estas lineas computa el a posteriori para cada uno de los a prioris que vimos antes. El cálculo es simple, tan solo se computa el valor del a posteriori (usando la función pdf de la distribución Beta provista por PreliZ) para 2000 puntos igualmente espaciados entre 0 y 1 (linea 9). El loop que empieza en la linea 11 se debe a que exploraremos cómo cambian las distribuciones a posteriori para distinta cantidad de datos (n_intentos). Con un círculo negro de contorno blanco se indica el valor real de \\(\\theta\\), valor que por supuesto es desconocido en una situación real, pero conocido para mí, ya que los datos son sintéticos.\n\nplt.figure(figsize=(12, 9))\n\nn_trials = [0, 1, 2, 3, 4, 8, 16, 32, 50, 150]\ndata = [0, 1, 1, 1, 1, 4, 6, 9, 13, 48]\ntheta_real = 0.35\n\nbeta_params = [(1, 1), (0.5, 0.5), (20, 20)]\ndist = pz.Beta\nx = np.linspace(0, 1, 2000)\n\nfor idx, N in enumerate(n_trials):\n    if idx == 0:\n        plt.subplot(4, 3, 2)\n        plt.xlabel('θ')\n    else:\n        plt.subplot(4, 3, idx+3)\n        plt.xticks([])\n    y = data[idx]\n    for (a_prior, b_prior) in beta_params:\n        posterior = dist(a_prior + y, b_prior + N - y).pdf(x)\n        plt.fill_between(x, 0, posterior, alpha=0.7)\n\n    plt.plot(theta_real, 0, ms=9, marker='o', mec='w', mfc='k')\n    plt.plot(0, 0, label=f'{N:4d} experimentos\\n{y:4d} caras', alpha=0)\n    plt.xlim(0, 1)\n    plt.ylim(0, 12)\n    plt.legend()\n    plt.yticks([])\n\n/home/tcicchini/anaconda3/envs/estadistica_e_inferencia_II/lib/python3.12/site-packages/numba/np/ufunc/dufunc.py:202: RuntimeWarning: divide by zero encountered in nb_logpdf\n  return super().__call__(*args, **kws)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Inferencia Bayesiana</span>"
    ]
  },
  {
    "objectID": "01_Inferencia_Bayesiana.html#analizando-los-resultados",
    "href": "01_Inferencia_Bayesiana.html#analizando-los-resultados",
    "title": "1  Inferencia Bayesiana",
    "section": "1.3 Analizando los resultados",
    "text": "1.3 Analizando los resultados\nLa primer figura del panel muestra los a priori, nuestra estimación de \\(\\theta\\) dado que no hemos realizado ningún experimento. Las sucesivas nueve figuras muestran las distribuciones a posteriori y se indica la cantidad de experimentos y de caras obtenidas. Además se puede ver un círculo negro de contorno blanco en 0.35, la cual representa el valor verdadero de \\(\\theta\\). Por supuesto que en problemas reales este valor es desconocido.\nEste ejemplo es realmente ilustrativo en varios aspectos.\n\nEl resultado de un análisis Bayesiano NO es un solo valor, si no una distribución (a posteriori) de los valores plausibles de los parámetros (dado los datos y el modelo).\nLa dispersión o ancho de las curvas es una medida de la incertidumbre sobre los valores.\nEl valor más probable viene dado por la moda de la distribución (el pico de la distribución).\nAún cuando \\(\\frac{2}{1} = \\frac{8}{4}\\) son numéricamente iguales tenemos menor incertidumbre en un resultado cuando el número de experimentos es mayor.\nDada una cantidad suficiente de datos los resultados tienden a converger sin importar el a priori usado.\nLa rapidez con la que los resultados convergen varía. En este ejemplo las curvas azul y turquesa parecen converger con tan solo 8 experimentos, pero se necesitan más de 50 experimentos para que las tres curvas se muestren similares. Aún con 150 experimentos se observan ligeras diferencias.\nPartiendo de los a priori uniforme (azul) o sesgado (turquesa) y habiendo realizado un solo experimento y observado una sola cara, lo más razonable es pensar que estamos frente a una moneda con dos caras!\nLa situación cambia drásticamente al ver por primera vez una moneda caer ceca. Ahora lo más probable (dado cualquiera de los tres a prioris) es inferir que \\(\\theta=0.5\\). Los valores de \\(\\theta\\) exactamente 0 o 1 se vuelven imposibles.\nEl a priori naranja es más informativo que los otros dos (la distribución esta más concentrada), por ello se requiere de un número mas grande de experimentos para “moverlo”.\nEl a priori uniforme (azul) es lo que se conoce como no informativo. El resultado de un análisis Bayesiano usando un a priori no-informativos en general coinciden con los resultados de análisis frecuentistas (en este caso el valor esperado de \\(\\theta = \\frac{y}{N}\\)).\n\n\n1.3.1 Influencia y elección del a priori\nDe los ejemplos anteriores debería quedar claro que los a priori influencian los resultados de nuestros cálculos. Esto tiene total sentido si no fuese así no haría falta incluirlos en el análisis y todo sería más simple (aunque nos perderíamos la oportunidad de usar información previa). De los ejemplos anteriores también debería quedar claro que a medida que aumentan los datos (como las tiradas de monedas) los resultados son cada vez menos sensibles al a priori. De hecho, para una cantidad infinita de datos el a priori no tiene ningún efecto. Exactamente cuantos datos son necesarios para que el efecto del a priori sea despreciable varía según el problema y los modelos usados. En el ejemplo de la moneda se puede ver que 50 experimentos bastan para hacer que dos de los resultados sean prácticamente indistinguibles, pero hacen falta más de 150 experimentos para que los 3 resultados se vuelvan practicamente independientes del a priori. Esto es así por que los dos primeros a prioris son relativamente planos, mientras que el tercer a priori concentra casi toda la probabilidad en una región relativamente pequeña. El tercer a priori no solo considera que el valor más probable de \\(\\theta\\) es 0.5, si no que considera que la mayoría de los otros valores son muy poco probables. ¿Cómo cambiarían los resultados si hubiéramos usado como a priori \\(\\operatorname{Beta}(\\alpha=2, \\beta=2)\\)?\nLa elección de los a priori puede poner nervioso a quienes se inician en el análisis Bayesiano (o a los detractores de este paradigma). ¡El temor es que los a prioris censuren a los datos y no les permitan hablar por sí mismos! Eso está muy bien, pero el punto es que los datos no saben hablar, con suerte murmuran. Los datos solo tienen sentido a la luz de los modelos (matemáticos y mentales) usados para interpretarlos, y los a prioris son parte de esos modelos.\nHay quienes prefieren usar a priori no-informativos (también conocidos como a priori planos, vagos, o difusos). Estos a priori aportan la menor cantidad posible de información y por lo tanto tienen el menor impacto posible en el análisis. Si bien es posible usarlos, en general hay razones prácticas para no preferirlos. En este curso usaremos a priori ligeramente informativos siguendo las recomendaciones de Gelman, McElreath, Kruschke, y otros. En muchos problemas sabemos al menos algo de los valores posibles que pueden tomar nuestros parámetros, por ejemplo que solo pueden ser positivos, o que están restringidos a sumar 1 o el rango aproximado, etc. En esos casos podemos usar a prioris que introduzcan esta ligera información. En estos casos podemos pensar que la función del a priori es la de mantener las inferencias dentro de límites razonables. Estos a priori se suelen llamar regularizadores.\nPor supuesto que también es posible usar a prioris informativos (o fuertes). Hacer esto es razonable solo si contamos con información previa confiable. Esto puede ser ventajoso en casos en que los datos contengan poca información sobre el problema. Si la información no viene por el likelihood (datos), entonces puede venir por el a priori. A modo de ejemplo, en bioinformática estructural es común usar toda la información previa posible (de forma Bayesiana y no-Bayesiana) para resolver problemas. Esto es posible por la existencia de bases de datos que almacenan los resultados de cientos o miles experimentos realizados a lo largo de décadas de esfuerzo (¡No usar esta información sería casi absurdo!). En resumen, si contás con información confiable no hay razón para descartarla, menos si el argumento es algo relacionado con pretender ser objetivo (¡No hay objetividad en negar lo que se sabe!).\nHasta ahora hemos visto que es posible clasificar, aunque sea de forma vaga o aproximada, a los a priori en función de la información que contienen. Pero saber esta clasificación no necesariamente hace las cosas más simples a la hora de elegir un a priori. ¿Acaso no sería mejor eliminar los a prioris de nuestro análisis? Eso haría el asunto mucho mas simple. Bueno, el punto es que desde una perspectiva Bayesiana todos los modelos tienen a prioris, aun cuando no sean explícitos. De hecho muchos resultados de la estadística frecuentista pueden considerarse casos especiales de modelos Bayesianos usando a prioris planos. Volviendo a la figura anterior se puede ver que la moda del a posteriori para la curva azul. Coincide con la estimación (puntual) frecuentista para el valor de \\(\\theta\\)\n\\[\n\\hat \\theta = {{y} \\over {N}}\n\\]\nNotar que \\(\\hat \\theta\\) es una estimación puntual (un número) y no una distribución.\nEste ejemplo nos muestra que no es posible hacer análisis estadísticos y sacarse los a prioris de encima. Un posible corolario es que es más flexible y transparente especificar los a prioris de forma explícita que esconderlos bajo la cama. Al hacerlo ganamos mayor control sobre nuestro modelo, mayor transparencia y por el mismo precio la estimación de la incertidumbre con la que se estima cada parámetro.\nPor último, hay que recordar que el modelado estadístico (como otras formas de modelado) es un proceso iterativo e interactivo. Nada nos impide usar más de un a priori (o un likelihood) si así lo quisiéramos. Una parte importante del modelado es la de cuestionar los supuestos y los a prioris son simplemente un tipo de supuestos (como lo son los likelihoods). Si tuviéramos más de un a priori razonable podríamos realizar un análisis de sensibilidad, es decir evaluar como cambian los resultados con los a prioris, podríamos llegar a la conclusión que para un rango amplio de a prioris ¡los resultados no varían! Más adelante veremos varias herramientas para comparar distintos modelos.\nDado que los a prioris tienen un papel central en la estadística Bayesiana, seguiremos discutiéndolos a medida que vayamos viendo problemas concretos. Por lo que si esta discusión no ha aclarado todas tus dudas y seguís algo confundido, mejor mantener la calma y no preocuparse demasiado, este tema ha sido motivo de discusión y confusión durante décadas ¡y la discusión todavía continua!\n\n\n1.3.2 Cuantificando el peso del a priori\nEn general la distribución más familiar para la mayoría de las personas es la distribución Gaussiana, como esta distribución está definida por dos parámetros, la media y la dispersión de ese valor medio, suele resultarnos natural pensar las distribuciones en esos términos. Si queremos expresar la distribución Beta en función de la media y la dispersión podemos hacerlo de la siguiente forma:\n\\[\\begin{align}\n\\alpha &= \\mu \\kappa \\\\\n\\beta &= (1 - \\mu) \\kappa\n\\end{align}\\]\ndonde \\(\\mu\\) es la media y \\(\\kappa\\) es un parámetro llamado concentración. Por ejemplo si \\(\\mu=0.5\\) y \\(\\kappa=40\\), tenemos que:\n\\[\\begin{align}\n\\alpha = 0.5 \\times 40 &= 20 \\\\\n\\beta = (1-0.5) \\times 40 &= 20\n\\end{align}\\]\n\\(\\kappa\\) se puede interpretar como la cantidad de experimentos si/no que realizamos dándonos como resultado la media \\(\\mu\\). Es decir el a priori no sesgado (naranja) equivale a haber arrojado una moneda 40 veces y haber obtenido como media 0.5. Es decir que si usamos ese a priori recién al observar 40 experimentos si/no, los datos tendrán el mismo peso relativo que el a priori, por debajo de este número el a priori contribuye más que los datos al resultado final y por encima menos. El a priori azul (uniforme) equivale a haber observado a la moneda caer una vez cara y otra vez ceca (\\(\\kappa = 2\\)). Cuando \\(\\kappa &lt; 2\\), la cosa se pone un poco extraña, por ejemplo el a priori sesgado (turquesa) equivale a haber observado una sola moneda (\\(\\kappa = 1\\)) pero en una especie de, a falta de mejor analogía, ¡¿superposición cuántica de estados?!\n\n\n1.3.3 Resumiendo el a posteriori\nEl resultado de un análisis Bayesiano es siempre una distribución de probabilidad.\nA la hora de comunicar los resultados de un análisis Bayesiano, lo más informativo es reportar la distribución completa, aunque esto no siempre es posible o deseable, por ejemplo el a posteriori de una distribución multidimensional es imposible de visualizar de forma directa. Por lo tanto, es común recurrir a distintas medidas que resumen el a posteriori, por ejemplo la media, mediana, la desviación estándar, etc. También es común, e informativo, reportar un intervalo de credibilidad. Existen varios criterios para definir intervalos de credibilidad, el que usaremos en este curso (y que también es ampliamente usado en la literatura) es lo que se conoce como intervalo de más alta densidad y nos referiremos a él por su sigla en ingles, HDI (Highest Posterior Density interval). Un HDI es el intervalo, más corto, que contiene una porción fija de la densidad de probabilidad, generalmente el 95% (aunque otros valores como 90% o 50% son comunes). Cualquier punto dentro de este intervalo tiene mayor densidad que cualquier punto fuera del intervalo. Para una distribución unimodal, el HDI 95 es simplemente el intervalo entre los percentiles 2,5 y 97,5.\nArviZ es un paquete de Python para análisis exploratorio de modelos Bayesianos. ArviZ provee de funciones que facilitan analizar y resumir el a posteriori. Por ejemplo plot_posterior puede ser usado para generar un gráfico con la media y el HDI. En el siguiente ejemplo en vez de un a posteriori “real” estamos usando datos sintéticos generados de una distribución Beta.\n\nmock_posterior = pz.Beta(5, 11).rvs(size=1000)\naz.plot_posterior(mock_posterior, figsize=(8, 4));\n\n\n\n\n\n\n\n\nAhora que estamos aprendiendo que es un HDI por primera vez y antes de que automaticemos el concepto conviene aclarar un par de puntos.\n\nLa elección automática de 95% (o cualquier otro valor) es totalmente arbitraria. En principio no hay ninguna razón para pensar que describir el a posteriori con un HDI 95 sea mejor que describirlo con un HDI 98 o que no podamos usar valores como 87% o 66%. El valor de 95% es tan solo un accidente histórico. Como un sutil recordatorio de esto ArviZ usa por defecto el valor 94%!\nUn intervalo de credibilidad (que es Bayesiano) no es lo mismo que un intervalo de confianza (que es frecuentista). Un intervalo de confianza es un intervalo que se define según un nivel de confianza, en general del 95%. Un intervalo de confianza se construye de tal forma que si repitiéramos infinitas veces un experimento obtendríamos que la proporción de intervalos que contienen el valor verdadero del parámetro que nos interesa coincide con el nivel de confianza estipulado. Contra-intuitivamente esto no es lo mismo que decir que un intervalo en particular tiene una probabilidad \\(x\\) de contener el parámetro (esto sería la definición de un intervalo de credibilidad, que es Bayesiano). De hecho, un intervalo de confianza en particular contiene o no contiene al valor, la teoría frecuentista no nos deja hablar de probabilidades de los parámetros, ya que estos tienen valores fijos. Si no queda clara la diferencia no te hagas problema, la diferencia entre estos dos conceptos suele ser tan difícil de entender que en la práctica estudiantes y científicos por igual interpretan los intervalos de confianza (frecuentistas) como intervalos de credibilidad (Bayesianos).\n\n\nSi bien desde la perspectiva Bayesiana podemos afirmar que un intervalo de credibilidad nos permite asegurar que la probabilidad de un parámetro está acotado en cierto rango. Siempre hay que tener presente que dicha afirmación es correcta SOLO en sentido teórico. Es decir, solo si todos los supuestos contenidos en el modelo son ciertos. Una inferencia es siempre dependiente de los datos y modelos usados.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Inferencia Bayesiana</span>"
    ]
  },
  {
    "objectID": "01_Inferencia_Bayesiana.html#distribución-predictivas",
    "href": "01_Inferencia_Bayesiana.html#distribución-predictivas",
    "title": "1  Inferencia Bayesiana",
    "section": "1.4 Distribución predictivas",
    "text": "1.4 Distribución predictivas\nSi bien el objeto central de la estadística Bayesiana es la distribución a posteriori. Existen otras distribuciones muy importantes. Una de ellas es la distribución predictiva a posteriori, otra es la distribución predictiva a priori.\n\n1.4.1 Distribución predictivas a posteriori\nEsta distribución representa las predicciones \\(\\tilde{y}\\) de un modelo una vez obtenido el a posteriori. Se calcula de la siguiente manera:\n\\[\np(\\tilde{y}  \\mid  y) = \\int p(\\tilde{y} \\mid \\theta) p(\\theta \\mid y) d\\theta\n\\]\nEs decir integramos \\(\\theta\\) de acuerdo a la distribución a posteriori.\nComputacionalmente podemos generar muestras de esta distribución según el siguiente procedimiento:\n\nElegimos un valor de \\(\\theta\\) de acuerdo a la distribución a posteriori \\(p(\\theta \\mid y)\\)\nFijamos \\(\\theta\\) en la distribución que usamos como likelihood \\(p(\\tilde{y} \\mid \\theta)\\) y generamos una muestra aleatoria\nRepetimos desde 1, tantas veces como muestras necesitemos\n\nLos datos generados son predictivos ya que son los datos que se esperaría ver por ejemplo en un futuro experimento, es decir son variables no observadas pero potencialmente observables. Como veremos en el siguiente capítulo un uso muy común para la distribución predictiva a posteriori es compararla con los datos observados y así evaluar si el posterior calculado es razonable.\n\n\n1.4.2 Distribución predictiva a priori\nAsi como es posible generar datos sintéticos desde el a posteriori. Es posible hacerlo desde el prior. En este caso la distribución se llama distribución predictiva a priori. Y representa los datos \\(p(Y^\\ast)\\) que el modelo espera ver antes de haber visto los datos. O más formalmente antes de haber sido condicionado a los datos. Se calcula como:\n\\[\np(Y^\\ast) =  \\int_{\\Theta} p(Y^\\ast \\mid \\theta) \\; p(\\theta) \\; d\\theta\n\\]\nEs importante notar que la definición es muy similar a la distribución predictiva a posteriori, solo que ahora integramos a lo largo del prior en vez del posterior.\nLos datos generados son predictivos ya que son los datos que el modelo esperara ver, es decir son datos no observados pero potencialmente observables. Como veremos en el siguiente capítulo un uso muy común para la distribución predictiva a priori es compararla con nuestro conocimiento previo y así evaluar si el modelo es capaz de generar resultados razonable, incluso antes de haber incorporado los datos.\n\n\n1.4.3 Distribución predictiva a priori y a posterior para el problema de la moneda.\nEn el caso del modelo beta-binomial es posible obtener analíticamente tanto la distribución predictiva a priori como a posteriori y estas son:\n\\[\np(Y^\\ast) \\propto \\operatorname{Beta-binomial}(n=N, \\alpha_{a priori}, \\beta_{a priori})\n\\]\n\\[\np(\\tilde{Y}  \\mid  Y)  \\propto \\operatorname{Beta-binomial}(n=N, \\alpha_{a priori} + y, \\beta_{a priori} + N - y)\n\\]\nOmitiremos la discusión de como se obtienen estas distribuciones\n\n\n1.4.4 Cuarteto Bayesiano\nEl siguiente bloque de código computa las distribuciones a priori, a posteriori, predictiva a priori y predictiva a posteriori. En vez de usar la distribución \\(\\operatorname{Beta-binomial}\\) para las distribuciones predictivas hemos optado por usar una aproximación más computacional y muestrear primero de la distribuciones beta y luego de la binomial. Esperamos que esta decisión contribuya a comprender mejor que representan estas distribuciones.\nEs importante notar que mientras la distribuciones a priori y a posteriori son distribución sobre los parámetros en un modelo, la distribución predictivas a priori y a posteriori son distribuciones sobre los datos (predichos).\n\nfig, axes = plt.subplots(2, 2, figsize=(10, 8), sharex=\"row\", sharey=\"row\")\naxes = np.ravel(axes)\ndist = pz.Beta\na_prior = 1\nb_prior = 1\nN = 12\ny = 3\nx = np.linspace(0, 1, 100)\n\n\nprior = dist(a_prior, b_prior).pdf(x)\naxes[0].fill_between(x, 0, prior)\naxes[0].set_title(\"Prior\")\naxes[0].set_yticks([])\n\n\nposterior = dist(a_prior + y, b_prior + N - y).pdf(x)\naxes[1].fill_between(x, 0, posterior)\naxes[1].set_title(\"Posterior\")\n\n\nprior = dist(a_prior, b_prior).rvs(500)\nprior_predictive = np.hstack([pz.Binomial(n=N, p=p).rvs(N) for p in prior])\naxes[2].hist(prior_predictive, bins=range(0, N+2), rwidth=0.9, align=\"left\", density=True)\naxes[2].set_xlim(-0.5, N+0.5)  \naxes[2].set_title(\"Predictiva a priori\")\n\nposterior = dist(a_prior + y, b_prior + N - y).rvs(500)\nprior_predictive = np.hstack([pz.Binomial(n=N, p=p).rvs(N) for p in posterior])\naxes[3].hist(prior_predictive, bins=range(0, N+2), rwidth=0.9, align=\"left\", density=True)\naxes[3].set_xlim(-0.5, N+0.5)  \naxes[3].set_title(\"Predictiva a posteriori\");\n\nfig.suptitle(\"Cuarteto Bayesiano\", fontweight=\"bold\", fontsize=16);",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Inferencia Bayesiana</span>"
    ]
  },
  {
    "objectID": "01_Inferencia_Bayesiana.html#ejercicios",
    "href": "01_Inferencia_Bayesiana.html#ejercicios",
    "title": "1  Inferencia Bayesiana",
    "section": "1.5 Ejercicios",
    "text": "1.5 Ejercicios\n\nEl estadístico Bruno de Finetti declaró que “Las probabilidades no existen”. Edwin Jaynes, físico, declaró que la teoría de probabilidad es la lógica de la ciencia. Discutí estos enunciados.\nUsá pz.Beta().plot_interactive() para explorar distintas combinaciones de parámetros de la distribución Beta. Cuál es el efecto de los parámetros \\(\\alpha\\) y \\(\\beta\\)?\nLa media de la distribución Beta es \\(\\frac{\\alpha}{\\alpha+\\beta}\\). Cuál es la media de la distribución a posteriori para un modelo Beta-Binomial, con prior Beta(2, 5) y 10 experimentos con 6 caras?\nLa varianza de la distribución Beta es \\(\\frac{\\alpha \\beta}{(\\alpha+\\beta)^2(\\alpha+\\beta+1)}\\). Cuál es la varianza de la distribución a posteriori para un modelo Beta-Binomial, con prior Beta(2, 5) y 10 experimentos con 6 caras?\nContrastá los resultados de los puntos anteriores usando la función mean y var de la distribución Beta de PreliZ.\nEl valor esperado, o media, de una variable aleatoria continua con densidad \\(f(p)\\) se define como:\n\n\\[\\mathbb{E}(p) = \\int p f(p) dp\\]\nSi \\(p \\sim \\text{Beta}(\\alpha, \\beta)\\) encuentra la expresión para el valor esperado de \\(p\\).\n\nPreliZ tiene una función llamada maxent. Explicá que hace y generá un par de ejemplos\nUsá la siguiente función para explorar diversas combinaciones de priors y likelihoods. Enunciá las conclusiones que consideres más relevantes.\n\n\ndef a_posteriori_grilla(grilla=10, a=1, b=1, caras=6, tiradas=9):\n    grid = np.linspace(0, 1, grilla)\n    prior = pz.Beta(a, b).pdf(grid)\n    likelihood = pz.Binomial(n=tiradas, p=grid).pdf(caras)\n    posterior = likelihood * prior\n    posterior /= posterior.sum()\n    _, ax = plt.subplots(1, 3, sharex=True, figsize=(16, 4))\n    ax[0].set_title('caras = {}\\ntiradas = {}'.format(caras, tiradas))\n    for i, (e, e_n) in enumerate(zip([prior, likelihood, posterior], ['a priori', 'likelihood', 'a posteriori'])):\n        ax[i].set_yticks([])\n        ax[i].plot(grid, e, 'o-', label=e_n)\n        ax[i].legend(fontsize=14)\n\n\ninteract(a_posteriori_grilla, grilla=ipyw.IntSlider(min=2, max=100, step=1, value=15), a=ipyw.FloatSlider(min=1, max=7, step=1, value=1), b=ipyw.FloatSlider(\n    min=1, max=7, step=1, value=1), caras=ipyw.IntSlider(min=0, max=20, step=1, value=6), tiradas=ipyw.IntSlider(min=0, max=20, step=1, value=9));",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Inferencia Bayesiana</span>"
    ]
  },
  {
    "objectID": "02_Programación_probabilística.html",
    "href": "02_Programación_probabilística.html",
    "title": "2  Programación probabilista",
    "section": "",
    "text": "2.1 Introducción a PyMC\nPyMC es un paquete para programación probabilística bajo Python. PyMC es lo suficientemente madura para resolver muchos problemas estadísticos. PyMC permite crear modelos probabilísticos usando una sintaxis intuitiva y fácil de leer que es muy similar a la sintaxis usada para describir modelos probabilísticos.\nLa mayoría de las funciones de PyMC están escritas en Python. Mientras que las partes computacionalmente demandantes están escritas en NumPy y PyTensor. Pytensor es una biblioteca de Python que permite definir, optimizar y evaluar expresiones matemáticas que involucran matrices multidimensionales de manera eficiente. PyTensor es hija de Theano una librería de Python originalmente desarrollada para deep learning (que es a su vez la antecesora de TensorFlow, PyTorch, etc).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programación probabilista</span>"
    ]
  },
  {
    "objectID": "02_Programación_probabilística.html#introducción-a-pymc",
    "href": "02_Programación_probabilística.html#introducción-a-pymc",
    "title": "2  Programación probabilista",
    "section": "",
    "text": "2.1.1 El problema de la moneda, ahora usando PyMC y ArviZ\nA continuación revistaremos el problema de la moneda visto en el capítulo anterior, usando esta vez PyMC para definir nuestro modelo y hacer inferencia. Luego usaremos ArviZ para analizar el a posterori.\nA continuación generaremos datos sintéticos, en este caso asumiremos que conocemos el valor the \\(\\theta\\) y lo llamaremos theta_real, y luego intentaremos averiguar este valor como si no lo conociéramos. En un problema real theta_real sería desconocido y realizaríamos un proceso de inferencia precisamente para averiguar su valor.\n\nn_experimentos = 4\ntheta_real = 0.35  # en una situación real este valor es desconocido\ndatos = pz.Binomial(n=1, p=theta_real).rvs(size=n_experimentos, random_state=123)\ndatos\n\narray([1, 1, 1, 0])\n\n\n\n\n2.1.2 Creación del modelo\nAhora que tenemos nuestros datos es necesario especificar el modelo. Para ello usaremos una distribución beta (con parámetros \\(\\alpha=\\beta=1\\)) como a priori y la distribución de Bernoulli como likelihood. Usando la notación usual en estadística tenemos:\n\\[\\begin{align}\n\\theta &\\sim \\operatorname{Beta}(\\alpha=1, \\beta=1)\\\\\nY &\\sim \\operatorname{Bin}(n=1, p=\\theta)\n\\end{align}\\]\n\nCada uno de los elementos del array datos es un experimento de Bernoulli, es decir un experimento donde solo es posible obtener dos valores (0 o 1) si en cambio tuviera el número total de “caras” obtenidas en varios experimentos de Bernoulli podríamos modelar el likelihood como una distribución Binomial.\n\nEsto modelo se traduce casi literalmente a PyMC, veamos:\n\nwith pm.Model() as nuestro_primer_modelo:\n    θ = pm.Beta(\"θ\", alpha=1, beta=1)  # a priori\n    y = pm.Bernoulli(\"y\", p=θ, observed=datos)  # likelihood\n    # y = pm.Binomial('y',n=n_experimentos, p=θ, observed=sum(datos))\n\nEn la primer linea hemos creado un nuevo objeto llamado nuestro_primer_modelo. Este objeto contiene información sobre el modelo y las variables que lo conforman. PyMC usa el bloque with para indicar que todas las lineas que están dentro de él hacen referencia al mismo modelo (que en este caso se llama nuestro_primer_modelo).\nLa segunda linea de código, especifica el a priori, como pueden ver la sintaxis sigue de cerca a la notación matemática, la única diferencia es que el primer argumento es siempre una cadena que especifica el nombre de la variable aleatoria (el nombre es usado internamente por PyMC), este nombre siempre deberá coincidir con el nombre de la variable de Python a la que se le asigna. De no ser así el código correrá igual, pero puede conducir a errores y confusiones al analizar el modelo.\n\nEs importante recalcar que las variables de PyMC, como \\(\\theta\\), no son números sino objetos que representan distribuciones. Es decir objetos a partir de los cuales es posible calcular probabilidades y generar números aleatorios.\n\nEn la tercer linea de código se especifica el likelihood, que como verán es similar a la linea anterior con la diferencia que hemos agregado un argumento llamado observed al cual le asignamos nuestros datos. Esta es la forma de indicarle a PyMC cuales son los datos. Los datos pueden ser números, listas de Python, arrays de NumPy o data_frames de Pandas.\n\n\n2.1.3 Inferencia\nNuestro modelo ya está completamente especificado, lo único que nos resta hacer es obtener el a posteriori. En el capítulo anterior vimos como hacerlo de forma analítica, ahora lo haremos con métodos numéricos.\nEn PyMC la inferencia se realiza escribiendo las siguientes lineas:\n\nwith nuestro_primer_modelo:\n    idata = pm.sample(1000)\n\nSampling 4 chains, 0 divergences ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸━━━━━━  84% 0:00:04 / 0:00:17\n\n\n\nPrimero llamamos al objeto que definimos como nuestro modelo (nuestro_primer_modelo), indicando de esta forma que es sobre ese objeto que queremos realizar la inferencia. En la segunda linea le indicamos a PyMC que deseamos 1000 muestras. Esta linea luce inocente, pero internamente PyMC está haciendo muchas cosas por nosotros. Algunas de las cuales son detalladas en el mensaje que se imprime en pantalla.\nVeamos este mensaje:\n\nLa primer linea indica que PyMC ha asignado el método de muestreo NUTS, el cual es un muy buen método para variables continuas.\nLa segunda linea nos da información sobre cómo se inicializaron los valores de NUTS. Un detalle que por ahora no nos preocupa.\nLa tercer linea indica que PyMC correrá cuatro cadenas en paralelo, es decir generará cuatro muestras independientes del a posteriori. Esta cantidad puede ser diferente en sus computadoras ya que es determinada automáticamente en función de los procesadores disponibles (que en mi caso, 4). sample tiene un argumento chains que permite modificar este comportamiento.\nLa cuarta linea indica qué variable ha sido asignada a cual método de muestreo. En este caso la información es redundante, ya que tenemos una sola variable, pero esto no siempre es así. PyMC permite combinar métodos de muestreo, ya sea de forma automática basado en propiedades de las variables a muestrear o especificado por el usuario usando el argumento step.\nLa quinta linea es una barra de progreso con varias métricas sobre la velocidad del muestreo, que en este caso (y para referencia futura) es muy alta. También indica la cantidad de cadenas usadas y la cantidad de divergencias. Tener 0 divergencias es ideal, más adelante discutiremos la razón.\nPor último tenemos un detalle de la cantidad de muestras generadas, aunque pedimos 1000 obtuvimos 8000, la razón es que es son 1000 por cadena (4 cadenas en mi caso), es decir 4000. Todavía nos queda explicar 4000 muestras extras, estas se corresponden a 1000 por cadena y son muestras que PyMC utiliza para auto-tunear el método de muestreo. Estás muestras son luego descartadas automáticamente ya que no son muestras representativas del posterior. La cantidad de pasos que se usan para tunear el algoritmo de muestro se puede cambiar con el argumento tune de la función pm.sample(.).\n\n\n\n2.1.4 Resumiendo el a posteriori\nPor lo general, la primer tarea a realizar luego de haber realizado un muestreo es evaluar como lucen los resultados. La función plot_forestplot de ArviZ es muy útil para esta tarea.\n\naz.plot_forest(idata, combined=True, figsize=(6, 2));\n\n\n\n\n\n\n\n\nEl punto indica la media, la linea gruesa el rango intercuartil y las lineas finas el HDI 94%\n\nEs importante notar que la variable y es una variable observada, es decir conocida. Mientras que en gráfico anterior estamos dibujando solo \\(\\theta\\) que es la única variables desconocida, y por lo tanto muestreada.\n\nSi quisiéramos un resumen numérico de los resultados podemos usar:\n\naz.summary(idata, kind=\"stats\")\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\n\n\n\n\nθ\n0.677\n0.179\n0.365\n0.985\n\n\n\n\n\n\n\nComo resultado obtenemos un DataFrame con los valores de la media, la desviación estándar y el intervalo HDI 94% (hdi_3 hdi_97).\nOtra forma de resumir visualmente el a posteriori es usar la función plot_posterior que viene con ArviZ, ya hemos utilizado esta distribución en el capítulo anterior para un falso a posteriori. Vamos a usarlo ahora con un posterior real. Por defecto, esta función muestra un histograma para variables discretas y KDEs para variables continuas. También obtenemos la media de la distribución (podemos preguntar por la mediana o moda usando el argumento point_estimate) y el 94% HDI como una línea negra en la parte inferior de la gráfica. Se pueden establecer diferentes valores de intervalo para el HDI con el argumento hdi_prob. Este tipo de gráfica fue presentado por John K. Kruschke en su gran libro “Doing Bayesian Data Analysis”.\n\naz.plot_posterior(idata);\n\n\n\n\n\n\n\n\n\n\n2.1.5 Accidentes mineros\nEste ejemplo está tomado del tutorial de PyMC.\nEl problema es el siguiente, tenemos un registro del número de accidentes en minas de carbón, ubicadas en el Reino Unido, que ocurrieron entre 1851 y 1962 (Jarrett, 1979). Se sospecha que la aplicación de ciertas regulaciones de seguridad tuvo como efecto una disminución en la cantidad de catástrofes. Por lo tanto nos interesa averiguar el año en que la tasa cambió y nos interesa estimar ambas tasas.\nLos datos son los siguientes, por un lado tenemos la variable accidentes que contiene la cantidad de accidentes por año y por el otro la variable años conteniendo el rango de años para los cuales tenemos datos. Si prestan atención verán que accidentes es un arreglo enmascarado (o masked array). Esto es un tipo especial de arreglo de NumPy donde cada elemento del arreglo contiene asociado un valor True o False el cual indica si el elemento debe o no ser usado durante cualquier tipo de operación. En este caso como faltan datos para dos años lo que se ha hecho es marcar esa falta de datos con un valor centinela de -999, esta es la forma de indicarle a PyMC la presencia de datos faltantes, alternativamente se pueden pasar los datos como un dataframe de Pandas conteniendo el valor especial NAN (que es el valor por defecto en Pandas para lidiar con datos faltantes).\nBien, pero para que molestarse con datos faltantes si en general es más fácil eliminarlos. una de las razones es que esto puede conducir a pérdida de información cuando por cada observación tenemos más de una variable o cantidad de interés. Por ejemplo si tenemos 50 sujetos a los que les hemos medido la presión, la temperatura y el ritmo cardíaco, pero sucede que para 4 de ellos no contamos con el datos de la presión (porque alguien se olvidó de medirlo o registrarlo, o porque el tensiómetro se rompió, o por lo que sea). Podemos eliminar esos cuatro sujetos del análisis y perder por lo tanto información sobre la presión y ritmo cardíaco, o podemos usar todos los datos disponibles y además estimar los valores de temperatura faltantes. En el contexto de la estadística Bayesiana los datos faltantes se tratan como un parámetro desconocido del modelo que puede ser estimado.\n\naccidentes = pd.Series([4, 5, 4, 0, 1, 4, 3, 4, 0, 6, 3, 3, 4, 0, 2, 6,\n                       3, 3, 5, 4, 5, 3, 1, 4, 4, 1, 5, 5, 3, 4, 2, 5,\n                       2, 2, 3, 4, 2, 1, 3, np.nan, 2, 1, 1, 1, 1, 3, 0, 0,\n                       1, 0, 1, 1, 0, 0, 3, 1, 0, 3, 2, 2, 0, 1, 1, 1,\n                       0, 1, 0, 1, 0, 0, 0, 2, 1, 0, 0, 0, 1, 1, 0, 2,\n                       3, 3, 1, np.nan, 2, 1, 1, 1, 1, 2, 4, 2, 0, 0, 1, 4,\n                       0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1])\naños = np.arange(1851, 1962)\n\n\nplt.plot(años, accidentes, \".\")\nplt.ylabel(\"Número de accidentes\")\nplt.xlabel(\"Año\");\n\n\n\n\n\n\n\n\nPara modelar los accidentes usaremos una distribución de Poisson. Como creemos que la cantidad media de accidentes es distinta antes y después de la introducción de regulaciones de seguridad usaremos dos valores de tasas medias de accidentes (\\(t_0\\) y \\(t_1\\)). Además deberemos estimar un punto de corte (\\(pc\\)) que dividirá los años para los cuales se aplica la tasa de accidentes \\(t_0\\) de los cuales se aplica la tasa \\(t_1\\):\n\\[\\begin{equation}\nA_t \\sim Poisson(tasa)\n\\end{equation}\\]\n\\[\\begin{equation}\ntasa = \\begin{cases}\nt_0, \\text{si } t \\ge pc,\\\\\nt_1, \\text{si } t \\lt pc\n\\end{cases}\n\\end{equation}\\]\nLos a prioris que usaremos serán:\n\\[\\begin{align}\nt_0 \\sim Expon(1) \\\\\nt_1 \\sim Expon(1) \\\\\npc \\sim U(A_0, A_1)\n\\end{align}\\]\nDonde la distribución uniforme es discreta y \\(A_0\\) y \\(A_1\\) corresponden al primer y último año considerado en el análisis respectivamente.\nGráficamente el modelo es:\n\nUna peculiaridad de la implementación de este modelo en PyMC es el uso de la función pm.switch (linea 10). Esta es en realidad una función de PyMC y equivale a un if else de Python. Si el primer argumento es True entonces devuelve el segundo argumento caso contrario el tercer argumento. Como resultado tenemos que tasa es un vector de longitud igual a la de años y cuyos elementos corresponden a una repetición \\(t_0\\) seguida de una repetición \\(t_1\\), la cantidad exacta de repeticiones de \\(t_0\\) y \\(t_1\\) está controlada por la condición \\(pc \\ge\\) años. De esta forma, podemos al muestrear \\(pc\\), modificar que años reciben cual tasa para el cálculo del likelihood.\n\nwith pm.Model() as modelo_cat:\n\n    pc = pm.DiscreteUniform(\"pc\", lower=años.min(), upper=años.max())\n\n    # Priors para las tasas antes y después del cambio.\n    t_0 = pm.Exponential(\"t_0\", 1)\n    t_1 = pm.Exponential(\"t_1\", 1)\n\n    # Asignamos las tasas a los años de acuerdo a pc\n    tasa = pm.Deterministic(\"tasa\", pm.math.switch(pc &gt;= años, t_0, t_1))\n\n    acc = pm.Poisson(\"acc\", tasa, observed=accidentes)\n    idata_cat = pm.sample(1000, random_seed=1791, idata_kwargs={\"log_likelihood\": True})\n\nSampling 4 chains, 0 divergences ━━━━━━━━━━━━━━━━━━━━━━━━╸━━━━━━━━━━━━━━━  61% 0:00:10 / 0:00:14\n\n\n\n\nidata_cat\n\n\n            \n              \n                arviz.InferenceData\n              \n              \n              \n            \n                  \n                  posterior\n                  \n                  \n                      \n                          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 7MB\nDimensions:               (chain: 4, draw: 1000, acc_dim_0: 111,\n                           acc_unobserved_dim_0: 2, tasa_dim_0: 111)\nCoordinates:\n  * chain                 (chain) int64 32B 0 1 2 3\n  * draw                  (draw) int64 8kB 0 1 2 3 4 5 ... 995 996 997 998 999\n  * acc_dim_0             (acc_dim_0) int64 888B 0 1 2 3 4 ... 107 108 109 110\n  * acc_unobserved_dim_0  (acc_unobserved_dim_0) int64 16B 0 1\n  * tasa_dim_0            (tasa_dim_0) int64 888B 0 1 2 3 4 ... 107 108 109 110\nData variables:\n    acc                   (chain, draw, acc_dim_0) int64 4MB 4 5 4 0 ... 0 1 0 1\n    acc_unobserved        (chain, draw, acc_unobserved_dim_0) int64 64kB 0 ... 2\n    pc                    (chain, draw) int64 32kB 1887 1887 1889 ... 1891 1891\n    t_0                   (chain, draw) float64 32kB 3.626 3.154 ... 2.858 3.064\n    t_1                   (chain, draw) float64 32kB 0.863 1.119 ... 1.074\n    tasa                  (chain, draw, tasa_dim_0) float64 4MB 3.626 ... 1.074\nAttributes:\n    created_at:                 2024-05-31T18:43:49.545639+00:00\n    arviz_version:              0.18.0\n    inference_library:          pymc\n    inference_library_version:  5.15.0\n    sampling_time:              23.341310262680054\n    tuning_steps:               1000xarray.DatasetDimensions:chain: 4draw: 1000acc_dim_0: 111acc_unobserved_dim_0: 2tasa_dim_0: 111Coordinates: (5)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 995 996 997 998 999array([  0,   1,   2, ..., 997, 998, 999])acc_dim_0(acc_dim_0)int640 1 2 3 4 5 ... 106 107 108 109 110array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,\n        14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,\n        28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,\n        42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,\n        56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,\n        70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,\n        84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,\n        98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110])acc_unobserved_dim_0(acc_unobserved_dim_0)int640 1array([0, 1])tasa_dim_0(tasa_dim_0)int640 1 2 3 4 5 ... 106 107 108 109 110array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,\n        14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,\n        28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,\n        42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,\n        56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,\n        70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,\n        84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,\n        98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110])Data variables: (6)acc(chain, draw, acc_dim_0)int644 5 4 0 1 4 3 4 ... 0 0 1 0 0 1 0 1array([[[4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        ...,\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1]],\n\n       [[4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        ...,\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1]],\n\n       [[4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        ...,\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1]],\n\n       [[4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        ...,\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1]]])acc_unobserved(chain, draw, acc_unobserved_dim_0)int640 2 0 2 0 2 0 2 ... 6 2 5 2 5 2 6 2array([[[0, 2],\n        [0, 2],\n        [0, 2],\n        ...,\n        [1, 1],\n        [1, 1],\n        [1, 1]],\n\n       [[0, 0],\n        [0, 0],\n        [0, 0],\n        ...,\n        [2, 0],\n        [2, 0],\n        [2, 0]],\n\n       [[1, 1],\n        [1, 1],\n        [1, 1],\n        ...,\n        [4, 3],\n        [4, 4],\n        [2, 4]],\n\n       [[0, 3],\n        [0, 3],\n        [1, 3],\n        ...,\n        [5, 2],\n        [5, 2],\n        [6, 2]]])pc(chain, draw)int641887 1887 1889 ... 1892 1891 1891array([[1887, 1887, 1889, ..., 1889, 1889, 1889],\n       [1887, 1887, 1886, ..., 1893, 1893, 1890],\n       [1889, 1890, 1890, ..., 1890, 1892, 1894],\n       [1889, 1889, 1889, ..., 1892, 1891, 1891]])t_0(chain, draw)float643.626 3.154 3.215 ... 2.858 3.064array([[3.62609622, 3.15358939, 3.21504832, ..., 3.24213148, 3.24458058,\n        3.32619297],\n       [3.41140371, 2.96600758, 2.93413869, ..., 3.40462424, 2.40233718,\n        3.25590635],\n       [2.92708336, 2.75116042, 3.6619095 , ..., 3.15104363, 2.85371574,\n        2.82202577],\n       [3.04951578, 3.00911206, 3.27150806, ..., 2.85126572, 2.85814187,\n        3.06443812]])t_1(chain, draw)float640.863 1.119 1.038 ... 0.8535 1.074array([[0.86299821, 1.11937508, 1.03820933, ..., 1.08729406, 0.73449746,\n        0.81363484],\n       [0.94353549, 1.10934817, 1.00952674, ..., 0.83546158, 0.91014974,\n        0.94228058],\n       [0.88137241, 0.83087074, 1.05354979, ..., 1.1700208 , 0.74372701,\n        1.0046596 ],\n       [0.99897101, 1.00757965, 0.93265556, ..., 1.02012749, 0.85350861,\n        1.07387497]])tasa(chain, draw, tasa_dim_0)float643.626 3.626 3.626 ... 1.074 1.074array([[[3.62609622, 3.62609622, 3.62609622, ..., 0.86299821,\n         0.86299821, 0.86299821],\n        [3.15358939, 3.15358939, 3.15358939, ..., 1.11937508,\n         1.11937508, 1.11937508],\n        [3.21504832, 3.21504832, 3.21504832, ..., 1.03820933,\n         1.03820933, 1.03820933],\n        ...,\n        [3.24213148, 3.24213148, 3.24213148, ..., 1.08729406,\n         1.08729406, 1.08729406],\n        [3.24458058, 3.24458058, 3.24458058, ..., 0.73449746,\n         0.73449746, 0.73449746],\n        [3.32619297, 3.32619297, 3.32619297, ..., 0.81363484,\n         0.81363484, 0.81363484]],\n\n       [[3.41140371, 3.41140371, 3.41140371, ..., 0.94353549,\n         0.94353549, 0.94353549],\n        [2.96600758, 2.96600758, 2.96600758, ..., 1.10934817,\n         1.10934817, 1.10934817],\n        [2.93413869, 2.93413869, 2.93413869, ..., 1.00952674,\n         1.00952674, 1.00952674],\n...\n        [3.15104363, 3.15104363, 3.15104363, ..., 1.1700208 ,\n         1.1700208 , 1.1700208 ],\n        [2.85371574, 2.85371574, 2.85371574, ..., 0.74372701,\n         0.74372701, 0.74372701],\n        [2.82202577, 2.82202577, 2.82202577, ..., 1.0046596 ,\n         1.0046596 , 1.0046596 ]],\n\n       [[3.04951578, 3.04951578, 3.04951578, ..., 0.99897101,\n         0.99897101, 0.99897101],\n        [3.00911206, 3.00911206, 3.00911206, ..., 1.00757965,\n         1.00757965, 1.00757965],\n        [3.27150806, 3.27150806, 3.27150806, ..., 0.93265556,\n         0.93265556, 0.93265556],\n        ...,\n        [2.85126572, 2.85126572, 2.85126572, ..., 1.02012749,\n         1.02012749, 1.02012749],\n        [2.85814187, 2.85814187, 2.85814187, ..., 0.85350861,\n         0.85350861, 0.85350861],\n        [3.06443812, 3.06443812, 3.06443812, ..., 1.07387497,\n         1.07387497, 1.07387497]]])Indexes: (5)chainPandasIndexPandasIndex(Index([0, 1, 2, 3], dtype='int64', name='chain'))drawPandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='int64', name='draw', length=1000))acc_dim_0PandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       101, 102, 103, 104, 105, 106, 107, 108, 109, 110],\n      dtype='int64', name='acc_dim_0', length=111))acc_unobserved_dim_0PandasIndexPandasIndex(Index([0, 1], dtype='int64', name='acc_unobserved_dim_0'))tasa_dim_0PandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       101, 102, 103, 104, 105, 106, 107, 108, 109, 110],\n      dtype='int64', name='tasa_dim_0', length=111))Attributes: (6)created_at :2024-05-31T18:43:49.545639+00:00arviz_version :0.18.0inference_library :pymcinference_library_version :5.15.0sampling_time :23.341310262680054tuning_steps :1000\n                      \n                  \n            \n            \n            \n                  \n                  log_likelihood\n                  \n                  \n                      \n                          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 3MB\nDimensions:             (chain: 4, draw: 1000, acc_observed_dim_0: 109)\nCoordinates:\n  * chain               (chain) int64 32B 0 1 2 3\n  * draw                (draw) int64 8kB 0 1 2 3 4 5 ... 994 995 996 997 998 999\n  * acc_observed_dim_0  (acc_observed_dim_0) int64 872B 0 1 2 3 ... 106 107 108\nData variables:\n    acc_observed        (chain, draw, acc_observed_dim_0) float64 3MB -1.652 ...\nAttributes:\n    created_at:                 2024-05-31T18:43:49.865873+00:00\n    arviz_version:              0.18.0\n    inference_library:          pymc\n    inference_library_version:  5.15.0xarray.DatasetDimensions:chain: 4draw: 1000acc_observed_dim_0: 109Coordinates: (3)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 995 996 997 998 999array([  0,   1,   2, ..., 997, 998, 999])acc_observed_dim_0(acc_observed_dim_0)int640 1 2 3 4 5 ... 104 105 106 107 108array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,\n        14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,\n        28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,\n        42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,\n        56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,\n        70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,\n        84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,\n        98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108])Data variables: (1)acc_observed(chain, draw, acc_observed_dim_0)float64-1.652 -1.973 ... -1.074 -1.003array([[[-1.65152346, -1.97280472, -1.65152346, ..., -1.01034087,\n         -0.86299821, -1.01034087],\n        [-1.73747805, -2.19837467, -1.73747805, ..., -1.00660451,\n         -1.11937508, -1.00660451],\n        [-1.7217326 , -2.16332813, -1.7217326 , ..., -1.0007119 ,\n         -1.03820933, -1.0007119 ],\n        ...,\n        [-1.7152614 , -2.14846833, -1.7152614 , ..., -1.00360196,\n         -1.08729406, -1.00360196],\n        [-1.71469005, -2.14714187, -1.71469005, ..., -1.0430662 ,\n         -0.73449746, -1.0430662 ],\n        [-1.69693321, -2.10454273, -1.69693321, ..., -1.01987845,\n         -0.81363484, -1.01987845]],\n\n       [[-1.68096213, -2.06327619, -1.68096213, ..., -1.00165679,\n         -0.94353549, -1.00165679],\n        [-1.79519421, -2.31741533, -1.79519421, ..., -1.00557556,\n         -1.10934817, -1.00557556],\n        [-1.80653673, -2.33956069, -1.80653673, ..., -1.00004509,\n         -1.00952674, -1.00004509],\n...\n        [-1.73816262, -2.19986683, -1.73816262, ..., -1.01299927,\n         -1.1700208 , -1.01299927],\n        [-1.83728192, -2.39809792, -1.83728192, ..., -1.03980824,\n         -0.74372701, -1.03980824],\n        [-1.85025966, -2.42224259, -1.85025966, ..., -1.00001082,\n         -1.0046596 , -1.00001082]],\n\n       [[-1.76763834, -2.26209344, -1.76763834, ..., -1.00000053,\n         -0.99897101, -1.00000053],\n        [-1.78058574, -2.28837861, -1.78058574, ..., -1.00002858,\n         -1.00757965, -1.00002858],\n        [-1.70855765, -2.13274451, -1.70855765, ..., -1.00237488,\n         -0.93265556, -1.00237488],\n        ...,\n        [-1.83826752, -2.39994242, -1.83826752, ..., -1.00019988,\n         -1.02012749, -1.00019988],\n        [-1.83550883, -2.39477502, -1.83550883, ..., -1.01190826,\n         -0.85350861, -1.01190826],\n        [-1.76303503, -2.25260871, -1.76303503, ..., -1.0026014 ,\n         -1.07387497, -1.0026014 ]]])Indexes: (3)chainPandasIndexPandasIndex(Index([0, 1, 2, 3], dtype='int64', name='chain'))drawPandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='int64', name='draw', length=1000))acc_observed_dim_0PandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n        99, 100, 101, 102, 103, 104, 105, 106, 107, 108],\n      dtype='int64', name='acc_observed_dim_0', length=109))Attributes: (4)created_at :2024-05-31T18:43:49.865873+00:00arviz_version :0.18.0inference_library :pymcinference_library_version :5.15.0\n                      \n                  \n            \n            \n            \n                  \n                  sample_stats\n                  \n                  \n                      \n                          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 688kB\nDimensions:                (chain: 4, draw: 1000, accept_dim_0: 2,\n                            accepted_dim_0: 2, scaling_dim_0: 2)\nCoordinates:\n  * chain                  (chain) int64 32B 0 1 2 3\n  * draw                   (draw) int64 8kB 0 1 2 3 4 5 ... 995 996 997 998 999\n  * accept_dim_0           (accept_dim_0) int64 16B 0 1\n  * accepted_dim_0         (accepted_dim_0) int64 16B 0 1\n  * scaling_dim_0          (scaling_dim_0) int64 16B 0 1\nData variables: (12/20)\n    accept                 (chain, draw, accept_dim_0) float64 64kB 1.0 ... 0...\n    acceptance_rate        (chain, draw) float64 32kB 0.9228 0.7767 ... 0.7077\n    accepted               (chain, draw, accepted_dim_0) float64 64kB 1.0 ......\n    diverging              (chain, draw) bool 4kB False False ... False False\n    energy                 (chain, draw) float64 32kB 178.4 179.6 ... 180.3\n    energy_error           (chain, draw) float64 32kB 0.2636 ... -0.09946\n    ...                     ...\n    reached_max_treedepth  (chain, draw) bool 4kB False False ... False False\n    scaling                (chain, draw, scaling_dim_0) float64 64kB 3.221 .....\n    smallest_eigval        (chain, draw) float64 32kB nan nan nan ... nan nan\n    step_size              (chain, draw) float64 32kB 1.724 1.724 ... 0.9887\n    step_size_bar          (chain, draw) float64 32kB 1.139 1.139 ... 1.071\n    tree_depth             (chain, draw) int64 32kB 2 2 2 2 2 2 ... 2 2 2 1 2 2\nAttributes:\n    created_at:                 2024-05-31T18:43:49.563871+00:00\n    arviz_version:              0.18.0\n    inference_library:          pymc\n    inference_library_version:  5.15.0\n    sampling_time:              23.341310262680054\n    tuning_steps:               1000xarray.DatasetDimensions:chain: 4draw: 1000accept_dim_0: 2accepted_dim_0: 2scaling_dim_0: 2Coordinates: (5)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 995 996 997 998 999array([  0,   1,   2, ..., 997, 998, 999])accept_dim_0(accept_dim_0)int640 1array([0, 1])accepted_dim_0(accepted_dim_0)int640 1array([0, 1])scaling_dim_0(scaling_dim_0)int640 1array([0, 1])Data variables: (20)accept(chain, draw, accept_dim_0)float641.0 1.0 1.0 ... 0.002307 0.2685array([[[1.00000000e+00, 1.00000000e+00],\n        [1.00000000e+00, 5.00000000e-01],\n        [1.07751159e+00, 5.00000000e-01],\n        ...,\n        [4.31940183e+00, 1.57423770e+00],\n        [3.05222589e-02, 5.00000000e-01],\n        [6.62027334e-02, 8.25523913e-03]],\n\n       [[9.59371927e-01, 0.00000000e+00],\n        [2.18259579e-04, 5.00000000e-01],\n        [8.95629041e-01, 6.13768589e-01],\n        ...,\n        [3.73227807e-01, 5.87822822e-01],\n        [7.08670030e-05, 5.00000000e-01],\n        [1.81159812e+00, 1.58759338e-02]],\n\n       [[2.30664222e+00, 4.06596957e-01],\n        [4.29372932e-01, 5.00000000e-01],\n        [1.83665422e-01, 5.57528849e-01],\n        ...,\n        [8.69336169e-02, 6.31549643e-01],\n        [3.71610466e-01, 6.46252600e-01],\n        [2.16412024e-01, 1.23676643e+00]],\n\n       [[9.18342500e-02, 3.33979313e-02],\n        [9.86860930e-03, 1.24871376e-01],\n        [5.31408122e-02, 1.00378983e+00],\n        ...,\n        [1.00000000e+00, 1.19264887e+00],\n        [2.23290367e+00, 1.70828896e-01],\n        [2.30698471e-03, 2.68531695e-01]]])acceptance_rate(chain, draw)float640.9228 0.7767 1.0 ... 1.0 0.7077array([[0.92277106, 0.77672031, 1.        , ..., 0.8067856 , 0.72162055,\n        1.        ],\n       [1.        , 0.63276109, 1.        , ..., 0.8156513 , 0.89756198,\n        0.7975073 ],\n       [1.        , 0.75852799, 0.85536921, ..., 0.85247546, 0.90929773,\n        0.91014643],\n       [1.        , 0.99101851, 0.41467517, ..., 0.86763111, 1.        ,\n        0.70774038]])accepted(chain, draw, accepted_dim_0)float641.0 1.0 1.0 0.5 ... 1.0 0.0 0.0 0.5array([[[1. , 1. ],\n        [1. , 0.5],\n        [1. , 0.5],\n        ...,\n        [1. , 1. ],\n        [0. , 0.5],\n        [0. , 0. ]],\n\n       [[1. , 0. ],\n        [0. , 0.5],\n        [1. , 0.5],\n        ...,\n        [1. , 0.5],\n        [0. , 0.5],\n        [1. , 0. ]],\n\n       [[1. , 0.5],\n        [1. , 0.5],\n        [0. , 0.5],\n        ...,\n        [0. , 1. ],\n        [1. , 1. ],\n        [1. , 1. ]],\n\n       [[0. , 0. ],\n        [0. , 0. ],\n        [0. , 1. ],\n        ...,\n        [1. , 0.5],\n        [1. , 0. ],\n        [0. , 0.5]]])diverging(chain, draw)boolFalse False False ... False Falsearray([[False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False]])energy(chain, draw)float64178.4 179.6 177.1 ... 178.3 180.3array([[178.41143845, 179.59173694, 177.13514252, ..., 176.89630037,\n        177.9966776 , 177.18561891],\n       [176.84600094, 177.85074116, 176.96668779, ..., 179.68836894,\n        180.14059586, 179.50668463],\n       [176.02268341, 177.38329427, 179.55032142, ..., 183.02157913,\n        182.60418822, 183.40238698],\n       [177.54752547, 177.45355953, 179.93278057, ..., 178.77479853,\n        178.2828962 , 180.28435945]])energy_error(chain, draw)float640.2636 -0.1333 ... -0.09946array([[ 0.26355782, -0.13330973, -0.26240448, ...,  0.24313169,\n         0.28330907, -0.24217743],\n       [-0.42732741,  0.32701494, -0.33620174, ...,  0.19996137,\n         0.36717857, -1.20664616],\n       [-0.20394846,  0.27637557,  0.44286054, ..., -0.26506457,\n         0.31760094, -0.77510954],\n       [-0.05506083,  0.02731414,  0.17298595, ...,  0.14198864,\n        -0.01235158, -0.09945761]])index_in_trajectory(chain, draw)int641 2 1 -1 2 1 -3 ... -3 2 0 -1 -1 2array([[ 1,  2,  1, ...,  2, -2, -1],\n       [-1, -3, -1, ...,  3,  2,  3],\n       [-1, -1, -2, ..., -2,  2,  3],\n       [-2,  1, -2, ..., -1, -1,  2]])largest_eigval(chain, draw)float64nan nan nan nan ... nan nan nan nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]])lp(chain, draw)float64-178.1 -177.4 ... -177.8 -178.5array([[-178.06471821, -177.36341405, -176.54725472, ..., -176.33919677,\n        -177.26311192, -176.26608141],\n       [-176.03730645, -177.00447729, -176.41281426, ..., -178.84693935,\n        -179.92107948, -176.03922262],\n       [-175.65859291, -177.35642617, -179.07588836, ..., -179.48487457,\n        -182.41992202, -181.79561482],\n       [-177.33561688, -177.40972276, -177.47033385, ..., -178.71915246,\n        -177.82876556, -178.52296286]])max_energy_error(chain, draw)float640.2636 0.5106 ... -0.07446 0.6935array([[ 0.26355782,  0.51057923, -0.38363035, ...,  0.36462812,\n         0.43043962, -0.24217743],\n       [-0.42732741,  0.70045505, -0.33620174, ...,  0.42551817,\n         0.36717857, -1.20664616],\n       [-0.20394846,  0.27637557,  0.44286054, ...,  0.56588886,\n        -0.60278095, -0.77510954],\n       [-0.08579607, -0.02907607,  2.02675312, ...,  0.14198864,\n        -0.07445566,  0.69349068]])n_steps(chain, draw)float643.0 3.0 3.0 3.0 ... 3.0 1.0 3.0 3.0array([[3., 3., 3., ..., 3., 3., 1.],\n       [1., 3., 1., ..., 3., 3., 3.],\n       [1., 1., 3., ..., 3., 3., 3.],\n       [3., 3., 3., ..., 1., 3., 3.]])perf_counter_diff(chain, draw)float640.0006981 0.0006962 ... 0.000763array([[0.00069813, 0.00069616, 0.00068387, ..., 0.00111065, 0.00119855,\n        0.00064691],\n       [0.00061593, 0.00123071, 0.00070023, ..., 0.00088583, 0.00075916,\n        0.00076425],\n       [0.00039227, 0.000367  , 0.00073128, ..., 0.00154919, 0.00074948,\n        0.00077921],\n       [0.00106948, 0.000987  , 0.00098201, ..., 0.00049192, 0.00077151,\n        0.00076301]])perf_counter_start(chain, draw)float641.026e+04 1.026e+04 ... 1.028e+04array([[10259.88701219, 10259.88914294, 10259.89126505, ...,\n        10263.32539843, 10263.32820558, 10263.3313978 ],\n       [10265.10207955, 10265.10506822, 10265.10834566, ...,\n        10268.63116394, 10268.6347517 , 10268.6371953 ],\n       [10271.13718939, 10271.13939714, 10271.14141493, ...,\n        10274.64758034, 10274.65072144, 10274.65649717],\n       [10276.61366541, 10276.61621919, 10276.61868574, ...,\n        10279.31999639, 10279.32245881, 10279.32500796]])process_time_diff(chain, draw)float640.0006977 0.0006954 ... 0.0007627array([[0.00069774, 0.00069535, 0.00068307, ..., 0.00111002, 0.00119974,\n        0.00064597],\n       [0.0006157 , 0.0012309 , 0.00070089, ..., 0.0008852 , 0.00075844,\n        0.00076414],\n       [0.00039234, 0.00036647, 0.00073174, ..., 0.00140041, 0.00074867,\n        0.00077878],\n       [0.00106931, 0.00098708, 0.00098203, ..., 0.00049186, 0.00077122,\n        0.00076265]])reached_max_treedepth(chain, draw)boolFalse False False ... False Falsearray([[False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False]])scaling(chain, draw, scaling_dim_0)float643.221 2.35 3.221 ... 3.221 2.536array([[[3.22102   , 2.3498805 ],\n        [3.22102   , 2.3498805 ],\n        [3.22102   , 2.3498805 ],\n        ...,\n        [3.22102   , 2.3498805 ],\n        [3.22102   , 2.3498805 ],\n        [3.22102   , 2.3498805 ]],\n\n       [[3.22102   , 2.6573415 ],\n        [3.22102   , 2.6573415 ],\n        [3.22102   , 2.6573415 ],\n        ...,\n        [3.22102   , 2.6573415 ],\n        [3.22102   , 2.6573415 ],\n        [3.22102   , 2.6573415 ]],\n\n       [[2.9282    , 2.53589441],\n        [2.9282    , 2.53589441],\n        [2.9282    , 2.53589441],\n        ...,\n        [2.9282    , 2.53589441],\n        [2.9282    , 2.53589441],\n        [2.9282    , 2.53589441]],\n\n       [[3.22102   , 2.53589441],\n        [3.22102   , 2.53589441],\n        [3.22102   , 2.53589441],\n        ...,\n        [3.22102   , 2.53589441],\n        [3.22102   , 2.53589441],\n        [3.22102   , 2.53589441]]])smallest_eigval(chain, draw)float64nan nan nan nan ... nan nan nan nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]])step_size(chain, draw)float641.724 1.724 1.724 ... 0.9887 0.9887array([[1.72357069, 1.72357069, 1.72357069, ..., 1.72357069, 1.72357069,\n        1.72357069],\n       [1.2359314 , 1.2359314 , 1.2359314 , ..., 1.2359314 , 1.2359314 ,\n        1.2359314 ],\n       [1.3423228 , 1.3423228 , 1.3423228 , ..., 1.3423228 , 1.3423228 ,\n        1.3423228 ],\n       [0.98866571, 0.98866571, 0.98866571, ..., 0.98866571, 0.98866571,\n        0.98866571]])step_size_bar(chain, draw)float641.139 1.139 1.139 ... 1.071 1.071array([[1.13858127, 1.13858127, 1.13858127, ..., 1.13858127, 1.13858127,\n        1.13858127],\n       [1.15412385, 1.15412385, 1.15412385, ..., 1.15412385, 1.15412385,\n        1.15412385],\n       [1.13254671, 1.13254671, 1.13254671, ..., 1.13254671, 1.13254671,\n        1.13254671],\n       [1.07082605, 1.07082605, 1.07082605, ..., 1.07082605, 1.07082605,\n        1.07082605]])tree_depth(chain, draw)int642 2 2 2 2 2 2 2 ... 2 2 2 2 2 1 2 2array([[2, 2, 2, ..., 2, 2, 1],\n       [1, 2, 1, ..., 2, 2, 2],\n       [1, 1, 2, ..., 2, 2, 2],\n       [2, 2, 2, ..., 1, 2, 2]])Indexes: (5)chainPandasIndexPandasIndex(Index([0, 1, 2, 3], dtype='int64', name='chain'))drawPandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='int64', name='draw', length=1000))accept_dim_0PandasIndexPandasIndex(Index([0, 1], dtype='int64', name='accept_dim_0'))accepted_dim_0PandasIndexPandasIndex(Index([0, 1], dtype='int64', name='accepted_dim_0'))scaling_dim_0PandasIndexPandasIndex(Index([0, 1], dtype='int64', name='scaling_dim_0'))Attributes: (6)created_at :2024-05-31T18:43:49.563871+00:00arviz_version :0.18.0inference_library :pymcinference_library_version :5.15.0sampling_time :23.341310262680054tuning_steps :1000\n                      \n                  \n            \n            \n            \n                  \n                  observed_data\n                  \n                  \n                      \n                          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 2kB\nDimensions:             (acc_observed_dim_0: 109)\nCoordinates:\n  * acc_observed_dim_0  (acc_observed_dim_0) int64 872B 0 1 2 3 ... 106 107 108\nData variables:\n    acc_observed        (acc_observed_dim_0) int64 872B 4 5 4 0 1 ... 0 0 1 0 1\nAttributes:\n    created_at:                 2024-05-31T18:43:49.569925+00:00\n    arviz_version:              0.18.0\n    inference_library:          pymc\n    inference_library_version:  5.15.0xarray.DatasetDimensions:acc_observed_dim_0: 109Coordinates: (1)acc_observed_dim_0(acc_observed_dim_0)int640 1 2 3 4 5 ... 104 105 106 107 108array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,\n        14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,\n        28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,\n        42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,\n        56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,\n        70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,\n        84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,\n        98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108])Data variables: (1)acc_observed(acc_observed_dim_0)int644 5 4 0 1 4 3 4 ... 0 0 1 0 0 1 0 1array([4, 5, 4, 0, 1, 4, 3, 4, 0, 6, 3, 3, 4, 0, 2, 6, 3, 3, 5, 4, 5, 3,\n       1, 4, 4, 1, 5, 5, 3, 4, 2, 5, 2, 2, 3, 4, 2, 1, 3, 2, 1, 1, 1, 1,\n       3, 0, 0, 1, 0, 1, 1, 0, 0, 3, 1, 0, 3, 2, 2, 0, 1, 1, 1, 0, 1, 0,\n       1, 0, 0, 0, 2, 1, 0, 0, 0, 1, 1, 0, 2, 3, 3, 1, 2, 1, 1, 1, 1, 2,\n       4, 2, 0, 0, 1, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1])Indexes: (1)acc_observed_dim_0PandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n        99, 100, 101, 102, 103, 104, 105, 106, 107, 108],\n      dtype='int64', name='acc_observed_dim_0', length=109))Attributes: (4)created_at :2024-05-31T18:43:49.569925+00:00arviz_version :0.18.0inference_library :pymcinference_library_version :5.15.0\n                      \n                  \n            \n            \n              \n            \n            \n\n\n\nax = az.plot_posterior(idata_cat, var_names=[\"~tasa\", \"~acc\"], figsize=(12, 6));\n\n\n\n\n\n\n\n\n\naz.summary(idata_cat, var_names=[\"~tasa\", \"~acc\"])\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\nacc_unobserved[0]\n2.074\n1.799\n0.000\n5.000\n0.098\n0.069\n322.0\n472.0\n1.02\n\n\nacc_unobserved[1]\n0.986\n1.028\n0.000\n3.000\n0.041\n0.029\n662.0\n883.0\n1.01\n\n\npc\n1889.783\n2.406\n1886.000\n1894.000\n0.159\n0.113\n218.0\n493.0\n1.04\n\n\nt_0\n3.088\n0.283\n2.552\n3.606\n0.006\n0.004\n2261.0\n2316.0\n1.00\n\n\nt_1\n0.929\n0.116\n0.712\n1.149\n0.002\n0.002\n2801.0\n2797.0\n1.00\n\n\n\n\n\n\n\n\ntasa_mean = idata_cat.posterior[\"tasa\"].mean((\"chain\", \"draw\"))\ntasa_hdi = az.hdi(idata_cat.posterior[\"tasa\"].values)\npc_hdi = az.hdi(idata_cat.posterior[\"pc\"])[\"pc\"]\n\n_, ax = plt.subplots(figsize=(10, 5), sharey=True)\nax.plot(años, accidentes, \".\")\n\nax.set_ylabel(\"Número de accidentes\")\nax.set_xlabel(\"Año\")\n\nax.vlines(\n    idata_cat.posterior[\"pc\"].mean((\"chain\", \"draw\")),\n    accidentes.min(),\n    accidentes.max(),\n    color=\"C1\",\n    lw=2,\n)\n\n\nax.fill_betweenx(\n    [accidentes.min(), accidentes.max()], pc_hdi[0], pc_hdi[1], alpha=0.3, color=\"C1\"\n)\nax.plot(años, tasa_mean, \"k\", lw=2)\nax.fill_between(años, tasa_hdi[:, 0], tasa_hdi[:, 1], alpha=0.3, color=\"k\")\n\n#faltante0 = (\n#    idata_cat.posterior[\"acc_missing\"].sel(acc_missing_dim_0=0).mean((\"chain\", \"draw\"))\n#)\n#faltante1 = (\n#    idata_cat.posterior[\"acc_missing\"].sel(acc_missing_dim_0=1).mean((\"chain\", \"draw\"))\n#)\nfaltante0 = (\n    idata_cat.posterior[\"acc_unobserved\"].sel(acc_unobserved_dim_0=0).mean((\"chain\", \"draw\"))\n)\nfaltante1 = (\n    idata_cat.posterior[\"acc_unobserved\"].sel(acc_unobserved_dim_0=1).mean((\"chain\", \"draw\"))\n)\n\nax.plot(años[np.isnan(accidentes)], [faltante0, faltante1], \"C2s\");",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programación probabilista</span>"
    ]
  },
  {
    "objectID": "02_Programación_probabilística.html#comparando-grupos",
    "href": "02_Programación_probabilística.html#comparando-grupos",
    "title": "2  Programación probabilista",
    "section": "2.2 Comparando grupos",
    "text": "2.2 Comparando grupos\nUna tarea común al analizar datos es comparar grupos. Podríamos estar interesados en analizar los resultados de un ensayo clínico donde se busca medir la efectividad de una droga, o la reducción de la cantidad de accidentes de tránsito al introducir un cambio en las regulaciones de tránsito, o el desempeño de estudiantes bajo diferentes aproximaciones pedagógicas, etc. Este tipo de preguntas se suele resolver en el marco de lo que se conoce como pruebas de hipótesis que busca declarar si una observación es estadísticamente significativa o no. Nosotros tomaremos una ruta alternativa.\nAl comparar grupos debemos decidir que característica(s) vamos a usar. Una característica común es la media de cada grupo. En ese caso podemos calcular la distribución a posteriori de la diferencia entre medias. Para ayudarnos a entender este posterior usaremos 3 herramientas:\n\nUn posteriorplot con un valor de referencia\nUna medida llamada d de Cohen\nLa probabilidad de superioridad\n\nEn el capítulo anterior ya vimos un ejemplo de cómo usar posteriorplot con un valor de referencia, pronto veremos otro ejemplo. Las novedades aquí son el d de Cohen y la probabilidad de superioridad, dos maneras populares de expresar el tamaño del efecto.\n\n2.2.1 d de Cohen\nUna medida muy común, al menos en ciertas disciplinas, para cuantificar el tamaño del efecto es el d de Cohen\n\\[\n\\frac{\\mu_2 - \\mu_1}{\\sqrt{\\frac{\\sigma_2^2 + \\sigma_1^2}{2}}}\n\\]\nDe acuerdo con esta expresión, el tamaño del efecto es la diferencia de las medias con respecto a la desviación estándar combinada de ambos grupos. Ya que es posible obtener una distribución a posteriori de medias y de desviaciones estándar, también es posible calcular una distribución a posteriori de los valores d de Cohen. Por supuesto, si sólo necesitamos o queremos una estimación puntual, podríamos calcular la media de esa distribución a posteriori. En general, al calcular una desviación estándar combinada, se toma en cuenta el tamaño de la muestra de cada grupo explícitamente, pero la ecuación de d de Cohen omite el tamaño de la muestra, la razón es que tomamos estos valores del posterior (por lo que ya estamos considerando la incertidumbre de las desviaciones estándar).\n\nUn d de Cohen es una forma de medir el tamaño del efecto donde la diferencia de las medias se estandariza al considerar las desviaciones estándar de ambos grupos.\n\nCohen introduce la variabilidad de cada grupo al usar sus desviaciones estándar. Esto es realmente importante, una diferencia de 1 cuando la desviación estándar es de 0.1 es muy grande en comparación con la misma diferencia cuando la desviación estándar es 10. Además, un cambio de x unidades de un grupo respecto del otro podría explicarse por cada punto desplazándose exactamente x unidades o la mitad de los puntos sin cambiar mientras la otra mitad cambia 2x unidades, y así con otras combinaciones. Por lo tanto, incluir las variaciones intrínsecas de los grupos es una forma de poner las diferencias en contexto. Re-escalar (estandarizar) las diferencias nos ayuda a dar sentido a la diferencia entre grupos y facilita evaluar si el cambio es importante, incluso cuando no estamos muy familiarizados con la escala utilizada para las mediciones.\nUn d de Cohen se puede interpretar como un Z-score. Un Z-score es la cantidad de desviaciones estándar que un valor difiere del valor medio de lo que se está observando o midiendo, puede ser positivo o negativo dependiendo de si la diferencia es por exceso o por defecto. Por lo tanto, un d de Cohen de -1.2, indica que la media de un grupo está 1.2 desviación estándar por debajo de la media del otro grupo.\nIncluso con las diferencias de medias estandarizadas, puede ser necesario tener que calibrarnos en función del contexto de un problema determinado para poder decir si un valor de d de Cohen es grande, pequeño, mediano, importante, despreciable, etc. Afortunadamente, esta calibración se puede adquirir con la práctica, a modo de ejemplo si estamos acostumbrados a realizar varios análisis para más o menos el mismo tipo de problemas, podemos acostumbrarnos a un d de Cohen de entre 0.8 y 1.2, de modo que si obtenemos un valor de 2 podría ser que estamos frente a algo importante, inusual (¡o un error!). Una alternativa es consultar con expertos en el tema.\nUna muy buena página web para explorar cómo se ven los diferentes valores de Cohen’s es http://rpsychologist.com/d3/cohend. En esa página, también encontrarán otras formas de expresar el tamaño del efecto; algunas de ellos podrían ser más intuitivas, como la probabilidad de superioridad que analizaremos a continuación.\n\n\n2.2.2 Probabilidad de superioridad\nEsta es otra forma de informar el tamaño del efecto y se define como la probabilidad que un dato tomado al azar de un grupo tenga un valor mayor que un punto tomado al azar del otro grupo. Si suponemos que los datos que estamos utilizando se distribuyen de forma Gaussiana, podemos calcular la probabilidad de superioridad a partir de la d de Cohen usando la expresión:\n\\[\\begin{equation} \\label{eq_ps}\nps = \\Phi \\left ( \\frac{\\delta}{\\sqrt{2}} \\right)\n\\end{equation}\\]\nDonde \\(\\Phi\\) es la distribución normal acumulada y \\(\\delta\\) es el d de Cohen. Podemos calcular una estimación puntual de la probabilidad de superioridad (lo que generalmente se informa) o podemos calcular la distribución a posteriori. Si no estamos de acuerdo con la suposición de normalidad, podemos descartar esta fórmula y calcularla directamente a partir del posterior sin necesidad de asumir ninguna distribución. Esta es una de las ventajas de usar métodos de muestreo para estimar el a posteriori, una vez obtenidas las muestras lo que podemos hacer con ellas es muy flexible.\n\n\n2.2.3 El conjunto de datos propinas\nPara explorar el tema de esta sección, vamos a usar el conjunto de datos tips (propinas). Estos datos fueron informados por primera vez por Bryant, P. G. and Smith, M (1995) Practical Data Analysis: Case Studies in Business Statistics.\nQueremos estudiar el efecto del día de la semana sobre la cantidad de propinas en un restaurante. Para este ejemplo, los diferentes grupos son los días. Comencemos el análisis cargando el conjunto de datos como un DataFrame de Pandas usando solo una línea de código. Si no está familiarizado con Pandas, el comando tail se usa para mostrar las últimas filas de un DataFrame:\n\ntips = pd.read_csv(\"datos/propinas.csv\")\ntips.tail()\n\n\n\n\n\n\n\n\ntotal_cuenta\npropina\ngenero\nfumador\ndia\ntiempo\ncantidad\n\n\n\n\n239\n29.03\n5.92\nHombre\nNo\nSab\nCena\n3\n\n\n240\n27.18\n2.00\nMujer\nSi\nSab\nCena\n2\n\n\n241\n22.67\n2.00\nHombre\nSi\nSab\nCena\n2\n\n\n242\n17.82\n1.75\nHombre\nNo\nSab\nCena\n2\n\n\n243\n18.78\n3.00\nMujer\nNo\nJue\nCena\n2\n\n\n\n\n\n\n\nPara este ejemplo solo vamos a usar las columnas dia y propina y vamos a usar la función plot_forest de ArviZ. Aún cuando ArviZ está pensado para análisis de modelos Bayesianos algunos de sus funciones pueden ser útiles para analizar datos.\n\naz.plot_forest(\n    tips.pivot(columns=\"dia\", values=\"propina\").to_dict(\"list\"),\n    kind=\"ridgeplot\",\n    hdi_prob=1,\n    figsize=(12, 4),\n);\n\n\n\n\n\n\n\n\nA fin de simplificar el análisis vamos a crear 2 variables: * La variable categories contiene los nombres de los días (abreviados) * La variable idx codifica los días de la semana como enteros entre 0 y 3.\n\ncategories = np.array([\"Jue\", \"Vie\", \"Sab\", \"Dom\"])\n\ntip = tips[\"propina\"].values\nidx = pd.Categorical(tips[\"dia\"], categories=categories).codes\n\nEl modelo para este problema es basicamente igual a model_g, con la diferencia que \\(\\mu\\) y \\(\\sigma\\) ahora serán vectores en vez de escalares. La sintáxis de PyMC es super-útil para estos caso, en vez de usar for loops escribimos el modelo de forma vectorizada, para ello especificamos el argumento shape para los priors \\(\\mu\\) y \\(\\sigma\\) y para el likelihood usamos la variable idx para indexar de forma adecuada \\(\\mu\\) y \\(\\sigma\\) para asegurar que usamos los parámetros correctos para cada grupo. En este ejemplo un \\(\\mu\\) para jueves, otra para viernes, otra para sábado y una cuarta para domingo, y lo mismo para \\(\\sigma\\).\n    with pm.Model() as comparing_groups:\n        μ = pm.Normal('μ', mu=0, sigma=10, shape=4)\n        σ = pm.HalfNormal('σ', sigma=10, shape=4)\n\n        y = pm.Normal('y', mu=μ[idx], sigma=σ[idx], observed=tip)\nPyMC provee una sintaxis alternativa, la cual consisten en especificar coordenadas y dimensiones. La ventaja de esta alternativa es que permite una mejor integración con ArviZ.\nVeamos, en este ejemplo tenemos 4 valores para las medias y 4 para las desviaciones estándar, y por eso usamos shape=4. El InferenceData tendrá 4 indices 0, 1, 2, 3 correspondientes a cada uno de los 4 días. Pero es trabajo del usuario asociar esos indices numéricos con los días.\nAl usar coordenadas y dimensiones nosotros podremos usar los rótulos 'Jue', 'Vie', 'Sab', 'Dom' para referirnos a los parámetros relacionados con cada uno de estos días. ArviZ también podrá hacer uso de estos rótulos. Vamos a especificar dos coordenadas dias con las dimensiones 'Jue', 'Vie', 'Sab', 'Dom' y dias_flat que contendrá los mismo rótulos pero repetidos según el orden y longitud que corresponda con cada observación. Esto último será útil para poder obtener pruebas predictivas a posteriori para cada día.\n\ncoords = {\"dias\": categories, \"dias_flat\": categories[idx]}\n\nwith pm.Model(coords=coords) as comparing_groups:\n    μ = pm.HalfNormal(\"μ\", sigma=5, dims=\"dias\")\n    σ = pm.HalfNormal(\"σ\", sigma=1, dims=\"dias\")\n\n    y = pm.Gamma(\"y\", mu=μ[idx], sigma=σ[idx], observed=tip, dims=\"dias_flat\")\n\n    idata_cg = pm.sample()\n    idata_cg.extend(pm.sample_posterior_predictive(idata_cg))\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [μ, σ]\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 25 seconds.\nSampling: [y]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUna vez obtenido un a posteriori podemos hacer todos los análisis que creamos pertinentes con el. Primero hagamos una prueba predictiva a posteriori. Vemos que en general somos capaces de capturar la forma general de las distribuciones, pero hay detalles que se nos escapan. Esto puede deberse al tamaño relativamente pequeño de la muestra, a que hay otros factores además del día que tienen influencia en las propinas o una combinación de ambas. Por ahora seguiremos con el análisis considerando que el modelo es lo suficientemente bueno\n\n_, axes = plt.subplots(2, 2)\naz.plot_ppc(\n    idata_cg,\n    num_pp_samples=100,\n    coords={\"dias_flat\": [categories]},\n    flatten=[],\n    ax=axes,\n);\n\n\n\n\n\n\n\n\nPodemos ver la distribución de cada uno de los parámetros haciendo\n\naz.plot_posterior(idata_cg, var_names=\"μ\", figsize=(12, 3));\n\n\n\n\n\n\n\n\nLa figura anterior es bastante informativa, por ejemplo vemos que los valores medios de las propinas difieren en solo unos pocos centavos y que para los domingos el valor es ligeramente más alto que para el resto de los días analizados.\nPero quizá consideramos que puede ser mejor mostrar los datos de otra forma. Por ejemplo podemos calcular todas las diferencias de medias a posteriori entre si. Además podríamos querer usar alguna medida del tamaño del efecto que sea popular entre nuestra audiencia, como podrían ser la probabilidad de superioridad o d de Cohen.\nCohen’s d\n\\[\n\\frac{\\mu_2 - \\mu_1}{\\sqrt{\\frac{\\sigma_1^2 + \\sigma_2^2}{2}}}\n\\]\n\nSe puede interpretar como un z-score. Cuántas desviaciones estándar una media de un grupo está por encima (o por debajo) de la media del otro grupo\nEjemplo interactivo\n\nProbabilidad de superioridad\n\nLa probabilidad que un dato tomado de un grupo sea mayor que la de un dato tomado del otro grupo.\nSi suponemos que los datos se distribuyen normalmente, entonces:\n\n\\[\n\\text{ps} = \\Phi \\left ( \\frac{\\delta}{\\sqrt{2}} \\right)\n\\]\n\\(\\Phi\\) es la cdf de una distribución normal \\(\\delta\\) es el valor del Cohen’s d.\nCon el siguiente código usamos plot_posterior para graficar todas las diferencias no triviales o redundantes. Es decir evitamos las diferencias de un día con sigo mismo y evitamos calcular ‘Vie - Jue’ si ya hemos calculado ‘Jue - Vie’. Si lo viéramos como una matriz de diferencias solo estaríamos calculando la porción triangular superior.\n\ncg_posterior = az.extract(idata_cg)\n\ndist = pz.Normal(0, 1)\n\ncomparisons = [(categories[i], categories[j]) for i in range(4) for j in range(i+1, 4)]\n\n_, axes = plt.subplots(3, 2, figsize=(13, 9), sharex=True)\n\nfor (i, j), ax in zip(comparisons, axes.ravel()):\n    means_diff = cg_posterior[\"μ\"].sel(dias=i) - cg_posterior['μ'].sel(dias=j)\n    \n    d_cohen = (means_diff /\n               np.sqrt((cg_posterior[\"σ\"].sel(dias=i)**2 + \n                        cg_posterior[\"σ\"].sel(dias=j)**2) / 2)\n              ).mean().item()\n    \n    ps = dist.cdf(d_cohen/(2**0.5))\n    az.plot_posterior(means_diff.values, ref_val=0, ax=ax)\n    ax.set_title(f\"{i} - {j}\")\n    ax.plot(0, label=f\"Cohen's d = {d_cohen:.2f}\\nProb sup = {ps:.2f}\", alpha=0)\n    ax.legend(loc=1)\n\n\n\n\n\n\n\n\nUna forma de interpretar estos resultados es comparando el valor de referencia con el intervalo HDI. De acuerdo con la figura anterior, tenemos solo un caso cuando el 94% HDI excluye el valor de referencia de cero, la diferencia en las propinas entre el jueves y el domingo. Para todos los demás ejemplos, no podemos descartar una diferencia de cero (de acuerdo con los criterios de superposición de valores de referencia de HDI). Pero incluso para ese caso, ¿es una diferencia promedio de ≈0.5 dólares lo suficientemente grande? ¿Es suficiente esa diferencia para aceptar trabajar el domingo y perder la oportunidad de pasar tiempo con familiares o amigos? ¿Es suficiente esa diferencia para justificar promediar las propinas durante los cuatro días y dar a cada mozo/a la misma cantidad de dinero de propina? Este tipo de preguntas es crucial para interpretar los datos y/o tomar decisiones, pero las respuestas no las puede ofrecer la estadística de forma automática (ni ningún otro procedimiento). La estadística solo pueden ayudar en la interpretación y/o toma de decisiones.\nNota: Dependiendo del público el gráfico anterior puede que esté demasiado “cargado”, quizá es útil para una discusión dentro del equipo de trabajo, pero para un público en general quizá convenga sacar elementos o repartir la información entre una figura y una tabla o dos figuras.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programación probabilista</span>"
    ]
  },
  {
    "objectID": "02_Programación_probabilística.html#resumen",
    "href": "02_Programación_probabilística.html#resumen",
    "title": "2  Programación probabilista",
    "section": "2.3 Resumen",
    "text": "2.3 Resumen\nAunque la estadística Bayesiana es conceptualmente simple, los modelos probabilísticos a menudo conducen a expresiones analíticamente intratables. Durante muchos años, esta fue una gran barrera que obstaculizó la adopción amplia de métodos Bayesianos. Afortunadamente, la matemática, la física y la informática vinieron al rescate en forma de métodos numéricos capaces, al menos en principio, de resolver cualquier inferencia. La posibilidad de automatizar el proceso de inferencia ha llevado al desarrollo de los lenguajes de programación probabilista que permiten una clara separación entre la definición del modelo y la inferencia.\nPyMC es una librería de Python para programación probabilística con una sintaxis simple, intuitiva y fácil de leer que también está muy cerca de la sintaxis estadística utilizada para describir modelos probabilísticos. En este capítulo introducimos PyMC revisando el problema de la moneda que vimos en el capítulo anterior. La diferencia es que no tuvimos que derivar analíticamente la distribución a posteriori. Los modelos en PyMC se definen dentro de un bloque with; para agregar una distribución de probabilidad a un modelo, solo necesitamos escribir una línea de código. Las distribuciones se pueden combinar y se pueden usar como priors (variables no observadas) o likelihoods (variables observadas). En la sintaxis de PyMC la única diferencia entre ambas es que para esta última debemos pasar los datos usando el argumento observed. Si todo va bien las muestras generadas por PyMC serán representativas de la distribución a posteriori y por lo tanto serán una representación de las consecuencias lógicas del modelo y los datos.\nArviZ es una librería que nos ayuda a explorar los modelos definidos por PyMC (u otras librerías como PyStan, TFP, BeanMachine, etc). Una forma de usar el posterior para ayudarnos a tomar decisiones es comparando la ROPE con el intervalo HDI. También mencionamos brevemente la noción de funciones de pérdida, una aproximación formal para cuantificar los costos y beneficios asociados a la toma de decisiones. Aprendimos que las funciones de pérdida y las estimaciones puntuales están íntimamente asociadas.\nHasta este momento todos los ejemplos estuvieron basado en modelos con un solo parámetro. Sin embargo PyMC permite, en principiop, usar un número arbitrario de parámetros, esto lo ejemplificamos con un modelo Gaussiano y luego una generalización de este, el modelo t de Student. La distribución t de Student suele usarse como alternativa a la Gaussiana cuando queremos hacer inferencias robustas a valores aberrantes. Pronto veremos cómo se puede usar estos modelos como para construir regresiones lineales.\nFinalizamos comparando medias entre grupos, una tarea común en análisis de datos. Si bien esto a veces se enmarca en el contexto de las pruebas de hipótesis, tomamos otra ruta y trabajamos este problema como una inferencia del tamaño del efecto.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programación probabilista</span>"
    ]
  },
  {
    "objectID": "02_Programación_probabilística.html#ejercicios",
    "href": "02_Programación_probabilística.html#ejercicios",
    "title": "2  Programación probabilista",
    "section": "2.4 Ejercicios",
    "text": "2.4 Ejercicios\n\nUsando PyMC reproducí los resultados del primer capítulo para el problema de la moneda (use los 3 priors usados en ese capítulo).\nReemplazá la distribución beta por una uniforme en el intervalo [0, 1] ¿Cómo cambia la velocidad del muestreo? ¿Y si se usas un intervalo más ámplio, como [-3, 3]?\nPara el modelo_g. Usá una Gaussiana para la media, centrada en la media empírica. Probá modificar la desviación estándard de ese prior ¿Cuán robusto/sensible son los resultados a la elección del prior?\nLa Gaussiana es una distribución sin límites es decir es válida en el intervalo \\([-\\infty, \\infty]\\), en el ejemplo anterior la usamos para modelar datos que sabemos tienen límites ¿Qué opinas de esta elección?\nCalculá la probabilidad de superioridad a partir de las muestras del posterior (sin usar la formula de probabilidad de superioridad a partir de la d de Cohen). Comparar los resultados con los valores obtenidos a analíticamente.\nAplica al menos uno de los modelos visto en este capítulo a datos propios o de tu interés.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programación probabilista</span>"
    ]
  },
  {
    "objectID": "03_Modelos_jerárquicos.html",
    "href": "03_Modelos_jerárquicos.html",
    "title": "3  Modelado Jerárquico",
    "section": "",
    "text": "3.1 Jerarquías en los datos\nAl analizar datos es común encontrarse con situaciones como las siguientes:\nEn todos estos casos lo que tenemos es una agrupamiento o jerarquía “natural”. Los datos están agrupados en diferentes niveles. En el caso de los estudiantes, los datos están agrupados por escuela, ciudad y provincia. En el caso de los pacientes, los datos están agrupados por hospital. En el caso de los corredores tenemos mediciones repetidas de un mismo individuo a lo largo del tiempo, es decir los datos están agrupados por corredor.\nEs muy común que al analizar estos datos ignoremos la estructura jerárquica de los datos y decidamos o bien agrupar los datos (ej, todos los corredores en un mismo grupo) o bien analizarlos por separado (cada corredor, independiente del resto). Agrupar todos los datos nos permite obtener estimaciones más precisas, el costo es que perdemos los detalles de cada grupo. Al agrupar datos también corremos el riesgo de opacar diferencias o incluso obtener conclusiones diametralmente opuestas (ver paradoja de Simpson). Tratar a cada grupo por separado tiene la ventaja que podemos capturar las particularidades de cada grupo, pero las estimaciones de los parámetros serán menos precisas y corremos el riesgo de sobre-ajuste.\n¿Es posible construir un modelo que contemple que los datos están formados por grupos diferentes, pero que al mismo tiempo comparten información?\nSi, y ese es precisamente el tema principal de este capítulo. Este tipo de modelos se conocen como modelos jerárquicos. En la literatura es posible encontrar el mismo concepto bajo diferentes nombres; modelos multinivel, modelos de efectos mixtos, modelos de efectos aleatorios o modelos anidados. Lamentablemente algunos autores utilizan estos términos de forma intercambiable, mientras que otros los utilizan para marcar algunas diferencias. Nosotros utilizaremos el término modelo jerárquico para referirnos a cualquier modelo que contemple la estructura jerárquica de los datos.\nUn modelo jerárquico se construye asignado distribuciones a priori a las distribuciones a priori! Este nivel superior de distribuciones a priori se suelen denominar hiper-priors. Conceptualmente al utilizar un hiper-prior, estamos asumiendo que los priors de cada grupo no son nesariamente idénticos, pero sí están vinculados al provenir de una población (o mecanismo generarador de datos) común. La siguiente figura muestra un diagrama con las diferencias entre un modelo agrupado (un solo grupo), un modelo no agrupado (todos los grupos separados) y un modelo jerárquico.\nEl introducir hiper-priors induce una distribución a posteriori donde las estimaciones de cada grupo estarán parcialmente agrupadas, es decir en algún punto entre el modelo agrupado y el modelo no agrupado. Para generar intuición sobre este punto construyamos un modelo no-jerarquico y uno jerárquico y compararemos los resultados.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Modelado Jerárquico</span>"
    ]
  },
  {
    "objectID": "03_Modelos_jerárquicos.html#jerarquías-en-los-datos",
    "href": "03_Modelos_jerárquicos.html#jerarquías-en-los-datos",
    "title": "3  Modelado Jerárquico",
    "section": "",
    "text": "Datos de desempeño deportivo. Por ejemplo datos de los mismos corredores en diferentes años.\nDatos de salud. Por ejemplo datos de pacientes en diferentes hospitales.\nDatos de rendimiento escolar. Podríamos tener información sobre el rendimiento de los estudiantes en diferentes escuelas, de diferentes ciudades y en diferentes provincias.\n\n\n\n\n\n\n\n\n\nDiagrama que muestra las diferencias entre un modelo agrupado, un modelo no agrupado y un modelo jerárquico.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Modelado Jerárquico</span>"
    ]
  },
  {
    "objectID": "03_Modelos_jerárquicos.html#desplazamientos-jerárquicos",
    "href": "03_Modelos_jerárquicos.html#desplazamientos-jerárquicos",
    "title": "3  Modelado Jerárquico",
    "section": "3.2 Desplazamientos jerárquicos",
    "text": "3.2 Desplazamientos jerárquicos\nLas proteínas son moléculas formadas por 20 unidades, llamadas amino ácidos, cada amino ácido puede aparecer en una proteína 0 o más veces. Así como una melodía está definida por una sucesión de notas musicales, una proteína está definida por una sucesión de amino ácidos. Algunas variaciones de notas pueden dar como resultados pequeñas variaciones sobre la misma melodía, otras variaciones pueden resultar en melodías completamente distintas, algo similar sucede con las proteínas. Una forma de estudiar proteínas es usando resonancia magnética nuclear (la misma técnica usada para imágenes médicas). Esta técnica permite medir diversos observables, uno de ellos se llama desplazamiento químico y para simplificar diremos que podemos medir tantos desplazamientos químicos como amino ácidos tenga una proteína. Los aminoácidos son una familia de compuestos químicos por lo que tendría sentido tratarlos a todos de igual forma, pero al mismo tiempo tienen diferentes propiedades químicas, las cuales de hecho son relevantes para comprender como funcionan las proteínas! Por lo que también tiene sentido tratarlos por separado. Como ya vimos una alternativa es construir un modelo jerárquico y hacer algo a mitad de camino.\nEl siguiente conjunto de datos contiene valores de desplazamientos químicos para un conjunto de proteínas. Si inspeccionan el DataFrame cs_data verán que tiene 4 columnas:\n\nLa primera es un código que identifica a la proteína (si tienen curiosidad pueden ingresar el identificador en esta base de datos https://www.rcsb.org).\nLa segunda columna tiene el nombre del amino ácido (pueden corroborar que hay tan solo 20 nombres únicos).\nLa tercera contiene valores teóricos de desplazamientos químicos (calculados usando métodos cuánticos).\nLa cuarta tiene valores experimentales.\n\nLa motivación de este ejemplo es comparar las diferencias entre valores teóricos y experimentales, entre otras razones para evaluar la capacidad de los métodos teóricos para reproducir valores experimentales.\n\ncs_data = pd.read_csv('datos/chemical_shifts_theo_exp.csv')\ndiff = cs_data.theo - cs_data.exp\ncat_encode = pd.Categorical(cs_data['aa'])\nidx = cat_encode.codes\ncoords = {\"aa\": cat_encode.categories}\n\nPara resaltar la diferencia entre un modelo jerárquico y uno no-jerárquico vamos a construir ambos. Primero el no-jerárquico. Este modelo es equivalente a haber ajustado cada uno de los aa grupos por separado.\n\nwith pm.Model(coords=coords) as cs_nh:         \n    μ = pm.Normal('μ', mu=0, sigma=1, dims=\"aa\") \n    σ = pm.HalfNormal('σ', sigma=2, dims=\"aa\") \n \n    y = pm.Normal('y', mu=μ[idx], sigma=σ[idx], observed=diff) \n     \n    idata_cs_nh = pm.sample()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [μ, σ]\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 20 seconds.\n\n\n\n\n\n\n\n\n\n\n\nY ahora la novedad. El modeloo jerárquico.\nEste modelo tiene un hiper-prior para la media de \\(\\mu\\) (μ_mu) y otro para la desviación estándar de \\(\\mu\\) (μ_sd). Para \\(\\sigma\\) no usamos un hiper-prior, asumimos un valor común del parámetro para todos los grupos. Esto es una decisión de modelado. En este caso la justificación es mantener el ejemplo simple, pero en principio no sería problemático usar un hiper-prior también para \\(\\sigma\\).\n\nwith pm.Model(coords=coords) as cs_h:\n    # hyper_priors\n    μ_mu = pm.Normal('μ_mu', mu=0, sigma=2)\n    μ_sd = pm.HalfNormal('μ_sd', 2)\n\n    # priors\n    μ = pm.Normal('μ', mu=μ_mu, sigma=μ_sd, dims=\"aa\") \n    σ = pm.HalfNormal('σ', sigma=2, dims=\"aa\") \n\n    y = pm.Normal('y', mu=μ[idx], sigma=σ[idx], observed=diff) \n\n    idata_cs_h = pm.sample()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [μ_mu, μ_sd, μ, σ]\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 26 seconds.\n\n\n\n\n\n\n\n\n\n\n\nAntes de observar los resultados, comparemos gráficamente ambos modelos, para estar seguros que entendemos en que difieren. La siguiente figura muestra una representación gráfica de los modelos cs_nh (no-jerárquico) y cs_h (jerárquico). Se puede ver como el modelo jerárquico tiene un nivel más.\n\n\n\nAhora que tenemos más claras las diferencias a nivel del modelo, vamos a explorar las consecuencias de esas diferencias. Para ello vamos a comparar los resultados usando un forest plot. ArviZ nos ofrece la función plot_forest que permite pasar más de un modelo, esto es útil cuando queremos comparar los valores de parámetros equivalentes entre modelos como en el presente ejemplo. Por defecto, plot_forest grafica las cadenas de MCMC por separado, esto no es relevante en este caso por lo que vamos a combinarlas usando combined=True. Los invito a explorar, por su cuenta, el significado del resto de los argumentos que pasamos en la siguiente celda.\n\naxes = az.plot_forest([idata_cs_nh, idata_cs_h], model_names=['no_jerárquico', 'jerárquico'],\n                      var_names='μ', combined=True, r_hat=False, ess=False, figsize=(10, 7),\n                      colors='cycle')\ny_lims = axes[0].get_ylim()\naxes[0].vlines(idata_cs_h.posterior['μ_mu'].mean(), *y_lims, color=\"k\", ls=\":\");\n\n\n\n\n\n\n\n\nBien, tenemos un gráfico para 38 valores medios estimados, uno por aminoácido (19 en este conjunto de datos) y esto duplicado ya que tenemos dos modelos. También tenemos los intervalos de credibilidad del 94% y el rango intercuartil (el intervalo que contiene el 50% central de la distribución). La línea vertical es la media parcialmente agrupada, es decir la media según el modelo jerárquico. El valor es cercano a cero, esto es parte de lo que esperaríamos ver si los valores teóricos son buenos reproduciendo los valores experimentales.\nLa parte más relevante de este gráfico es que las estimaciones del modelo jerárquico son atraídas hacia la media parcialmente agrupada o, de forma equivalente, se contraen con respecto a las estimaciones no agrupadas. Este efecto es más notorio para los grupos más alejados de la media (como PRO), además la incertidumbre es igual o menor que la del modelo no jerárquico. Decimos que las estimaciones están parcialmente agrupadas porque tenemos una estimación para cada grupo, pero las estimaciones para cada grupo se informan mutuamente mediante el hiper prior. Por lo tanto, se obtiene una situación intermedia entre tener un solo grupo (la media global), todos los aminoácidos juntos, y tener 20 grupos separados, uno por aminoácido (el modelo no jerárquico).\n\n\n\n\n\n\nNota\n\n\n\nEn un modelo jerárquico, los grupos que comparten un hiperprior común comparten información a través de ese hiperprior. Esto da como resultado una contracción de las estimaciones, respecto del modelo desagrupado. Es decir, las estimaciones individuales se contraen hacia la media común. Al agrupar parcialemente las estimaciones, estamos modelando los grupos en algún punto medio entre grupos independientes unos de otros y un solo gran grupo.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Modelado Jerárquico</span>"
    ]
  },
  {
    "objectID": "03_Modelos_jerárquicos.html#es-deseable-tener-contracción",
    "href": "03_Modelos_jerárquicos.html#es-deseable-tener-contracción",
    "title": "3  Modelado Jerárquico",
    "section": "3.3 Es deseable tener contracción?",
    "text": "3.3 Es deseable tener contracción?\nUn modelo jerárquico ofrece estimaciones más conservadoras y más robustas. Por ejemplo, si un grupo tiene un tamaño de muestra pequeño, la estimación de ese grupo será más incierta que la de un grupo con un tamaño de muestra grande. En un modelo jerárquico, la información de los grupos con mayor tamaño de muestra se comparte con los grupos con menor tamaño de muestra, lo que resulta en una estimación más precisa para los grupos con menor tamaño de muestra. La cantidad exacta de contracción dependerá de varios factores (ver ejercicios), pero en general, la contracción es deseable ya que reduce la varianza de las estimaciones y reduce las posibilidades de sobreajuste.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Modelado Jerárquico</span>"
    ]
  },
  {
    "objectID": "03_Modelos_jerárquicos.html#intercambiabilidad",
    "href": "03_Modelos_jerárquicos.html#intercambiabilidad",
    "title": "3  Modelado Jerárquico",
    "section": "3.4 Intercambiabilidad",
    "text": "3.4 Intercambiabilidad\nUna secuencia, finita o infinita de variables aleatorias \\(X_1, X_2, X_3, \\dots X_j\\) es intercambiable si su distribución de probabilidad conjunta no se ve modificada por permutaciones de los indices \\((1, \\dots, J)\\).\nUn ejemplo típico de variables intercambiables es el siguiente:\nTenemos una bolsa con una bola blanca y una negra. La probabilidad de sacar cualquiera de ellas es de 0.5. Si \\(X_i = 1\\) indica que la iésima bola es blanca y muestreando sin reemplazo, tendremos que:\n\\[P(X_1=1, X_2=0) = 0.5\\] \\[P(X_1=0, X_2=1) = 0.5\\]\nEs decir la probabilidad de tomar primero la blanca y luego la negra es igual a tomar primero la blanca y luego la negra. Es decir \\(X_1\\) e \\(X_2\\) son intercambiables.\nAhora bien también es cierto que:\n\\[0 = P(X_2=1 \\mid X_1=1) \\not= P(X_2=1) = 0.5\\]\nEs decir la probabilidad marginal de que la segunda bola sea blanca no es la misma que la probabilidad (condicional) de que la segunda sea blanca dado que ya obtuvimos una blanca. Es decir \\(X_1\\) e \\(X_2\\) no son independientes.\n\nToda secuencia iid es también intercambiable, pero una secuencia intercambiable no es necesariamente iid. La condición de intercambialidad es más general (o menos estricta) que la de independencia.\n\nEste enunciado se puede demostrar de la siguiente forma:\nSea \\(x_i \\mathop{\\sim}\\limits^{iid} p(x)\\), tenemos que la probabilidad conjunta se calcula como el producto de las probabilidades marginales:\n\\[p(x_i, \\dots , x_n) = \\prod_i^n p(x_i)\\]\nDado que el producto es commutativo, tenemos que el resultado es invariante a permutaciones.\nOK, todo muy lindo, pero y que tiene que ver esto con modelos jerárquicos? Por ahora parece que nada, pero avancemos un poco más.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Modelado Jerárquico</span>"
    ]
  },
  {
    "objectID": "03_Modelos_jerárquicos.html#teorema-de-de-finetti",
    "href": "03_Modelos_jerárquicos.html#teorema-de-de-finetti",
    "title": "3  Modelado Jerárquico",
    "section": "3.5 Teorema de De Finetti",
    "text": "3.5 Teorema de De Finetti\nUna secuencia de variables aleatorias es intercambiable si y solo si para todo \\(n\\) podemos escribir:\n\\[p(X_1, X_2,  \\dots , X_n) = \\int \\prod_i^n p(X_i \\mid \\theta) \\; p(\\theta)\\]\nEs decir, que conjunto de variable aleatorias puede ser descrito por:\n\nun parámetro \\(\\theta\\)\nun likelihood \\(p(X \\mid \\theta)\\)\nun prior \\(p(\\theta)\\)\n\nEntonces podemos ver al teorema de De Finetti como una justificación de la estadística Bayesiana y como una garantía de que si tenemos una secuencia de observaciones/variables aleatorias intercambiables entoces podremos describirlas adecuadamente usando estadística Bayesiana. La trampa, porque siempre hay una trampa, es que el teorema no nos dice nada sobre como elegir ni el parámetro, ni el likelihood ni el prior. Existen algunas justificaciones teóricas para elegir estos elementos, pero no lo discutiremos en este curso, principalmente por su limitada utilidad práctica.\nSupongamos ahora que \\(\\theta\\) representa un conjunto de parámetros, \\(\\theta = (\\theta_1, \\theta_2,  \\dots , \\theta_n)\\) y que este conjunto de parámetros es intercambiable. Entonces podemos escribir:\n\\[p(\\theta_1, \\theta_2,  \\dots , \\theta_n) = \\int \\prod_i^n p(\\theta_i \\mid \\psi) \\; p(\\psi)\\]\nObteniendo un modelo jerárquico que podríamos reescribir como:\n\\[\\begin{align*}\nX_{ij} &\\sim p(X \\mid \\theta_i) \\\\\n\\theta_i &\\sim p(\\theta \\mid \\psi)  \\\\\n\\psi &\\sim p(\\psi)\n\\end{align*}\\]",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Modelado Jerárquico</span>"
    ]
  },
  {
    "objectID": "03_Modelos_jerárquicos.html#intercambiabilidad-e-inferencia",
    "href": "03_Modelos_jerárquicos.html#intercambiabilidad-e-inferencia",
    "title": "3  Modelado Jerárquico",
    "section": "3.6 Intercambiabilidad e inferencia",
    "text": "3.6 Intercambiabilidad e inferencia\nYo he seleccionado 10 valores de desplazamientos químicos \\(y_1, \\dots, y_{10}\\). Qué me pueden decir del valor \\(y_4\\)? Sin conocer algo de la química de aminoácidos es dificil arriesgar un rango razonable para \\(y_4\\), pero si asumen intercambialidad podrían decir \\(y_4\\) debe parecerse a los demás valores, ya que no hay razón para pensar que \\(y_4\\) sea especial, por ejemplo para decir algo como \\(y_4 &gt; y_3\\) necesitarían información adicional o supuestos adicionales, como asumir un orden dado. Es decir intercambialidad, implica cierto grado de ignorancia.\nBien, ahora supongamos que les muestro 9 valores, excepto \\(y_4\\), qué pueden decir de \\(y_4\\)?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(y_1\\)\n\\(y_2\\)\n\\(y_3\\)\n\\(y_5\\)\n\\(y_6\\)\n\\(y_7\\)\n\\(y_8\\)\n\\(y_9\\)\n\\(y_{10}\\)\n\n\n\n\n58.27\n56.18\n56.84\n54.64\n54.2\n57.51\n44.45\n61.46\n54.45\n\n\n\nPodrían decir que es posible que \\(y_4\\) esté comprendido en ese rango y si están dispuestos a asumir normalidad, entonces pueden decir algo más como que es probable que \\(y_4\\) tenga un valor de 54.9 (la media de los otros valores) y sería extraño que tenga una valor inferior a \\(\\approx 41\\) y superior a \\(\\approx 68\\) (\\(54.9 \\pm 3 \\text{ desvíos estándar}\\)). Esta estimación es válida incluso si reordenamos los valores de la tabla anterior. Estamos asumiendo que \\(y_4\\) es intercambiable, pero no independiente, ya que de alguna forma el valor de \\(y_4\\) está “informado” por los otros valores.\nAlguien podría objetar que este análisis no es válido, ya que existen distintos tipos de aminoácidos y en algunos casos los desplazamientos pueden ser muy diferentes para estos distintos tipos. En ese caso podemos responder de al menos 2 formas.\n\nSi solo tenemos los valores pero no los “rótulos” (es decir no sabemos a que aminoácido corresponde cada valor), entonces no tenemos otra opción que asumir intercambialidad.\nSi tenemos los rótulos, entonces podemos incorporar esa información y hacer un análisis jerárquico.\n\nAmbas opciones están justificadas teóricamente. La diferencia es la información disponible.\nLuego de estas discusión teórica y conceptual veamos algunos otros ejemplos prácticos de modelos jerárquicos.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Modelado Jerárquico</span>"
    ]
  },
  {
    "objectID": "03_Modelos_jerárquicos.html#renacuajos-multinivel",
    "href": "03_Modelos_jerárquicos.html#renacuajos-multinivel",
    "title": "3  Modelado Jerárquico",
    "section": "3.7 Renacuajos multinivel",
    "text": "3.7 Renacuajos multinivel\nEste ejemplo está tomado de statistical rethinking\n\nTenemos 48 tanques llenos de renacuajos\nQueremos modelar la probabilidad de supervivencia de los renacuajos\nLas condiciones como la temperatura, el pH, la luz, etc. varían ligeramente entre los tanques (pero no los estamos teniendo en cuenta explícitamente)\nPodemos pensar en cada tanque como un grupo\n\n\nd = pd.read_csv('datos/renacuajos.csv', sep=\",\")\ncoords = {\"tanks\": list(d.index)}\nd.head()\n\n\n\n\n\n\n\n\ndensity\npred\nsize\nsurv\npropsurv\n\n\n\n\n0\n10\nno\nbig\n9\n0.9\n\n\n1\n10\nno\nbig\n10\n1.0\n\n\n2\n10\nno\nbig\n7\n0.7\n\n\n3\n10\nno\nbig\n10\n1.0\n\n\n4\n10\nno\nsmall\n9\n0.9\n\n\n\n\n\n\n\n\nwith pm.Model(coords=coords) as modelo_renacuajos:\n    # Hiperpriors\n    μ = pm.Normal('μ', 0., 2.)\n    σ = pm.HalfNormal('σ', 2.)\n    # Prior\n    α_tanque = pm.Normal('α_tanque', μ, σ,  dims=\"tanks\")\n    p = pm.Deterministic('p', pm.math.sigmoid(α_tanque))  # transformación logística\n    #likelihood\n    surv = pm.Binomial('surv', n=d.density, p=p, observed=d.surv)\n    \n    idata_renacuajos = pm.sample(2000, tune=2000)\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [μ, σ, α_tanque]\nSampling 4 chains for 2_000 tune and 2_000 draw iterations (8_000 + 8_000 draws total) took 49 seconds.\n\n\n\n\n\n\n\n\n\n\n\n\npm.model_to_graphviz(modelo_renacuajos)\n\n\n\n\n\n\n\n\nEn la siguiente figura se muestran las proporciones empíricas de sobrevivientes en cada tanque de renacuajos (puntos azules) y las proporciones estimadas por el modelo (puntos turquesa). La línea discontinua indica la proporción promedio de sobrevivientes teniendo en cuenta todos los tanques. Las lineas verticales dividen los tanques de acuerdo a las diferentes densidades iniciales de renacuajos: tanques pequeños (10), tanques medianos (25) y tanques grandes (35). En cada tanque, la media a posteriori del modelo multinivel está más cerca de la línea punteada que la proporción empírica. Esto refleja la información compartida entre tanques y el efecto de contracción.\n\n_, ax = plt.subplots(1, 1, figsize=(12, 5))\n\npost_r = az.extract(idata_renacuajos)\n\nax.scatter(np.arange(0, 48), d.propsurv, color='C0')\nax.scatter(np.arange(0, 48), post_r['p'].mean(\"sample\"), color='C1')\nax.hlines(logistic(post_r['μ'].median(\"sample\")), -1, 49, linestyles='--')\n\nidx = d.density[d.density.diff() &gt; 0].index\nax.vlines(idx + 0.5, -.05, 1.05, lw=.5)\nfor i, t in zip(np.linspace(0, 48, 7)[1::2], ('pequeño', 'mediano', 'grande')):\n    ax.text(i, 0, t, horizontalalignment='center')\nax.set_xlabel('tanques')\nax.set_ylabel('proporción de survivencia')\nax.set_xlim(-1, 48)\nax.set_xticks([])\nax.set_ylim(-.05, 1.05)\nax.grid(False)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Modelado Jerárquico</span>"
    ]
  },
  {
    "objectID": "03_Modelos_jerárquicos.html#jerarquías-futboleras",
    "href": "03_Modelos_jerárquicos.html#jerarquías-futboleras",
    "title": "3  Modelado Jerárquico",
    "section": "3.8 Jerarquías futboleras",
    "text": "3.8 Jerarquías futboleras\nVarias estructuras de datos se prestan a descripciones jerárquicas que pueden abarcar múltiples niveles. Por ejemplo, jugadores profesionales de fútbol. Como en muchos otros deportes, los jugadores tienen diferentes posiciones dentro de la cancha. Es posible que nos interese estimar algunas métricas de habilidad para cada jugador, para las posiciones y para el grupo general de jugadores de fútbol profesional. Este tipo de estructura jerárquica también se puede encontrar en muchos otros dominios, como:\n\nInvestigación médica: Supongamos que estamos interesados en estimar la eficacia de diferentes fármacos para el tratamiento de una determinada enfermedad. Podemos categorizar a los pacientes según su información demográfica, la gravedad de la enfermedad y otros factores relevantes y construir un modelo jerárquico para estimar la probabilidad de curación o el éxito del tratamiento para cada subgrupo. Luego podemos usar los parámetros de la distribución de subgrupos para estimar la probabilidad general de curación o éxito del tratamiento para toda la población de pacientes.\nCiencias ambientales: Supongamos que estamos interesados en estimar el impacto de un determinado contaminante en un ecosistema particular. Podemos categorizar diferentes hábitats dentro del ecosistema (p. ej., ríos, lagos, bosques, humedales) y construir un modelo jerárquico para estimar la distribución de los niveles de contaminantes dentro de cada hábitat. Luego podemos usar los parámetros de la distribución del hábitat para estimar la distribución general de los niveles de contaminantes dentro del ecosistema.\nInvestigación de mercado: supongamos que estamos interesados en comprender el comportamiento de compra de los consumidores de un producto en particular en diferentes regiones. Podemos categorizar a los consumidores según su información demográfica (por ejemplo, edad, sexo, ingresos, educación) y construir un modelo jerárquico para estimar la distribución del comportamiento de compra para cada subgrupo. Luego podemos usar los parámetros de la distribución del subgrupo para estimar la distribución del comportamiento de compra para el grupo general de consumidores.\n\nVolviendo a nuestros jugadores de fútbol, hemos recopilado datos de la Premier League, Ligue 1, Bundesliga, Serie A y La Liga, en el transcurso de cuatro años (2017 a 2020). Supongamos que estamos interesados en la métrica de goles por tiro. Esto es lo que los estadísticos suelen llamar tasa de éxito, y podemos estimarlo con un modelo Binomial donde el parámetro \\(n\\) es el número de tiros y las observaciones \\(y\\) es el número de goles. Esto nos deja con un valor desconocido para \\(p\\), en ejemplos anteriores hemos estado llamando a este parámetro \\(\\theta\\) y hemos usado una distribución Beta para modelarlo. Haremos lo mismo ahora, pero jerárquicamente. \\(\\theta\\) representa la “tasa de éxito” de cada jugador y, por lo tanto, es un vector de tamaño n_jugadores. Usamos una distribución Beta para modelar \\(\\theta\\). Los hiperparámetros de la distribución Beta serán los vectores \\(\\mu_p\\) y \\(\\nu_p\\), que son vectores de tamaño 4, que representan las cuatro posiciones en nuestro conjunto de datos (defensor DF, centrocampista MF, delantero FW y arquero GK). Tendremos que indexar correctamente los vectores \\(\\mu_p\\) y \\(\\nu_p\\) para que coincidan con el número total de jugadores. Finalmente, tendremos dos parámetros globales, \\(\\mu\\) y \\(\\nu\\), que representan a los futbolistas profesionales.\nEl modelo PyMC se define en el siguiente bloque de código. El pm.Beta('mu', 1.7, 5.8) fue elegido con la ayuda de PreliZ como prior con el 90% de la masa entre 0 y 0.5. Este es un ejemplo de un prior poco informativo, ya que no hay duda de que una tasa de éxito de 0,5 es un valor alto. Las estadísticas deportivas están bien estudiadas y hay mucha información previa que podría usarse para definir priors más fuertes. Para este ejemplo, nos conformaremos con este prior. Una justificación similar se puede hacer para el prior pm.Gamma('nu', mu=125, sigma=50), que definimos como la distribución Gamma de máxima entropía con el 90% de la masa entre 50 y 200.\n\nfutbol = pd.read_csv(\"datos/futbol.csv\", dtype={'posición':'category'})\npos_idx = futbol.posición.cat.codes.values\npos_codes = futbol.posición.cat.categories\nn_pos = pos_codes.size\nn_jugadores = futbol.index.size\n\n\ncoords = {\"pos\": pos_codes}\nwith pm.Model(coords=coords) as modelo_futbol:\n    # Hiper-parámetros\n    μ = pm.Beta('μ', 1.7, 5.8) \n    ν = pm.Gamma('ν', mu=125, sigma=50)\n\n    \n    # Parámetros por posición\n    μ_p = pm.Beta('μ_p',\n                       mu=μ,\n                       nu=ν,\n                       dims = \"pos\")\n    \n    ν_p = pm.Gamma('ν_p', mu=125, sigma=50, dims=\"pos\")\n \n    # Parámetros por jugador\n    θ = pm.Beta('θ', \n                    mu=μ_p[pos_idx],\n                    nu=ν_p[pos_idx])\n    \n    _ = pm.Binomial('gs', n=futbol.tiros.values, p=θ, observed=futbol.goles.values)\n\n    idata_futbol = pm.sample(4000, target_accept=0.98)\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [μ, ν, μ_p, ν_p, θ]\nSampling 4 chains for 1_000 tune and 4_000 draw iterations (4_000 + 16_000 draws total) took 358 seconds.\nThe rhat statistic is larger than 1.01 for some parameters. This indicates problems during sampling. See https://arxiv.org/abs/1903.08008 for details\nThe effective sample size per chain is smaller than 100 for some parameters.  A higher number is needed for reliable rhat and ess computation. See https://arxiv.org/abs/1903.08008 for details\n\n\n\n\n\n\n\n\n\n\n\n\npm.model_to_graphviz(modelo_futbol)\n\n\n\n\n\n\n\n\nEn el panel superior de la siguiente figura tenemos la distribución a posteriori del parámetro global \\(\\mu\\). La distribución a posteriori es cercana a 0.1. Lo que significa que, en general, para un jugador de fútbol profesional, la probabilidad de hacer un gol es en promedio del 10%. Este es un valor razonable, ya que hacer goles no es una tarea fácil y no estamos discriminando posiciones, es decir, estamos considerando jugadores cuyo papel principal no es el de hacer goles. En el panel central, tenemos el valor estimado de \\(mu_p\\) para la posición de defensa, como es de esperar, es más alto que el parámetro global \\(\\mu\\). En el panel inferior, tenemos el valor estimado de \\(\\theta\\) para Lionel Messi, con un valor de 0.17, que es más alto que el parámetro global \\(\\mu\\) y el valor de la posición delantera \\(\\mu_p\\). Esto también es de esperarse, ya que Lionel Messi es el mejor jugador de fútbol del mundo, y su rol principal es hacer goles.\n\n_, ax = plt.subplots(3, 1, figsize=(12, 7), sharex=True)\naz.plot_posterior(idata_futbol, var_names='μ', ax=ax[0])\nax[0].set_title(r\"Global mean\")\naz.plot_posterior(idata_futbol.posterior.sel(pos=\"FW\"), var_names='μ_p', ax=ax[1])\nax[1].set_title(r\"Forward position mean\")\naz.plot_posterior(idata_futbol.posterior.sel(θ_dim_0=1457), var_names='θ', ax=ax[2])\nax[2].set_title(r\"Messi mean\");\n\n\n\n\n\n\n\n\nLa siguiente figura muestra un forest plot para la distribución a posteriori del parámetro \\(\\mu_p\\). La distribución a posteriori para delanteros se centra en torno a 0.13, como ya vimos, y es la más alta de las cuatro. Esto tiene sentido ya que el papel de los jugadores en una posición delantera es hacer goles y asistencias. El valor más bajo de \\(\\mu_p\\) es para la posición de arquero. Esto esperable, ya que la función principal es evitar que el equipo contrario haga goles. El aspecto interesante es que la incertidumbre es muy alta, esto se debe a que tenemos muy pocos arqueros haciendo goles en nuestro conjunto de datos, 3 para ser precisos. Las distribuciones a posteriori para las posiciones de defensa y mediocampo están en el medio, siendo ligeramente más altas para los mediocampistas. Podemos explicar esto porque el papel principal de un mediocampista es defender y atacar, y por lo tanto la probabilidad de marcar un gol es mayor que la de un defensor pero menor que la de un delantero.\n\naz.plot_forest(idata_futbol, var_names=['μ_p'], combined=True, figsize=(12, 3));",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Modelado Jerárquico</span>"
    ]
  },
  {
    "objectID": "03_Modelos_jerárquicos.html#resumen",
    "href": "03_Modelos_jerárquicos.html#resumen",
    "title": "3  Modelado Jerárquico",
    "section": "3.9 Resumen",
    "text": "3.9 Resumen\nEn este capítulo hemos descrito uno de los conceptos más importantes de este curso: los modelos jerárquicos. Podemos construir modelos jerárquicos cada vez que podamos identificar subgrupos en nuestros datos. En tales casos, en lugar de tratar los subgrupos como entidades separadas o ignorar los subgrupos y tratarlos como un solo gran-grupo, podemos construir un modelo para agrupar-parcialmente la información entre los grupos.\nEl principal efecto de este agrupamiento-parcial es que las estimaciones de cada subgrupo estarán sesgadas por las estimaciones del resto de los subgrupos. Este efecto se conoce como contracción y, en general, es un truco muy útil que ayuda a mejorar las inferencias haciéndolas más conservadoras (ya que cada subgrupo informa a los demás acercando el resto de las estimaciones hacia él) y más informativas, obtenemos estimaciones a nivel de subgrupo y el nivel del grupo.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Modelado Jerárquico</span>"
    ]
  },
  {
    "objectID": "03_Modelos_jerárquicos.html#para-seguir-leyendo",
    "href": "03_Modelos_jerárquicos.html#para-seguir-leyendo",
    "title": "3  Modelado Jerárquico",
    "section": "3.10 Para seguir leyendo",
    "text": "3.10 Para seguir leyendo\n\nCapítulo 5 de Bayesian Data Analysis de Gelman et al. BDA3\nBernardo, J. M. (1996). The concept of exchangeability and its applications. Far East J. Mathematical Sciences 4, 111-121. Exchangeability",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Modelado Jerárquico</span>"
    ]
  },
  {
    "objectID": "03_Modelos_jerárquicos.html#ejercicios",
    "href": "03_Modelos_jerárquicos.html#ejercicios",
    "title": "3  Modelado Jerárquico",
    "section": "3.11 Ejercicios",
    "text": "3.11 Ejercicios\n\n(Borrador). Escribir el teorema de bayes para un modelo jerárquico. La idea es que escriban, likelihood, prior e hyperprior.\n(Borrador). Escribir enunciado tuberías jerarquicas (ver ejemplo en repo privado).\n(Borrador, este ejericio asume que ya vimos el ejemplo de las propinas, si no es así podríamos introducir el ejemplo y pedir que ajusten el modelo jerarquico y no jerarquico). Creá una versión jerárquica para el ejemplo de las propinas agrupando parcialmente los días de la semana.\n(Borrador), Cuando se utilizan distribuciones a priori débilmente informativos, las predicciones medias a posteriori de un modelo normal-normal jerárquico son (aproximadamente) promedios pesado de la siguiente forma:\n\n\\[\n\\frac{\\sigma^2_y}{\\sigma^2_y + n_j \\sigma^2_\\mu} \\overline{y}_{\\text{global}} + \\frac{n_j\\sigma^2_\\mu}{\\sigma^2_y + n_j \\sigma^2_\\mu} \\overline{y}_j.\n\\]\ndonde \\(\\overline{y}_{\\text{global}}\\) es la media de todas las observaciones, \\(\\overline{y}_j\\) es la media de las observaciones en el grupo \\(j\\), \\(n_j\\) es el número de observaciones en el grupo \\(j\\), \\(\\sigma^2_y\\) es la varianza de las observaciones y \\(\\sigma^2_\\mu\\) es la varianza de las medias de los grupos. Indique en que condiciones las prediccions a nivel individual se contraeran más hacia la predicción global.\n\nAplicá al menos uno de los modelos visto en este capítulo a datos propios o de tu interés.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Modelado Jerárquico</span>"
    ]
  },
  {
    "objectID": "04_Flujo_de_trabajo_bayesiano.html",
    "href": "04_Flujo_de_trabajo_bayesiano.html",
    "title": "4  Flujo de trabajo Bayesiano",
    "section": "",
    "text": "4.1 De datos y suposiciones a insights\nUsamos datos para comprender el mundo que nos rodea, lo que podría consistir en revelar el origen del universo, predecir cuándo debemos plantar y cuándo cosechar, o cómo hacer sugerencias de productos útiles para mantener a los clientes interesados y comprando nuestros productos. Sin embargo, el mundo suele ser un lugar complejo y, por lo tanto, los datos deben procesarse e interpretarse para que sean útiles. Una forma de interpretar los datos es construir modelos. Los modelos son útiles porque nos permiten incorporar suposiciones y evaluarlas.\nLos modelos funcionan como ficciones científicas; mapas que nos ayudan a navegar relaciones complejas. Por lo general (aunque no siempre), los modelos no son el objeto de interés principal, sino que son andamios que proporcionan un marco estructurado para comprender e interpretar datos.\nAl discutir estadística Bayesiana se suele hacer en torno a modelos de probabilidad. Tomamos algunos priors, algunos likelihoods, que luego mezclamos con datos siguiendo como receta el Teorema de Bayes, y Voila!, somos bayesianos!\nEsta descripción no es incorrecta, simplemente no refleja muchos de los aspectos prácticos de la estadística Bayesiano (o del modelado en general). Lo que sucede es que muchos de esos aspectos prácticos no han sido completamente formalizados (como sí lo ha sido el proceso de inferencia). Incluso para varios de esos aspectos, no tenemos aún buenas herramientas o incluso no tenemos aún buenos marcos conceptuales.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Flujo de trabajo Bayesiano</span>"
    ]
  },
  {
    "objectID": "04_Flujo_de_trabajo_bayesiano.html#el-flujo-de-trabajo-bayesiano",
    "href": "04_Flujo_de_trabajo_bayesiano.html#el-flujo-de-trabajo-bayesiano",
    "title": "4  Flujo de trabajo Bayesiano",
    "section": "4.2 El flujo de trabajo bayesiano",
    "text": "4.2 El flujo de trabajo bayesiano\nLa siguiente figura muestra un esquema de un flujo de trabajo Bayesiano. Podemos ver que hay muchos pasos. Necesitamos todos estos pasos porque los modelos son sólo elucubraciones de nuestra mente sin garantía de ayudarnos a comprender los datos. Primero debemos ser capaces de construir un modelo y luego comprobar su utilidad y, si no es lo suficientemente útil, seguir trabajando o, a veces, dejar de intentarlo. Es posible que también hayas notado el paso “evaluar muestras”. Necesitamos esto porque, normalmente, utilizamos métodos computacionales para resolver modelos Bayesianos, los cuales solos proveen garantías asintóticas.\n\n\n\nPrincipales elementos de un flujo de trabajo Bayesiano.\n\n\nDiseñar un modelo adecuado para una tarea de análisis de datos determinada generalmente requiere una combinación de experiencia estadística, conocimiento del dominio, comprensión de las herramientas computacionales y usualmente mucha perseverancia. Rara vez obtenemos el modelo queremos en un solo paso. Es similar a escribir un programa de computadora. Difícilmente no cometamos errores. Incluso los programas muy cortos requieren algo de prueba y error. Por lo general, es necesario probar, depurar y perfeccionar y, a veces, cambiar de enfoque . Lo mismo ocurre con los modelos estadísticos; después de todo, podemos ver los modelos estadísticos como software generador de datos.\nEn las siguientes secciones vamos a discutir algunos de los pasos del flujo de trabajo Bayesiano. Y al final vamos a describir un resumen de un trabajo Bayesiano. La mejor forma de lograr familiaridad con el flujo de trabajo Bayesiano y los sub-flujos es resolviendo problemas.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Flujo de trabajo Bayesiano</span>"
    ]
  },
  {
    "objectID": "04_Flujo_de_trabajo_bayesiano.html#pruebas-predictivas-a-priori",
    "href": "04_Flujo_de_trabajo_bayesiano.html#pruebas-predictivas-a-priori",
    "title": "4  Flujo de trabajo Bayesiano",
    "section": "4.3 Pruebas predictivas a priori",
    "text": "4.3 Pruebas predictivas a priori\nLa distribución predictiva a priori se define como:\n\\[\np(y^\\ast) =  \\int_{\\Theta} p(y^\\ast \\mid \\theta) \\; p(\\theta) \\; d\\theta\n\\]\ndonde \\(y^\\ast\\) representa datos no observados pero potencialmente observables, al menos de acuerdo a nuestro modelo. Los datos generados son predictivos ya que son los datos que el modelo esperara ver, es decir son datos no observados pero potencialmente observables.\nLo que estamos haciendo es marginalizando el likelihood al integrar sobre todos los valores posibles del prior. Por lo tanto, desde la perspectiva de nuestro modelo, estamos describiendo la distribución marginal de los datos, es decir independientemente de los parámetros. En otros palabras estamos generando predicciones del modelo “antes” de ver los datos. Esta distribución representa lo que el modelo “cree” sobre la cantidad modelada.\nObtener esta distribución de forma analítica no siempre es sencillo, pero si lo es computacionalmente, siempre y cuando podamos escribir un modelo en un PPL. Podemos generar muestras de esta distribución según el siguiente procedimiento:\n\nElegimos un valor de \\(\\theta\\) de acuerdo a la distribución a priori \\(p(\\theta \\mid y)\\)\nFijamos \\(\\theta\\) en la distribución que usamos como likelihood \\(p(y^\\ast \\mid \\theta)\\) y generamos una muestra aleatoria\nRepetimos desde 1, tantas veces como muestras necesitemos\n\nUno de los usos prácticos de esta distribución es evaluar el modelo. A grandes rasgos esto se puede realizar generando datos a partir de la distribución predictiva a priori y comparándolos con nuestro conocimiento de domino. Es común que las comparaciones sean visuales y semi-cuantitativas, es decir buscamos acuerdos razonables. Por ejemplo podemos hacernos preguntas como ¿La mayor parte de la distribución simulada está en un rango razonable? ¿Existen valores extremos? Es recomendable NO comparar con los datos observados, en cambio usar valores de referencia. Los valores de referencia son datos empíricos u observaciones históricas, normalmente serán valores mínimos, máximos o esperados.\n\n4.3.1 Predadores y presas\nEstamos interesados en modelar la relación entre las masas de organismos que son presas y organismos que son predadores, como las masas varían en órdenes de magnitud desde una célula de 1e-14 gramos a una ballena azul de 1.5e8 gramos, es conveniente trabajar en una escala logarítmica. Entonces un modelo podría ser\n\\[\\begin{align}\n    \\mu =& Normal(\\cdots, \\cdots) \\\\\n    \\sigma =& HalfNormal(\\cdots) \\\\\n    log(masas) =& Normal(\\mu, \\sigma)\n\\end{align}\\]\nPara definir los valores del prior, podríamos definir el modelo con algunos priors y ver que implican estos priors en la escala de los datos. Para muestrear de la predictiva a priori usamos pm.sample_prior_predictive() en vez de sample y necesitamos definir observaciones “dummy”. Esto es necesario para indicar cual es el likelihood y para controlar el tamaño de cada distribución predicha.\n\npp_mass = pd.read_csv(\"datos/pp_mass.csv\")\npp_mass[\"predator_log\"] = np.log(pp_mass[\"predator\"])\npp_mass[\"prey_log\"] = np.log(pp_mass[\"prey\"])\n\n# valores de referencia en escala log\nrefs = {\"Planeta Tierra\":np.log(5.97e+27),\n        \"Ballena Azul\":np.log(1.5e8), \n        \"Célula más pequeña\":np.log(1e-14)}\n\n\nwith pm.Model() as model:\n    α = pm.Normal(\"α\", 0, 100)\n    β = pm.Normal(\"β\", 0, 100)\n    σ = pm.HalfNormal(\"σ\", 5)\n    presa = pm.Normal(\"presa\", α + β * pp_mass[\"prey_log\"], σ, observed=pp_mass[\"predator_log\"])\n    idata = pm.sample_prior_predictive(samples=100)\n\nSampling: [presa, α, β, σ]\n\n\nPodemos ver que el idata no tiene grupo posterior, pero si tiene prior y prior_predictive\n\nidata\n\n\n            \n              \n                arviz.InferenceData\n              \n              \n              \n            \n                  \n                  prior\n                  \n                  \n                      \n                          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (chain: 1, draw: 100)\nCoordinates:\n  * chain    (chain) int64 0\n  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 9 ... 90 91 92 93 94 95 96 97 98 99\nData variables:\n    α        (chain, draw) float64 -123.2 21.44 -225.4 ... -53.03 -168.3 30.35\n    β        (chain, draw) float64 46.55 103.0 19.07 ... -156.6 73.03 -255.0\n    σ        (chain, draw) float64 7.648 12.21 0.7211 ... 0.1937 3.182 6.897\nAttributes:\n    created_at:                 2024-05-29T16:33:48.453734+00:00\n    arviz_version:              0.19.0.dev0\n    inference_library:          pymc\n    inference_library_version:  5.13.1+16.g0ad689c6axarray.DatasetDimensions:chain: 1draw: 100Coordinates: (2)chain(chain)int640array([0])draw(draw)int640 1 2 3 4 5 6 ... 94 95 96 97 98 99array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\n       72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,\n       90, 91, 92, 93, 94, 95, 96, 97, 98, 99])Data variables: (3)α(chain, draw)float64-123.2 21.44 ... -168.3 30.35array([[-123.15654512,   21.44089854, -225.39225936,  -55.18379781,\n         -54.91282611, -146.97261748,  -70.36829401,   18.72229119,\n          -5.07746909,  108.92761235,    1.51476244,   12.02327497,\n        -133.44702941,  113.0618795 ,  -61.07264711, -100.52234018,\n         -80.4726031 , -249.92378553,   43.42324316,  265.70252081,\n         144.32785031,  -66.93841575,  -53.83466882,   25.23298511,\n         -66.20760098,  192.93078873,  -77.28336704, -150.37464651,\n          -1.26643435, -201.96092972,   17.35253409,   14.58719489,\n         -67.44383708,  149.64992328,   60.67564193,   80.51036313,\n          97.38665986,  -60.53454806,   82.97465288,   79.73798601,\n         -10.50700563,  -21.00698949,  178.93955055,   54.59926352,\n          81.96886937,  190.45066278, -183.78745531,   82.42607318,\n        -112.04094134,  174.05726305,   43.10966837,   99.54443371,\n          39.45311743,   75.81610786,    7.52944959,   91.7387799 ,\n         -39.44332897,   94.0153816 ,   33.69478959,  128.70283735,\n          25.80941454,  107.04114027,  -58.32779702, -101.80697951,\n         -57.57390012,  -18.56288296,  -19.37981065, -173.48614567,\n        -144.64015412,  118.26740827,  -35.46026637,  -41.77276805,\n          -8.52504933,  -72.31228954,  -68.32508255,  100.06681632,\n        -109.72630481,  325.76276474,  -29.6967429 ,   76.55093835,\n         -54.80867334, -144.5876842 ,  -36.4334084 ,   98.601535  ,\n         100.88711611,   30.27950558,   80.28777033,   29.8959835 ,\n          16.0457536 ,   28.04525057,  -38.76725937,   -0.81232118,\n        -161.17817518,  102.04700159, -148.82587243,   52.70887482,\n          13.53586924,  -53.02596827, -168.32670368,   30.34812519]])β(chain, draw)float6446.55 103.0 19.07 ... 73.03 -255.0array([[  46.54577716,  103.00952237,   19.06538346,   58.6669498 ,\n         -70.32841262,   43.19036973,   -2.96548749,   64.95787827,\n          41.72853288,   64.3310516 ,  -31.39580186,   57.33650301,\n          88.43987657,   -6.00563173,   19.93496761,   52.91659619,\n        -157.34246745,   31.45906773,  147.00800232, -122.43521241,\n         145.70157185,   25.81050981,  103.7643737 ,   16.91108382,\n          65.17110025,   44.19414489,  138.11537569,  225.11276628,\n        -167.49246185,  -47.36823873,  285.27211423,  -54.84147757,\n        -121.72803213,   63.61900554,   77.37109032,    2.16963199,\n         -21.31171355,  170.20497085,   16.95631279,   75.7637642 ,\n        -110.58944543,  -68.75314299,  -59.50878542,   85.80580009,\n          -4.33060171,   42.65848457,   29.51427526,   36.26240843,\n          10.95564874,  -23.18949293,  102.90032554,  -64.55775387,\n          24.9309488 ,  -65.91802562, -160.96934413,  -36.57395047,\n         -57.98334997,   39.02562912,  120.51455229, -122.53789059,\n          96.21875873,  163.07636658,   92.6278664 ,  -28.78108552,\n          62.52731207,   69.75434302,  -65.66080059,   45.88407943,\n         -54.12723433,  -11.48614187,  -79.07725876,  -26.66465991,\n          87.69662251, -178.56973711,   -7.61753971,   56.61112941,\n          -7.41552862, -120.56891824,  218.12951459, -104.78330417,\n         194.06584695, -119.95704536,  179.57871506,   -2.39112613,\n        -221.01000781,   61.52644325,  -86.46341505,  -27.66120922,\n         166.98333876,    6.94043997,  -97.14134075,  -30.94343977,\n         -44.3703914 ,   15.07962071,   -4.33520056, -118.07660514,\n         -13.46177777, -156.62879128,   73.02748533, -255.02948303]])σ(chain, draw)float647.648 12.21 0.7211 ... 3.182 6.897array([[ 7.6482893 , 12.21255144,  0.72111847,  7.83634032,  9.73980526,\n         5.81728725,  7.168321  , 10.98142961,  2.65554341,  1.90516887,\n         8.12291864,  0.52161356,  4.73880116,  6.4856232 ,  1.47361891,\n         0.25360066,  2.75615288,  4.42266368,  0.85511351,  2.35284602,\n         5.03795635,  7.2930565 ,  8.56813918,  4.05667194,  2.03816454,\n         8.70738791,  2.57010589,  4.45611256,  8.66372128,  2.88649958,\n         5.1645769 ,  8.70913914,  2.39337102,  0.48210902,  1.92870335,\n         1.37705476,  1.96421991,  4.56115163,  2.51608891,  1.63421971,\n         2.37054139,  8.79677888,  4.4234058 ,  3.62126027,  2.94736306,\n         4.18750886,  1.76676318,  1.28122265,  7.63483926,  3.82400824,\n         1.80196265,  9.3136449 ,  5.30271365,  8.0367355 ,  2.20809841,\n        11.20496308,  4.84784534,  1.57979769,  5.79565937,  1.34429007,\n         2.06264483,  4.34549597,  7.67840749,  1.54501748,  5.90292849,\n         1.96609794,  7.84376649,  2.24373778,  5.62569029,  5.7931091 ,\n         9.35388206,  3.05381312,  6.73585966,  2.36409005,  0.8613097 ,\n         3.09645147,  1.54571594,  6.69770508,  4.05787763,  6.87814737,\n         4.56068007,  0.85990879,  6.63762207,  6.31734068,  4.99601865,\n         4.54481182,  3.03410246,  6.25893615,  0.45956313,  1.80887868,\n         0.77297443,  1.04552915,  2.2652946 ,  0.77884824,  4.89360674,\n         4.58807034,  0.66924474,  0.19365903,  3.1823294 ,  6.89671286]])Indexes: (2)chainPandasIndexPandasIndex(Index([0], dtype='int64', name='chain'))drawPandasIndexPandasIndex(Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\n       72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,\n       90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype='int64', name='draw'))Attributes: (4)created_at :2024-05-29T16:33:48.453734+00:00arviz_version :0.19.0.dev0inference_library :pymcinference_library_version :5.13.1+16.g0ad689c6a\n                      \n                  \n            \n            \n            \n                  \n                  prior_predictive\n                  \n                  \n                      \n                          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (chain: 1, draw: 100, presa_dim_0: 13085)\nCoordinates:\n  * chain        (chain) int64 0\n  * draw         (draw) int64 0 1 2 3 4 5 6 7 8 9 ... 91 92 93 94 95 96 97 98 99\n  * presa_dim_0  (presa_dim_0) int64 0 1 2 3 4 ... 13080 13081 13082 13083 13084\nData variables:\n    presa        (chain, draw, presa_dim_0) float64 -554.6 -13.9 ... -757.0\nAttributes:\n    created_at:                 2024-05-29T16:33:48.455627+00:00\n    arviz_version:              0.19.0.dev0\n    inference_library:          pymc\n    inference_library_version:  5.13.1+16.g0ad689c6axarray.DatasetDimensions:chain: 1draw: 100presa_dim_0: 13085Coordinates: (3)chain(chain)int640array([0])draw(draw)int640 1 2 3 4 5 6 ... 94 95 96 97 98 99array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\n       72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,\n       90, 91, 92, 93, 94, 95, 96, 97, 98, 99])presa_dim_0(presa_dim_0)int640 1 2 3 ... 13081 13082 13083 13084array([    0,     1,     2, ..., 13082, 13083, 13084])Data variables: (1)presa(chain, draw, presa_dim_0)float64-554.6 -13.9 ... -899.8 -757.0array([[[-5.54630702e+02, -1.38978784e+01, -5.52719702e+02, ...,\n         -2.51143249e+01,  4.92035931e+01,  1.06103678e+01],\n        [-8.97074397e+02,  2.43654358e+02, -9.11364387e+02, ...,\n          2.22040396e+02,  4.04188048e+02,  3.45346612e+02],\n        [-4.02040729e+02, -1.80677233e+02, -4.01619739e+02, ...,\n         -1.89308831e+02, -1.54891978e+02, -1.68020701e+02],\n        ...,\n        [ 1.38983308e+03, -4.13374027e+02,  1.38955219e+03, ...,\n         -3.57948298e+02, -6.24060705e+02, -5.34265566e+02],\n        [-8.43626026e+02, -2.34210786e+00, -8.35684170e+02, ...,\n         -2.75020553e+01,  9.11354616e+01,  5.63484290e+01],\n        [ 2.38366480e+03, -5.71478058e+02,  2.37672188e+03, ...,\n         -4.72643569e+02, -8.99840308e+02, -7.57007844e+02]]])Indexes: (3)chainPandasIndexPandasIndex(Index([0], dtype='int64', name='chain'))drawPandasIndexPandasIndex(Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n       54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\n       72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,\n       90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype='int64', name='draw'))presa_dim_0PandasIndexPandasIndex(Index([    0,     1,     2,     3,     4,     5,     6,     7,     8,     9,\n       ...\n       13075, 13076, 13077, 13078, 13079, 13080, 13081, 13082, 13083, 13084],\n      dtype='int64', name='presa_dim_0', length=13085))Attributes: (4)created_at :2024-05-29T16:33:48.455627+00:00arviz_version :0.19.0.dev0inference_library :pymcinference_library_version :5.13.1+16.g0ad689c6a\n                      \n                  \n            \n            \n            \n                  \n                  observed_data\n                  \n                  \n                      \n                          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:      (presa_dim_0: 13085)\nCoordinates:\n  * presa_dim_0  (presa_dim_0) int64 0 1 2 3 4 ... 13080 13081 13082 13083 13084\nData variables:\n    presa        (presa_dim_0) float64 -18.42 2.303 -9.21 ... 5.369 6.544 6.044\nAttributes:\n    created_at:                 2024-05-29T16:33:48.456463+00:00\n    arviz_version:              0.19.0.dev0\n    inference_library:          pymc\n    inference_library_version:  5.13.1+16.g0ad689c6axarray.DatasetDimensions:presa_dim_0: 13085Coordinates: (1)presa_dim_0(presa_dim_0)int640 1 2 3 ... 13081 13082 13083 13084array([    0,     1,     2, ..., 13082, 13083, 13084])Data variables: (1)presa(presa_dim_0)float64-18.42 2.303 -9.21 ... 6.544 6.044array([-18.42068074,   2.30258509,  -9.21034037, ...,   5.36933899,\n         6.54377083,   6.04402043])Indexes: (1)presa_dim_0PandasIndexPandasIndex(Index([    0,     1,     2,     3,     4,     5,     6,     7,     8,     9,\n       ...\n       13075, 13076, 13077, 13078, 13079, 13080, 13081, 13082, 13083, 13084],\n      dtype='int64', name='presa_dim_0', length=13085))Attributes: (4)created_at :2024-05-29T16:33:48.456463+00:00arviz_version :0.19.0.dev0inference_library :pymcinference_library_version :5.13.1+16.g0ad689c6a\n                      \n                  \n            \n            \n              \n            \n            \n\n\nNuestro modelo tiene priors tan vagos que todos los valores que ni siquiera podemos distinguir nuestro valores de referencia.\n\nax = az.plot_ppc(idata, group=\"prior\", kind=\"cumulative\", mean=False, legend=False)\n\nfor key, val in refs.items():\n    ax.axvline(val, ls=\"--\", color=\"0.5\")\n    ax.text(val-7, 0.5-(len(key)/100), key, rotation=90)\n\n\n\n\n\n\n\n\n\nwith pm.Model() as model:\n    α = pm.Normal(\"α\", 0, 1)\n    β = pm.Normal(\"β\", 0, 1)\n    σ = pm.HalfNormal(\"σ\", 5)\n    presa = pm.Normal(\"presa\", α + β * pp_mass[\"prey_log\"], σ, observed=pp_mass[\"predator_log\"])\n    idata = pm.sample_prior_predictive(samples=100)\n\nSampling: [presa, α, β, σ]\n\n\nCon estos nuevos priors todavía tenemos algunos valores sin sentido, pero al menos la mayor parte de la masa de nuestras predicciones está dentro de rangos razonables.\n\nax = az.plot_ppc(idata, group=\"prior\", kind=\"cumulative\", mean=False, legend=False)\n\nfor key, val in refs.items():\n    ax.axvline(val, ls=\"--\", color=\"0.5\")\n    ax.text(val-7, 0.5-(len(key)/100), key, rotation=90)\n\n\n\n\n\n\n\n\nPreliZ nos permite hacer algo similar pero de forma interactiva\n\ndef pp_model(α_μ=0, α_σ=100, β_μ=0, β_σ=100, σ_σ=5):\n    α = pz.Normal(α_μ, α_σ).rvs()\n    β = pz.Normal(β_μ, β_σ).rvs()\n    σ = pz.HalfNormal(σ_σ).rvs()\n    prey = pz.Normal(α + β * pp_mass.predator_log, σ).rvs()\n    return prey\n\nrefs = {\"Earth\":np.log(5.97e+27), \"Blue whale\":np.log(1.5e8), \"Smallest cell\":np.log(1e-14)}\npz.predictive_explorer(pp_model, references=refs)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Flujo de trabajo Bayesiano</span>"
    ]
  },
  {
    "objectID": "04_Flujo_de_trabajo_bayesiano.html#pruebas-predictivas-a-posteriori",
    "href": "04_Flujo_de_trabajo_bayesiano.html#pruebas-predictivas-a-posteriori",
    "title": "4  Flujo de trabajo Bayesiano",
    "section": "4.4 Pruebas predictivas a posteriori",
    "text": "4.4 Pruebas predictivas a posteriori\nSe define como\n\\[\np(\\tilde{y}  \\mid  y) = \\int p(\\tilde{y} \\mid \\theta) p(\\theta \\mid y) d\\theta\n\\]\ndonde \\(\\tilde{y}\\) representa los datos generados por un modelo una vez obtenido el a posteriori. Es decir, las predicciones del modelo. Es similar a la distribución predictiva a priori, pero esta vez integramos sobre los valores a posteriori de \\(\\theta\\)\nComputacionalmente podemos generar muestras de esta distribución según el siguiente procedimiento:\n\nElegimos un valor de \\(\\theta\\) de acuerdo a la distribución a posteriori \\(p(\\theta \\mid y)\\)\nFijamos \\(\\theta\\) en la distribución que usamos como likelihood \\(p(\\tilde{y} \\mid \\theta)\\) y generamos una muestra aleatoria\nRepetimos desde 1, tantas veces como muestras necesitemos\n\nLas pruebas predictivas a posteriori son usadas de forma muy extendida para evaluar un modelo. En este caso SI es común compara contra los datos observados. Al comparar con los datos que se usaran para ajustar el modelo este tipo de pruebas son una forma de evaluación de la consistencia interna de un modelo. Es decir, de mínima esperamos que un modelo sea capaz de reproducir los datos usados para ajustarlo.\n\naccidentes = pd.Series([4, 5, 4, 0, 1, 4, 3, 4, 0, 6, 3, 3, 4, 0, 2, 6,\n                       3, 3, 5, 4, 5, 3, 1, 4, 4, 1, 5, 5, 3, 4, 2, 5,\n                       2, 2, 3, 4, 2, 1, 3, 2, 2, 1, 1, 1, 1, 3, 0, 0,\n                       1, 0, 1, 1, 0, 0, 3, 1, 0, 3, 2, 2, 0, 1, 1, 1,\n                       0, 1, 0, 1, 0, 0, 0, 2, 1, 0, 0, 0, 1, 1, 0, 2,\n                       3, 3, 1, 1, 2, 1, 1, 1, 1, 2, 4, 2, 0, 0, 1, 4,\n                       0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1])\naños = np.arange(1851, 1962)\n\n\nwith pm.Model() as modelo_cat:\n    pc = pm.DiscreteUniform(\"pc\", lower=años.min(), upper=años.max())\n\n    t_0 = pm.Exponential(\"t_0\", 1)\n    t_1 = pm.Exponential(\"t_1\", 1)\n\n    tasa = pm.Deterministic(\"tasa\", pm.math.switch(pc &gt;= años, t_0, t_1))\n\n    acc = pm.Poisson(\"acc\", tasa, observed=accidentes)\n    idata_cat = pm.sample(1000, random_seed=1791, progressbar=False)\n    idata_cat.extend(pm.sample_posterior_predictive(idata_cat, progressbar=False))\n\nMultiprocess sampling (4 chains in 4 jobs)\nCompoundStep\n&gt;Metropolis: [pc]\n&gt;NUTS: [t_0, t_1]\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 1 seconds.\nThe rhat statistic is larger than 1.01 for some parameters. This indicates problems during sampling. See https://arxiv.org/abs/1903.08008 for details\nSampling: [acc]\n\n\n\n\n\n\n\n\n\nax = az.plot_ppc(idata_cat, figsize=(10, 3), num_pp_samples=200)\nax.set_xlabel(\"acc\");",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Flujo de trabajo Bayesiano</span>"
    ]
  },
  {
    "objectID": "04_Flujo_de_trabajo_bayesiano.html#valores-p-bayesianos",
    "href": "04_Flujo_de_trabajo_bayesiano.html#valores-p-bayesianos",
    "title": "4  Flujo de trabajo Bayesiano",
    "section": "4.5 Valores p Bayesianos",
    "text": "4.5 Valores p Bayesianos\nUn valor-p Bayesiano se define como:\n\\[\n\\text{valor-p Bayesiano} \\triangleq p(T_{\\text{sim}} \\le T_{\\text{obs}} \\mid \\tilde y)\n\\]\nDonde \\(T\\) es un estadístico sumário como la media, mediana, desviación estándar o lo que se desee comparar, que se calcula para los datos observados \\(T_{\\text{obs}}\\) y para los datos simulados \\(T_{\\text{sim}}\\).\nSi los valores observados coinciden con los predichos, el valor esperado será 0,5. Es decir, la mitad de las predicciones estarán por debajo de las observaciones y la otra mitad por encima.\n\nPara aquellos que están familiarizados con los valores p y su uso en estadística frecuentista, hay un par de aclaraciones. Lo que hay de Bayesiano en estos valores p es que NO estamos utilizando una distribución muestral sino la distribución predictiva posterior. Además, no estamos haciendo una prueba de hipótesis nula ni tratando de declarar que una diferencia es “significativa”.\n\n\n_, ax = plt.subplots(1, 3, figsize=(12, 3))\n\ndef iqr(x, a=-1):\n    \"\"\"interquartile range\"\"\"\n    return np.subtract(*np.percentile(x, [75, 25], axis=a))\n\naz.plot_bpv(idata_cat, kind=\"t_stat\", t_stat=\"mean\", ax=ax[0])\naz.plot_bpv(idata_cat, kind=\"t_stat\", t_stat=\"median\", ax=ax[1])\naz.plot_bpv(idata_cat, kind=\"t_stat\", t_stat=iqr, ax=ax[2])\nax[0].set_title(\"media\")\nax[1].set_title(\"mediana\")\nax[2].set_title(\"Rango inter-cuartil\");\n\n\n\n\n\n\n\n\nUn caso especial se da al comparar si los valores simulados son menores que los observados, es decir\n\\[\np(\\tilde y \\le y_{\\text{obs}} \\mid y)\n\\]\n\naz.plot_bpv(idata_cat, kind=\"p_value\");\n\n\n\n\n\n\n\n\nOtra posibilidad es realizar la comparación por observación.\n\\[\np(\\tilde y_i \\le y_i \\mid y)\n\\]\nEsto se suele llamar valor-p marginal y la distribución ideal es uniforme estándar.\nLa linea blanca en la siguiente figura representa el valor ideal y la banda gris la desviación esperada dado el tamaño de los datos. Los valores de x se pueden interpretar como cuantiles, es decir los valores centrales representan el “seno” de la distribución y los valores extremos las “colas”.\n\naz.plot_bpv(idata_cat);\n\n\n\n\n\n\n\n\nPor qué esperamos una distribución uniforme? Debido a una propiedada llamada transformada integral de probabilidad (PIT por su sigla en inglés). También llamada a veces universalidad de la uniforme.\nDada una variable aleatoria continua \\(X\\) y CDF \\(F_X\\) podemos computar una variable aleatoria \\(Y\\) con distribución uniforme estándar haciendo.\n\\[\nY = F_X (X)\n\\]\nEs decir si tomamos una variable aleatoria \\(X\\) y le aplicamos su propia CDF, la transformamos en \\(Y \\sim \\mathcal{U}[0, 1]\\). Empíricamente podemos ver esto haciendo:\n\ndist = pz.Normal(0, 1)  # Probar con otras distribuciones\nplt.hist(dist.cdf(dist.rvs(1000)), bins=\"auto\");\n\n\n\n\n\n\n\n\nSi desconocemos \\(F_X\\), pero contamos con muestras de \\(X\\), podemos usar la CDF empírica que es lo que estamos haciendo al calcular el valor-p marginal.\n\ndist = pz.Normal(0, 1)  # Probar con otras distribuciones\npred_f = np.exp(dist.rvs(1000))**0.3\nobs_f = np.exp(dist.rvs(1000))**0.3\n\n\npit = []\nfor m in obs_f:\n    pit.append(np.mean(pred_f &lt;= m))\n    \nplt.hist(pit);",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Flujo de trabajo Bayesiano</span>"
    ]
  },
  {
    "objectID": "04_Flujo_de_trabajo_bayesiano.html#comparación-de-modelos",
    "href": "04_Flujo_de_trabajo_bayesiano.html#comparación-de-modelos",
    "title": "4  Flujo de trabajo Bayesiano",
    "section": "4.6 Comparación de modelos",
    "text": "4.6 Comparación de modelos\n\n4.6.1 El equilibro entre simplicidad y exactitud\nAl elegir entre explicaciones alternativas, existe un principio conocido como la navaja de Occam. En lineas muy generales este principio establece que dadas dos o más explicaciones equivalentes para el mismo fenómeno, la más simple es la explicación preferida. Un criterio común de simplicidad es la cantidad de parámetros de un modelo.\nOtro factor que generalmente debemos tener en cuenta al comparar modelos es su exactitud, es decir, qué tan bueno es un modelo ajustando los datos. Según este criterio si tenemos dos (o más) modelos y uno de ellos explica los datos mejor que el otro, entonces ese es el modelo preferido.\nIntuitivamente, parece que al comparar modelos, tendemos a preferir aquellos que mejor ajusten los datos y aquellos que sean más simples. ¿Pero que hacer si estos dos principios se contraponen? O de forma más general, ¿Existe una forma cuantitativa de contemplar ambas contribuciones? La respuesta corta es que si. De hecho hay más de una forma de hacerlo. Pero antes veamos un ejemplo a fin de generar mayor intuición.\n\n\n4.6.2 Muchos parámetros (pueden) conducir a sobreajuste\nVamos a comenzar por combinar polinomios cada vez más complejos en un conjunto de datos muy simple. En lugar de utilizar la maquinaria Bayesiana, usaremos la aproximación de mínimos cuadrados para ajustar modelos lineales.\n\n\nMostrar Código\n_, ax = plt.subplots(1, 1, figsize=(12, 4))\n\n\nx0 = np.array([4., 5., 6., 9., 12, 14.])\ny0 = np.array([4.2, 6.1, 5., 10., 10, 14.])\n\norder = [0, 1, 5]\nax.plot(x0, y0, 'ko', zorder=3)\n\n\nax.set_yticks([])\nax.set_xticks([])\n\nx_n = np.linspace(x0.min(), x0.max(), 100)\nps = []\nfor i in order:\n    p = np.polynomial.Polynomial.fit(x0, y0, deg=i)\n    ps.append(p)\n    yhat = p(x0)\n    ybar = np.mean(y0)\n    ss_regression = np.sum((yhat-y0)**2)\n    ss_total = np.sum((ybar-y0)**2)\n    r2 = 1 - ss_regression / ss_total\n    ax.plot(x_n, p(x_n), label=f'orden {i}, $R^2$= {r2:.3f}')\n\n    \nax.legend(loc=2);\n\n\n\n\n\n\n\n\n\nDe la figura anterior podemos ver que el aumento de la complejidad del modelo se acompaña de una mayor exactitud reflejada en el coeficiente de determinación R². De hecho, podemos ver que el polinomio de orden 5 se ajusta perfectamente a los datos, obteniendo un R²=1.\n¿Por qué el polinomio de grado 5 puede capturar los datos sin perder uno solo de ellos? La razón es que tenemos el mismo número de parámetros que de datos es decir 6. Por lo tanto, el modelo está actuando como una forma alternativa de expresar los datos. El modelo no está aprendiendo algo sobre los datos, ¡Está memorizando los datos! A partir de este simple ejemplo, podemos ver que un modelo con mayor ajuste no siempre es lo ideal.\nAhora agregaremos dos datos nuevos y sin volver a ajustar los modelos veremos como cambia el R². Se puede ver que al modelo lineal le va mejor en este caso que al polinomial.\n\n\nMostrar Código\n_, ax = plt.subplots( figsize=(12, 4))\nx_ = np.array([6.5, 10])\ny_ = np.array([7, 10])\n\nax.plot(x0, y0, 'ko', zorder=3)\nax.plot(x_, y_, 'ks', zorder=3)\n\nax.set_yticks([])\nax.set_xticks([])\n\nx1 = np.concatenate((x0, x_))\ny1 = np.concatenate((y0, y_))\n\nfor idx, i in enumerate(order):\n    yhat = ps[idx](x1)\n    ybar = np.mean(y1)\n    ss_regression = np.sum((yhat-y1)**2)\n    ss_total = np.sum((ybar-y1)**2)\n    r2 = 1 - ss_regression / ss_total\n    ax.plot(x_n, ps[idx](x_n), label=f'orden {i}, $R^2$= {r2:.3f}')\n\n    \nax.legend(loc=2, fontsize=12);\n\n\n\n\n\n\n\n\n\nCuando un modelo ajusta muy bien, el conjunto de datos utilizado para aprender los parámetros de ese modelo, pero muy mal otros conjuntos de datos, decimos que tenemos sobreajuste (overfitting). Este es un problema muy común al analizar datos.\nUna forma muy útil de pensar el sobreajuste es considerar que un conjunto de datos tiene dos componentes; la señal y el ruido. La señal es lo que queremos capturar (o aprender) de los datos. Si usamos un conjunto de datos es porque creemos que hay una señal allí, de lo contrario será un ejercicio fútil. El ruido, en cambio, no es útil y es el producto de los errores de medición, las limitaciones en la forma en que se generaron o capturaron los datos, la presencia de datos corruptos, etc. Un modelo sobreajusta cuando es tan flexible (para un conjunto de datos) que es capaz de aprender el ruido. Esto tiene como consecuencia que la señal queda oculta.\nEsta es una justificación práctica para la navaja de Occam. Y nos advierte que al menos en principio, siempre es posible crear un modelo tan complejo que explique todos los detalles, incluso los más irrelevantes. Tal como en el Imperio descrito por Borges, donde los cartógrafos alcanzaron tal nivel de sofisticación que crearon un mapa del Imperio cuyo tamaño era el del propio Imperio, y que coincidía punto por punto con él.\n\n\n4.6.3 Muy pocos parámetros conducen a un subajuste\nContinuando con el mismo ejemplo pero en el otro extremo de complejidad, tenemos el modelo de orden 0. Este modelo es simplemente una Gaussiana disfrazada de modelo lineal. Este modelo solo es capaz de capturar el valor de la media de \\(y\\), y es por lo tanto totalente indiferente a los valores de \\(x\\). Decimos que este modelo ha subajustado los datos.\n\n\n4.6.4 Medidas de exactitud predictiva\nTodo debe hacerse tan simple como sea posible, pero no más simple es una cita que a menudo se atribuye a Einstein. Al igual que en una dieta saludable, al modelar tenemos que mantener un balance. Idealmente, nos gustaría tener un modelo que ni sub-ajuste ni sobre-ajuste los datos. De alguna forma hay que balancear simplicidad y bondad de ajuste.\nEn el ejemplo previo, es relativamente fácil de ver que el modelo de orden 0 es demasiado simple mientras que el modelo de orden 5 es demasiado complejo. Pero que podemos decir de los otros dos modelos? Cómo podríamos establecer un ranking numérico de estos modelos? Para poder hacer esto necesitamos formalizar nuestra intuición sobre este balance entre simplicidad y exactitud\nVeamos un par de términos que nos serán de utilidad.\n\nExactitud dentro de la muestra (within-sample accuracy). La exactitud medida con los mismos datos usado para ajustar el modelo.\nExactitud fuera de la muestra (out-of-sample accuracy). La exactitud medida con datos no usados para ajustar el modelo.\n\nLa exactitud dentro de la muestra será, en promedio, mayor a la exactitud fuera de la muestra. Es por ello que usar la exactitud dentro de la muestra para evaluar un modelo en general conducirá a pensar que tenemos un mejor modelo de lo que realmente es. Utilizar la exactitud fuera de la muestra es por lo tanto una mejor idea para evitar engañarnos a nosotros mismos. Sin embargo, esta aproximación requiere dejar datos fuera del ajuste, lo cual es un lujo que en general no nos podemos dar. Ya que este es un problema central en el análisis de datos existen varias propuestas para abordarlo. Dos aproximaciones muy populares son:\n\nValidación cruzada: esta es una estrategia empírica basada en dividir los datos disponibles en subconjuntos separados que se utilizan para ajustar y evaluar de forma alternativa\nCriterios de información: este es un término general usado para referirse a varias expresiones que aproximan la exactitud fuera de la muestra como la exactitud dentro de la muestra más un término que penaliza la complejidad del modelo.\n\n\n\n4.6.5 Validación cruzada\nLa validación cruzada es una solución simple y, en la mayoría de los casos, efectiva para comparar modelos. Tomamos nuestros datos y los dividimos en K porciones. Intentamos mantener las porciones más o menos iguales (en tamaño y, a veces, también en otras características, como, por ejemplo, un número igual de clases). Luego usamos K-1 porciones para entrenar el modelo y el resto para evaluarlo. Este proceso se repite sistemáticamente dejando, por cada iteración, una porción diferente fuera del conjunto de entrenamiento y usando esa porción como el conjunto de evaluación. Esto se repite hasta que hayamos completado K rondas de ajuste-evaluación. La exactitud del modelo será la del promedio a lo largo de las K rondas. Esto se conoce como validación cruzada K-fold. Por último, una vez que hemos realizado la validación cruzada, usamos todos los datos para ajustar por última vez nuestro modelo y este es el modelo que se utiliza para hacer predicciones o para cualquier otro fin.\n\nCuando K es igual a la cantidad de puntos de datos, obtenemos lo que se conoce como validación cruzada dejando uno afuera (LOOCV del inglés leave-one-out cross-validation).\nLa validación cruzada es una práctica de rutina en machine learning. Y apenas hemos descripto los aspectos más esenciales de esta práctica. Para mayor información pueden leer The Hundred-Page Machine Learning Book o Python Machine Learning, by Sebastian Raschka, o Python Data Science Handbook by Jake Vanderplas.\nLa validación cruzada es una idea muy simple y útil, pero para algunos modelos o para grandes cantidades de datos, el costo computacional de la validación cruzada puede estar más allá de nuestras posibilidades. Muchas personas han tratado de encontrar cantidades más simples de calcular que se aproximen a los resultados obtenidos con la validación cruzada o que funcionen en escenarios donde la validación cruzada no puede ser tan fácil de realizar. Y ese es el tema de la siguiente sección.\n\n\n4.6.6 Criterios de información\nLos criterios de información son una colección de herramientas estrechamente relacionadas que se utilizan para comparar modelos en términos de la bondad del ajuste y de la complejidad del modelo. En otras palabras, los criterios de información formalizan la intuición que desarrollamos al comienzo del capítulo. La forma exacta en que se derivan estas cantidades tiene que ver con un campo conocido como Teoría de la Información.\nUna forma intuitiva de medir qué tan bien un modelo se ajusta a los datos es calcular el error cuadrático medio entre los datos y las predicciones realizadas por el modelo:\n\\[\\frac{1}{n} \\sum_{i=1}^{n}  (y_i - \\operatorname{E} (y_i \\mid \\theta))^2\\]\n\\(\\operatorname{E} (y_i \\mid \\theta)\\) es el valor predicho dados los parámetros estimados. Es importante notar que esto es esencialmente el promedio de la diferencia entre los datos observados y los predichos. Tomar el cuadrado de los errores asegura que las diferencias no se cancelen y enfatiza grandes errores comparado con otros alternativas como por ejemplo calcular el valor absoluto.\nEl error cuadrático medio, puede resultarnos familiar ya que es muy popular. Pero si nos detenemos a reflexionar sobre esta cantidad veremos que en principio no tiene nada de especial y bien podríamos idear otras expresiones similares. Cuando adoptamos una aproximación probabilista vemos que una expresión más general (y natural) es la siguiente:\n\\[ \\sum_{i=1}^{n} \\log p(y_i \\mid \\theta)\\]\nEsto es, la suma (sobre \\(n\\) datos) de los likelihoods (en escala logarítmica). Esto es natural por que al elegir un likelihood en un modelo estamos eligiendo implícitamente una métrica para evaluar el ajuste del modelo. Cuando \\(p(y_i \\mid \\theta)\\) es una gaussiana entonces la suma de log-likelihood será proporcional al error cuadrático medio.\n\n4.6.6.1 Criterio de información de Akaike\nEste es un criterio de información muy conocido y ampliamente utilizado fuera del universo Bayesiano y se define como:\n\\[AIC = -2 \\sum_{i=1}^{n} \\log p(y_i \\mid \\hat{\\theta}_{mle}) + 2 k \\]\nDonde, k es el número de parámetros del modelo y \\(\\hat{\\theta}_{mle}\\) es la estimación por máxima verosimilitud para \\(\\theta\\). Para el resto de nuestra discusión vamos a omitir la constante -2 y escribir\n\\[AIC = \\sum_{i=1}^{n} \\log p(y_i \\mid \\hat{\\theta}_{mle}) - k \\]\nDe esta forma es más fácil ver que el criterio de Akaike es una maxima-verosimilitud penalizada (se hace más chica, se minimiza) mientras más parámetros tenga un modelo.Además, esta versión sin el -2 tiene una correspondencia más clara con otras expresiones que veremos a continuación.\nQué el número de parámetros sea un criterio válido de penalización es intuitivo, ya que como vimos en el ejemplo anterior con los polinomios, un modelo con mayor número de parámetros es, en general, más flexible. Pero es importante destacar que el criterio de Akaike tiene una justificación teórica, no es que Akaike simplemente pensó que usar \\(k\\) era buena idea.\nEl criterio de AIC es muy útil, pero presenta problemas para modelos Bayesianos. Una de las razones es que no utiliza la distribución a posteriori de \\(\\theta\\) y, por lo tanto, descarta información. Además AIC, desde una perspectiva Bayesiana, asume que los priors son planos y, por lo tanto, AIC es incompatible con priors informativos y/o ligeramente informativos. Además, la cantidad de parámetros de un modelo no es una buena medida de la complejidad del mismo cuando se usan priors informativos o estructuras como la jerárquica. Agregar información a un modelo en su estructura, equivale a reducir la cantidad efectiva de parámetros, algo también conocido como regularización.\nPodemos encontrar una expresión equivalente, pero mejor ajustada a modelos Bayesianos?\n\n\n\n4.6.7 WAIC\nComo ya vimos en el criterio de Akaike, la bondad del ajuste viene dado por:\n\\[\n\\sum_{i=1}^{n} \\log p(y_i \\mid \\hat{\\theta}_{mle})\n\\]\nPero en estadística Bayesiana, NO tenemos una estimación puntual de \\(\\theta\\). Tenemos una distribución, por lo que deberíamos hacer:\n\\[\n\\sum_{i=1}^{n} \\log\n    \\int \\ p(y_i \\mid \\theta) \\; p(\\theta \\mid y) d\\theta\n\\]\nComo en general no tenemos una expresión analítica para el posterior, \\(p(\\theta \\mid y)\\), pero tenemos unas serie de muestras (como las obtenidas por MCMC), entonces podemos aproximar la integral por:\n\\[\n\\sum_i^n \\log \\left(\\frac{1}{S} \\sum_{s=1}^S p(y_i \\mid \\theta^s) \\right)\n\\]\nLLamaremos a esta cantidad ELPD, que es la sigla en inglés para valor esperado de la densidad log-predictiva.\nOK, ya tenemos como medir la bondad de ajuste. Ahora necesitamos un término que penalice la complejidad del modelo. Encontrar la expresión correcta para esto, requiere de trabajo, asi que la vamos a presentar sin justificar. Este nuevo criterio (la versión Bayesiana de Akaike) se llama Widely applicable information criterion:\n\\[WAIC = \\sum_i^n \\log \\left(\\frac{1}{S} \\sum_{s=1}^S p(y_i \\mid \\theta^s) \\right) - \\sum_i^n  \\left( V_{s=1}^S \\log p(y_i \\mid \\theta^s) \\right)\\]\nDonde el término de penalización viene dado por la varianza de los log-likelihoods sobre las \\(S\\) muestras del posterior. Intuitivamente el término penaliza modelos que tengan mucha variabilidad en sus predicciones. Veamos como ejemplo un modelo lineal:\n\\[\nY = \\alpha + \\beta X\n\\]\nUn modelo donde \\(\\beta=0\\) será menos flexible, ya que equivale a un modelo que solo tiene un parámetro, \\(\\alpha\\). De forma un poco más sutil un modelo donde \\(\\beta\\) varía en un rango estrecho será menos flexible (más regularizado), que un modelo donde \\(\\beta\\) puede tomar cualquier valor.\n\n\n4.6.8 LOO y la validación cruzada (aproximada)\nExiste otra alternativa para penalizar el término\n\\[\n\\sum_i^n \\log \\left(\\frac{1}{S} \\sum_{s=1}^S p(y_i \\mid \\theta^s) \\right)\n\\]\nY es calcular\n\\[\n\\sum_{i}^{n} \\log\n    \\left( \\frac{1}{s}\\sum_j^s \\mathbin{\\color{#E9692C}{p(y_i \\mid \\theta_{-i}^j)}} \\right)\n\\]\ndonde \\(_{-i}\\) quiere decir que dejamos la observación \\(i\\) afuera. Una implementación Naive de esta estimación requiere que estimemos tantas distribuciones a posteriori como datos tengamos, ya que para cada una de ellas eliminaremos una observación. Sin embargo, esto no es necesario ya que es posible estiamar \\(\\color{#E9692C}{p(y_i \\mid \\theta_{-i}^j})\\) usando Muestreo de Importancia (importance sampling).\nAntes de seguir con nuestra agenda, necesitamos hacer un pequeño detour.\n\n4.6.8.1 Muestreo de importancia\nEsta es una técnica para estimar propiedades de una distribución de interés \\(f\\), dado que solo tenemos muestras de una distribución \\(g\\). Usar el muestreo de importancia tiene sentido, por ejemplo, cuando es más simple muestrear \\(g\\) y no \\(f\\).\nSi tenemos un conjunto de muestras de la variable aleatoria \\(X\\) y podemos evaluar \\(g\\) y \\(f\\) puntualmente, podemos calcular los pesos de importancia como:\n\\[\\begin{equation}\n     w_i = \\frac{f(x_i)}{g(x_i)}\n\\end{equation}\\]\nComputacionalmente queda de la siguiente manera:\n\nExtraer \\(N\\) muestras \\(x_i\\) de \\(g\\)\nCalcular la probabilidad de cada muestra \\(g(x_i)\\)\nEvaluar \\(f\\) sobre las \\(N\\) muestras \\(f(x_i)\\)\nCalcular los pesos de importancia \\(w_i = \\frac{f(x_i)}{g(x_i)}\\)\n\nUna vez obtenidos los pesos \\(w_i\\), podemos usarlos para estimar propiedades de \\(f\\), su densidad, momentos, cuantiles, etc.\nA continuación se muestre un bloque de código donde \\(g\\) es una Normal y \\(f\\) una Gamma y usamos muestreo de importancia para estimar la PDF de \\(f\\). Este es solo un ejemplo didáctico, ya que en realidad sabemos como calcular la PDF de una Gamma. Pero en la práctica \\(f\\) puede ser un objeto mucho más complejo.\n\ng = pz.Normal(0, 10)\nsamples = g.rvs(1000)\nf = pz.Gamma(mu=4, sigma=1.5)\n\nw = f.pdf(samples) / g.pdf(samples)\n\nplt.hist(samples, bins=100, density=True, weights=w, alpha=0.6, color='g', label='Weighted samples')\nplt.xlim(0, 15)\n\n\nf.plot_pdf();\n\n\n\n\n\n\n\n\nAl hacer muestreo de importancia mientras más similares sean \\(g\\) y \\(f\\) mejor serán los resultados. En la práctica las inferencias son más confiables cuando \\(g\\) tiene un soporte mayor que \\(f\\), es decir cuando es más “ancha”, intuitivamente necesitamos que las muestras de \\(g\\) cubran todo el soporte de \\(f\\) (o al menos las regiones de densidad alta).\n\n\n\n4.6.9 Retomando\nAhora que tenemos una mejor idea de muestreo por importancia veamos como podemos usarlo. La distribución que conocemos es la distribución a posteriori, y la que queremos aproximar por muestreo de importancia es la distribución a posteriori dejando uno afuera \\(p(y_i \\mid \\theta_{-i}^j)\\). Por lo que los pesos de importancia que nos interesa calcular son:\n\\[\\begin{equation}\n    w_i^j = \\frac{p(\\theta^j \\mid y_{-i} )}{p(\\theta^j \\mid y)} \\propto \\frac{p(\\theta) \\prod_{i\\not=-i}^n p(y_i \\mid \\theta)}{p(\\theta) \\prod_i^n p(y_i \\mid \\theta)} \\propto \\frac{1}{p(y_i \\mid \\theta^j)}\n\\end{equation}\\]\nEs decir los términos comunes (y que por lo tanto se cancelan) entre numerador y denominador son todos menos el likelihood para la observación que queremos remover. Nótese que los pesos son proporcionales y no están normalizados, pero esto no es un problema ya que se pueden normalizar simplemente dividiendo cada peso por la suma total de los pesos.\nEste resultado es una gran noticia, porque nos dice que es posible calcular el ELPD por validación cruzada dejando uno afuera, a partir de un solo ajuste de los datos! y que solo necesitamos los valores de los log-likelihoods, cuyo costo computacional es, en general, muy bajo.\nLa trampa, por que siempre hay una trampa, es que es esperable que \\(p(\\theta^j \\mid y_{-i} )\\) sea más “ancha” que \\(p(\\theta^j \\mid y)\\), ya que es una distribución a posteriori estimada con una observación menos. Esto es lo contrario al caso ideal en muestreo por importancia. Para muchos casos puede que la diferencia no sea relevante, ya que eliminar una observación puede conducir a una distribución a posteriori prácticamente equivalente. Pero en algunos casos la diferencia puede ser relativamente grande. Cuándo? Pues, mientras más “influyente” sea la observación. En términos de importance sampling esto se traduce en pesos con mayor importancia relativa y que por lo tanto tienen a dominar la estimación.\nUna forma de corregir esto problema es simplemente truncando los pesos “demasiado altos”, pero esto trae otros problemas que no vamos a discutir. Otra forma consiste en respaldarse en la teoría. La teoría indica que bajo ciertas condiciones los pesos altos se distribuyen según una Pareto. Por lo que en vez de truncarlos podemos ajustarlos a una distribución de Pareto y luego remplazarlos por valores obtenidos de esa distribución. Esto es una forma de suavizado que, dentro de cierto rango, permite estabilizar la estimación por muestreo de importancia, ya que hará que alguno valores “muy grandes” no lo sean tanto.\nCuando combinamos todas estas ideas obtenemos un método llamado Pareto-Smooth Importance Sampling Leave-One-Out Cross Validation, que se abrevia como PSIS-LOO-CV. Dado que el nombre y la sigla son horriblemente largo y difíciles de pronunciar nosotros lo llamaremos LOO (pronunciado como “lu”).\n\n\n4.6.10 LOO y WAIC\nAsintóticamente LOO y WAIC convergen, y además funcionan bajo el mismo conjunto de supuestos. Por lo que teóricamente son equivalentes. Sin embargo en la práctica LOO es más robusto, y además nos ofrece un diagnóstico que indica cuándo podría estar fallando (esto gracias al ajuste de Pareto). Por lo que en la práctica preferimos LOO.\n\n\n4.6.11 Calculando LOO\nLuego de toda esta introducción calcular LOO, puede parecer algo decepcionante. Solo tenemos que llamar a la función loo de ArviZ y pasarle un objeto InfereceData que contenga el grupo log-likelihood. Por defecto PyMC NO agrega este grupo al llamar a pm.sample. Podemos calcularlo junto con el posterior si hacemos pm.sample(., )\n\nwith modelo_cat:\n    pm.compute_log_likelihood(idata_cat,\n                              extend_inferencedata=True,  # actualizamos \"in-place\"\n                              progressbar=False,\n                             )  \n\n\n\n\n\nloo_p = az.loo(idata_cat)\nloo_p\n\n/home/osvaldo/proyectos/00_BM/arviz-devs/arviz/arviz/stats/stats.py:792: UserWarning: Estimated shape parameter of Pareto distribution is greater than 0.7 for one or more samples. You should consider using a more robust model, this is because importance sampling is less likely to work well if the marginal posterior and LOO posterior are very different. This is more likely to happen with a non-robust model and highly influential observations.\n  warnings.warn(\n\n\nComputed from 4000 posterior samples and 111 observations log-likelihood matrix.\n\n         Estimate       SE\nelpd_loo  -171.18     7.90\np_loo        2.92        -\n\nThere has been a warning during the calculation. Please check the results.\n------\n\nPareto k diagnostic values:\n                         Count   Pct.\n(-Inf, 0.7]   (good)      108   97.3%\n   (0.7, 1]   (bad)         1    0.9%\n   (1, Inf)   (very bad)    2    1.8%\n\n\nPodemos ver que obtenemos el valor del ELPD estimado usando LOO y su error estándar. p_loo se puede interpretar aproximadamente como el número efectivo de parámetros. De hecho, si cuentan el número de parámetros de modelo_cat verán que es efectivamente 3.\nLuego podemos ver una tabla con los “Valor del diagnóstico de Pareto k”. Ya algo adelantamos sobre esto. Dijimos que usábamos una Pareto para regularizar la estimación de los pesos de importancia. Uno de los parámetros de ese ajuste se llama k. Como tenemos un ajuste de Pareto por observación tenemos un valor k por observación. Este parámetro es útil por que nos indica dos caras de una misma moneda, nos dice cuando una observación es “muy influyente” y nos indica que la aproximación empleada por LOO podría estar fallando para esa observación (lean el mensaje de advertencia con fondo rosa).\nComo regla general si k es menor a 0.7 no hay problemas, si estamos entre 0.7 y 1 es muy probable que estemos en problemas y si el mayor a 1, estamos perdidos. El valor corte 0.7 no es fijo, estrictamente puede ser menor y depende del número total de muestras de la distribución a posteriori, 4000, en este ejemplo. Pero cuando el número es un poco mayor a 2000 ya estamos casi en 0.7. En la práctica es común usar valores de muestras de 2000 o mayores. Incrementar el número de muestras (draws en la función pm.sample) puede reducir el valor de k y por lo podríamos remover algunas de estas advertencias, pero en general el número necesario podría ser demasiado grande como para que tenga sentido práctico.\nEs posible visualizar los valores de k, usando plot_khat\n\naz.plot_khat(loo_p, threshold=0.7);\n\n\n\n\n\n\n\n\nSi bien la función principal de LOO es comparar modelos, los valores de k puede ser útiles incluso si solo tenemos uno. Por ejemplo podríamos tener conocimiento extra que nos indique por qué estas observaciones son influyentes, quizá hubo un problema en la toma de datos y los valores son incorrectos. O quizá los valores son correctos pero desde la perspectiva de nuestro modelo son influyentes, “extraños”, “sorprendentes”.\nSi k &gt; 0.7, el valor de p_loo puede darnos algo más de información. Siendo \\(p\\) es el número total de parámetros en un modelo.\n\nSi p_loo &lt;&lt; p entonces el modelo debe estar mal-especificado. Esto debería verse también en las pruebas predictivas a posteriori. Una solución es usar un modelo sobredispersado (como cambiar una Poisson por una NegativaBinomial o por una ZeroInflatedPoisson o HurdlePoisson, o cambiar una Normal por una T de Student, etc). O es probable que el modelo necesite más estructura o complejidad, quizá necesitamos un término no-lineal, etc\nSi p_loo &lt; p y las observaciones son relativamente pocas comparadas con \\(p\\), (digamos p&gt;N/5). Es probable que tengamos un modelo demasiado flexible y/o priors demasiado vagos. Esto puede pasar para modelos jerárquicos con muy pocas observaciones por grupo o por ejemplo para splines con muchos nudos o Procesos Gaussianos con valores de escala muy cortos\nIf p_loo &gt; p, entonces el modelo tiene problemas muy serios. Si p&lt;&lt;N, entonces las pruebas predictivas a posterior también deberían reportar problemas. Si en cambio p es relativamente grande (digamos p&gt;N/5). Entonces es posible que las pruebas predictivas a posteriori no reflejen problemas.\n\nPor último, otra forma de usar LOO incluso en ausencia de otro modelo es mediante plot_loo_pit. Si el gráfico luce similar al que vimos para los valores p-Bayesianos marginales, es por que estamos haciendo lo mismo. Pero esta vez al usar LOO, estamos considerando:\n\\[\np(\\tilde y_i \\le y_i \\mid y_{-i})\n\\]\nEs decir estamos evaluando, de forma aproximada, la capacidad del modelo de predecir una observación cuando removemos esa observación de los datos observados.\n\naz.plot_loo_pit(idata_cat, y=\"acc\", use_hdi=True)\n\n\n\n\n\n\n\n\n\n4.6.11.1 Otros criterios de información\nOtro criterio de información muy usado es DIC, si usamos el bayesómetro™, DIC es más bayesiano que AIC pero menos que WAIC. Aunque aún es popular, WAIC y principalmentete LOO han demostrado ser más útiles tanto teóricamente como empíricamente que DIC. Por lo cual NO recomendamos su uso.\nOtro criterio muy usado es BIC (del inglés Bayesian Information Criteria), al igual que la regresión logística y la sopa seca de mi madre, este nombre puede ser engañoso. BIC se propuso como una forma de corregir algunos de los problemas con AIC y el autor propuso una justificación Bayesiana para ello. Pero BIC no es realmente Bayesiano en el sentido que al igual que AIC asume priors planos y utiliza una estimación por máxima verosimilitud.\nPero lo que es más importante, es que BIC difiere de AIC y WAIC en su objetivo. AIC y WAIC intentan reflejar cuál modelo generaliza mejor a otros datos (exactitud predictiva) mientras que BIC intenta identificar cuál es el modelo correcto y por lo tanto está más relacionado a los factores de Bayes que con WAIC. Más adelante discutiremos Factores de Bayes y veremos cómo se diferencia de criterios como WAIC y LOO.\n\ntarget = pz.StudentT(nu=4, mu=0, sigma=1).rvs(200)\n\nwith pm.Model() as modelo_n:\n    μ = pm.Normal(\"μ\", 0, 1)\n    σ = pm.HalfNormal(\"σ\", 1)\n    pm.Normal(\"y\", μ, σ, observed=target)\n    idata_n = pm.sample(idata_kwargs={\"log_likelihood\":True})\n    \nwith pm.Model() as modelo_t:\n    μ = pm.Normal(\"μ\", 0, 1)\n    σ = pm.HalfNormal(\"σ\", 1)\n    ν = pm.Exponential(\"ν\", scale=30)\n    pm.StudentT(\"y\", nu=ν, mu=μ, sigma=σ, observed=target)\n    idata_t = pm.sample(idata_kwargs={\"log_likelihood\":True})\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [μ, σ]\n\n\n\n\n\n\ncmp_df = az.compare({'modelo_n':idata_n, 'modelo_t':idata_t})\ncmp_df\n\n/home/osvaldo/proyectos/00_BM/arviz-devs/arviz/arviz/stats/stats.py:792: UserWarning: Estimated shape parameter of Pareto distribution is greater than 0.7 for one or more samples. You should consider using a more robust model, this is because importance sampling is less likely to work well if the marginal posterior and LOO posterior are very different. This is more likely to happen with a non-robust model and highly influential observations.\n  warnings.warn(\n\n\n\n\n\n\n\n\n\nrank\nelpd_loo\np_loo\nelpd_diff\nweight\nse\ndse\nwarning\nscale\n\n\n\n\nmodelo_t\n0\n-385.178047\n3.073423\n0.000000\n1.0\n17.274565\n0.00000\nFalse\nlog\n\n\nmodelo_n\n1\n-448.317291\n10.794644\n63.139244\n0.0\n37.293694\n27.61818\nTrue\nlog\n\n\n\n\n\n\n\nEn las filas tenemos los modelos comparados y en la columnas tenemos\n\nrank : el orden de los modelos (de mejor a peor)\nelpd : la estimación puntual del elpd usando\np : los parámetros efectivos\nelpd_diff : la diferencia entre el ELPD del mejor modelo y los demás modelos\nweight : el peso relativo de cada modelo. Si quisieramos hacer predicciones combinando los distintos modelos, en vez de elegir uno solo, este sería el peso que deberíamos asignar a cada modelo. En este caso vemos que model_t se lleva todo el peso.\nse : el error estándard del ELPD\ndse : el error estándard de las diferencias\nwarning : una advertencia sobre si hay almenos un valor k alto\nscale : la escala en la que se calcula el ELPD\n\nTambién podemos obtener más o menos la misma información de forma gráfica usando la función `az.compareplot\n\naz.plot_compare(cmp_df, plot_ic_diff=False);\n\n\n\n\n\n\n\n\n\nLos círculos vacíos representan los valores del ELPD y líneas negras el error estándar.\nEl valor más alto del ELPD se indica con una línea gris discontinua vertical para facilitar la comparación con otros valores.\nPara todos los modelos, excepto el mejor, también obtenemos un triángulo que indica el valor de la diferencia del ELPD entre cada modelo y el mejor modelo. La barra de error gris que indica el error estándar de las diferencias entre las estimaciones puntuales.\n\nLa forma más sencilla de utilizar los criterios de información es elegir un único modelo. Simplemente elija el modelo con el valor más alto de ELPD. Si seguimos esta regla tendremos que aceptar que el modelo cuadrático es el mejor. Incluso si tenemos en cuenta los errores estándar podemos ver que estos no se solapan. Lo que nos da cierta seguridad que efectivamente los modelos son diferentes entre si. Si, en cambio, los errores estándar se superpusieran, deberíamos proporcionar una respuesta más matizada.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Flujo de trabajo Bayesiano</span>"
    ]
  },
  {
    "objectID": "04_Flujo_de_trabajo_bayesiano.html#diagnosticos-del-muestreo-por-mcmc",
    "href": "04_Flujo_de_trabajo_bayesiano.html#diagnosticos-del-muestreo-por-mcmc",
    "title": "4  Flujo de trabajo Bayesiano",
    "section": "4.7 Diagnosticos del muestreo por MCMC",
    "text": "4.7 Diagnosticos del muestreo por MCMC\n\n4.7.1 Trace plots\nEste es un gráfico muy común. Para cada parámetro graficamos su valor (eje-y) en cada iteración (eje-x). Lo esperable es no ver ningún patrón, solo ruido como en primer panel de la siguiente figura (marco turquesa).\n\n\n\nEn cambio los otros tres paneles (marco magenta) muestran problemas. De izquierda a derecha y arriba a abajo:\n\nEl segundo panel muestra que el muestreo es “pegajoso”, le toma muchos pasos a la cadena moverse de valores altos a valores bajos, es difícil predecir que sucedería si seguimos corriendo, la cadena se movería hacia arriba nuevamente, se estabilizaría en valos bajos, continuaría bajando aún más?\nEl tercer panel muestra una cadena menos “pegajosa”, pero también daría la impresión que aún no ha terminado de estabilizarse\nEl último panel, en cambio, muestra que hay una región donde el sampler se mueve bien, pero cada tanto “salta” a estados donde se queda atascado. Quizá esto se deba a una distribución a posteriori multimodal o dificultades en el sampler para explorar regiones con distinta curvatura.\n\nComo ya vimos por defecto PyMC corre más de una cadena, por lo que un traceplot ideal debería verse como esto:\n\n\n\nArviZ permite graficar trace-plots usando la función az.plot_trace(). Por defecto obtenemos el trace a la derecha y un KDE (para variables continuas) y un histograma (para discretas) a la izquierda\n\n\n\n\n\n4.7.2 Rank plots\nLos trace plots son muy comunes, pero existe una alternativa más moderna llamada rank plots. La idea básica es la siguiente. Para un parámetro tomamos todas las cadenas y ordenamos los valores de menor a mayor y les asignamos un rango es decir al valor más bajo le ponemos 0, al que sigue 1 y así hasta llegar a un número que será igual a la cantidad de muestras totales (cantidad de cadenas multiplicado por la cantidad de muestras por cadena). Luego reagrupamos los rankings según las cadenas que les dieron origen y para cada cadena hacemos un histograma. Si las cadenas fuesen indistinguibles esperaríamos que los histogramas sean uniformes. Ya que no hay razón para que una cadena tenga más rankings bajos (o medios o altos) que el resto.\nLa siguiente figura muestra 4 ejemplos, donde solo uno (marco cyan) no muestra problemas\n\n\n\nEn ArviZ los rank plots se pueden obtener con la función az.plot_rank o pasando un argumento a plot_trace az.plot_trace(⋅, kind=\"rank_bars\")\n\n\n4.7.3 \\(\\hat R\\) (R sombrero)\nLos gráficos suelen ser útiles para descubrir patrones, pero a veces queremos números, por ejemplo al evaluar rápidamente muchos parámetros. \\(\\hat R\\) es la respuesta a la pregunta. Lograron las cadenas mezclarse adecuadamente? Pero también me gusta pensarlo como el jurado en un concurso de trace (o rank) plots. La versión implementada en ArviZ hace varias cosas debajo del capó, pero la idea central es que compara la varianza entre cadenas con la varianza dentro de cada cadena.\n\n\n\nIdealmente \\(\\hat R = 1\\), en la práctica \\(\\hat R \\lessapprox 1.01\\) son considerados seguros y en la primer fase de modelado valores más altos como \\(\\hat R \\approx 1.1\\) pueden estár bien.\nUsando ArviZ podemos obtener \\(\\hat R\\) usando az.rhat(⋅), az.summary(⋅) y az.plot_forest(⋅, r_hat=True)\n\n\n4.7.4 Gráfico de autocorrelación\nIdealmente, una muestra debe ser independiente e idénticamente distribuida (iid). Por definición, las muestras MCMC están correlacionadas. En la práctica, queremos muestras con baja autocorrelación. En ArviZ obtenemos este gráfico con la función az.plot_autocorr()\n\ncadenas_defectuosas = {\"cadenas_defectuosas\": np.linspace(0, 1, 1000).reshape(2, -1)}\naz.plot_autocorr(cadenas_defectuosas);\n\n\n\n\n\n\n\n\n\ncadenas_adecuadas = {\"cadena_adecuadas\": pz.Uniform(0, 1).rvs(size=(2, 500))}\naz.plot_autocorr(cadenas_adecuadas);\n\n\n\n\n\n\n\n\n\n\n4.7.5 Tamaño de muestra efectivo (ESS)\nComo las muestras de un MCMC están correlacionadas la cantidad de información “útil” es menor que una muestra del mismo tamaño pero iid.\n \n\n\n\nPodemos estimar el tamaño de muestra efectivo (ESS), es decir, el tamaño de una muestra con la cantidad equivalente de información pero sin autocorrelación. Esto es útil para determinar si la muestra que tenemos es lo suficientemente grande. Se recomienda que el ESS sea superior a 100 por cadena. Es decir para para 4 cadenas queremos un mínimo de 400.\nCon ArviZ podemos obtenerlo az.ess(⋅), az.summary(⋅) y az.plot_forest(⋅, ess=True)\npd.concat((az.ess(cadenas_defectuosas).to_pandas(), az.ess(cadenas_adecuadas).to_pandas()))\nVemos que az.summary(⋅) devuelve dos valores de ESS, ess_bulk y ess_tail. Esto se debe a que, distintas regiones del espacio de los parámetros pueden tener distinto valor de ESS, ya que no todas las regiones son muestreadas con la misma eficiencia. Intuitivamente uno puede pensar que al muestrear una distribución como una Gaussiana es más fácil obtener mejor calidad de muestra alrededor de la media que de las colas, simplemente por que tenemos más muestras de esa región.\npd.concat([az.summary(cadenas_adecuadas, kind=“diagnostics”), az.summary(cadenas_defectuosas, kind=“diagnostics”)])\nSi las muestras de MCMC las vamos a usar para calcular valores centrales como medias o medianas entonces tenemos que asegurarnos que el ess_bulk sea lo suficientemente algo, en cambio, si queremos calcular intervalos como un HDI 95% hay que asegurarse que ess_tail sea adecuado.\nArviZ ofrece varias funciones vinculadas al ESS. Por ejemplo si queremos evaluar el desempeño del sampler para varias regiones al mismo tiempo podemos usar az.plot_ess.\n\n_, axes = plt.subplots(1, 2, figsize=(10,4), sharey=True)\naz.plot_ess(cadenas_adecuadas, ax=axes[0])\naz.plot_ess(cadenas_defectuosas, ax=axes[1]);\n\n\n\n\n\n\n\n\nUna forma simple de aumentar el ESS es aumentar la cantidad de muestras, pero podría darse el caso que el ESS crezca muy lento con el número de muestras, por lo que aún si aumentáramos 10 veces la cantidad de muestras estaríamos por debajo de lo requerido. Una forma de estimar “cuanto nos falta” es usar az.plot_ess(⋅, kind=\"evolution\"). Este gráfico nos muestra como fue cambiando el ESS con cada muestra, lo que nos permite hacer proyecciones. En el siguiente ejemplo vemos que para cadenas_adecuadas el ESS crece linealmente con el número de muestras mientras que para cadenas_defectuosas no crece para nada. Este último caso no hay esperanzas de mejorar el ESS simplemente aumentando la cantidad de muestras.\n\n_, axes = plt.subplots(1, 2, figsize=(10,4), sharey=True)\naz.plot_ess(cadenas_adecuadas, kind=\"evolution\", ax=axes[0])\naz.plot_ess(cadenas_defectuosas,  kind=\"evolution\", ax=axes[1]);\n\n\n\n\n\n\n\n\n\n\n4.7.6 Error estándar del Monte Carlo (MCSE)\nUna ventaja del ESS es que no tiene escala, da igual si un parámetro varía entre 0.1 y 0.2 y otro entre -2000 y 5000, un ESS de 400 tiene el mismo significado en ambos casos. En modelos con muchos parámetros rápidamente podemos indentificar cuales parámetros son más problemáticos. Sin embargo, a la hora de reportar resultados no es muy informativo saber si el ESS fue de 1372 o 1501. En cambio nos gustaría saber el orden del error que estamos cometiendo al aproximar la distribución a posteriori. Esa información la da el error estándar del Monte Carlo (MCSE). Al igual que el ESS, el MCSE tiene en cuenta la autocorrelación de las muestras. Este error debe estar por debajo de la precisión deseada en nuestros resultados. Es decir si para un parámetro el MCSE es 0.1, no tiene sentido reportar que la media de ese parámetro es 3.15. Ya que tranquilamente el valor correcto podría estar entre 3.4 y 2.8.\nUna de las cantidades devueltas por az.summary(⋅) es mc_error.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Flujo de trabajo Bayesiano</span>"
    ]
  },
  {
    "objectID": "04_Flujo_de_trabajo_bayesiano.html#diagnóstico-de-algoritmos-basados-en-gradiente",
    "href": "04_Flujo_de_trabajo_bayesiano.html#diagnóstico-de-algoritmos-basados-en-gradiente",
    "title": "4  Flujo de trabajo Bayesiano",
    "section": "4.8 Diagnóstico de algoritmos basados en gradiente",
    "text": "4.8 Diagnóstico de algoritmos basados en gradiente\nDebido a su funcionamiento interno, algoritmos como NUTS ofrecen algunas pruebas específicas que no están disponibles para otros métodos. Generalmente estas pruebas son muy sensibles\nPara ejemplificar esto vamos a cargar dos InferenceData de modelos pre-calculados. Los detalles de como se generaron estos idatas no son relevantes por el momento. Solo diremos que son dos modelos que son matemáticamente equivalente pero parametrizados de formas distintas. En este caso la parametrización afecta la eficiencia del sampler. El modelo centrado es muestreado de forma más eficiente que el modelo no centrado.\n\nidata_cm = az.load_arviz_data(\"centered_eight\")\nidata_ncm = az.load_arviz_data(\"non_centered_eight\")\n\n\n4.8.1 Energía de transición vs energía marginal\nPodemos pensar en un Monte Carlo Hamiltoniano como un proceso de dos pasos\n* Un muestreo determinista (siguiendo el Hamiltoniano)\n* Una caminata aleatorio en el espacio del momentum\nSi la distribución de la energía de transición es similar a la distribución de la energía marginal, entonces NUTS es capaz de generar muestras de la distribución marginal de la energía que sean casi independientes entre transiciones. Esto lo podemos evaluar visualmente o numéricamente, calculando el Bayesian Fraction of Missing Information (BFMI), como se muestra en la siguiente figura.\n\n_, axes = plt.subplots(1, 2, sharey=True, sharex=True, figsize=(12, 4), constrained_layout=True)\n\nfor ax, idata, nombre in zip(axes.ravel(), (idata_cm, idata_ncm), (\"centrado\", \"no centrado\")):\n    az.plot_energy(idata, ax=ax)\n    ax.set_title(nombre)\n\n\n\n\n\n\n\n\n\n\n4.8.2 Divergencias\nUna ventaja de NUTS es que falla con el estilo. Esto sucede por ejemplo al intentar pasar de regiones de baja curvatura a regiones de alta curvatura. En estos casos las trayectorias numéricas pueden divergir. En esencia esto sucede porque en esos casos no existe un único conjunto de hiper-parámetros que permita el muestreo eficiente de ambas regiones. Por lo que una de la regiones es muestreada adecuandamente y cuando el sampler se mueve hacia la otra región falla. Las trayectorias numéricas divergentes son identificadores extremadamente sensibles de vecindarios patológicos.\nEl siguiente ejemplo muestra dos cosas el modelo no centrado muestra varias divergencias (círculos turquesas) agrupados en una región. En el modelo centrado, que no tiene divergencias, se puede ver que alrededor de esa misma región hay muestras para valores más pequeños de tau. Es decir el modelo no centrado falla en muestrear una región, pero al menos avisa que está teniendo problemas en muestrear esa región!\n\n_, axes = plt.subplots(1, 2, sharey=True, sharex=True, figsize=(10, 5), constrained_layout=True)\n\n\nfor ax, idata, nombre in zip(axes.ravel(), (idata_cm, idata_ncm), (\"centrado\", \"no_centrado\")):\n    az.plot_pair(idata, var_names=['theta', 'tau'], coords={'school':\"Choate\"}, kind='scatter',\n                 divergences=True, divergences_kwargs={'color':'C1'},\n                 ax=ax)\n    ax.set_title(nombre)\n\n\n\n\n\n\n\n\n\naz.plot_parallel(idata_cm, figsize=(12, 4));",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Flujo de trabajo Bayesiano</span>"
    ]
  },
  {
    "objectID": "04_Flujo_de_trabajo_bayesiano.html#qué-hacer-cuando-los-diagnósticos-no-dan-bien",
    "href": "04_Flujo_de_trabajo_bayesiano.html#qué-hacer-cuando-los-diagnósticos-no-dan-bien",
    "title": "4  Flujo de trabajo Bayesiano",
    "section": "4.9 Qué hacer cuando los diagnósticos no dan bien?",
    "text": "4.9 Qué hacer cuando los diagnósticos no dan bien?\n\n\n Más muestras o más pasos de tuning. Esto solo suele ser útil cuando los problemas son menores\n Burn-in. Los métodos MCMC, pueden demorar un tiempo en converger. En estos casos una solución simple es eliminar la primer porción de muestras, lo que se llama burnin. Software moderno como PyMC utiliza una cantidad de muestras para ajustar los hiper-parámetros de los métodos de muestreo. Por defecto esas muestras son eliminadas, por lo que en general no es necesario hacer burn-in manualmente. Pero lo mencionamos, ya que es una práctica que suele mencionarse en la literatura.\n Cambiar el método de muestreo! \nReparametrizar el modelo\n Mejorar las distribuciones a priori \n\nEl teorema popular de la estadística computacional: Cuando tienes problemas computacionales, a menudo hay un problema con tu modelo. La recomendación NO es cambiar la distribución a priori para mejorar la calidad del muestreo. La recomendación es que si el muestreo es malo, quizá el modelo también lo sea. En ese caso, podemos pensar en mejorar el modelo, una forma de mejorarlo es usar conocimiento previo para mejorar las distribuciones a priori.\n\nAlgunos modelos pueden expresarse en más de una forma, todas matemáticamente equivalentes. En esos casos, algunas parametrizaciones pueden ser más eficientes que otras. Por ejemplo, como veremos más adelante con modelos lineales jerárquicos.\nEn el caso de las divergencias, estas suelen eliminarse aumentando la tasa de aceptación (pm.sample(..., target_accept=x) x&gt;0.8)\nLeer los mensajes de advertencia y sugerencias de PyMC! ;-)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Flujo de trabajo Bayesiano</span>"
    ]
  },
  {
    "objectID": "04_Flujo_de_trabajo_bayesiano.html#una-hoja-de-ruta-para-el-bayesian-workflow",
    "href": "04_Flujo_de_trabajo_bayesiano.html#una-hoja-de-ruta-para-el-bayesian-workflow",
    "title": "4  Flujo de trabajo Bayesiano",
    "section": "4.10 Una hoja de ruta para el Bayesian workflow",
    "text": "4.10 Una hoja de ruta para el Bayesian workflow\nA continuación se describen una serie de consejos y recomendaciones a modo de referencia rápida, sobre como encarar un análisis de datos y modelado. Las recomendaciones están orientadas a estadística Bayesiana en particular, pero pueden ser útiles al utilizar otro tipo de herramientas y modelos.\nLas recomendaciones están escritas de forma lineal, pero en la práctica, es posible que debas retroceder uno o más pasos y, a veces, omitir pasos. Piensa en estas notas, no como una partitura de una pieza clásica que un violinista tiene que seguir exactamente, sino como la partitura que sigue un bajista de Jazz, eres libre de improvisar, reorganizar algunas partes y omitir otras, e incluso puedes agregar tus propias notas!\n\n4.10.1 Resume el problema\nResuma los puntos clave de su problema y lo que le gustaría aprender de los datos. Piensa también en los demás, en lo que a tu jefe, cliente o colega le gustaría saber o aprender. No es necesario que esto sea muy completo; puedes revisar los objetivos más adelante, pero pueden ayudarte a organizar tus esfuerzos de modelado y evitar desviaciones excesivas.\nComuníquese con las partes interesadas cuando surjan dudas. Una respuesta de la persona adecuada, puede ahorrarnos horas de trabajo.\nA veces no tendrás una idea clara de como enfocar un análisis; tu única expectativa podría ser obtener “algo útil” de un conjunto de datos, y eso está bien. Pero otras veces puede que incluso sepas qué tipo de modelo quieres, tal vez tu jefe te pidió explícitamente que ejecutaras tal o cual análisis. Si ya sabe qué tipo de modelo o herramienta es necesaria, pero no está muy familiarizado con el enfoque, busque qué métodos, métricas o visualizaciones son comunes para ese problema/datos y pida consejo a otros. Esto es más importante cuanto menos familiarizado esté con ese tipo de problema/datos. Si está familiarizado, es posible que ya sepa qué métodos, visualizaciones y resúmenes desea utilizar u obtener.\nEscriba todos estos elementos preliminares como una lista de puntos a tener en cuenta o una hoja de ruta a seguir, en problemas complejos es fácil perder el foco. Esta lista puede ser revisada y actualizada de ser necesario, pero es importante establecer expectativas preliminares de lo que es deseable e ir actualizándolas según lo que sea posible. Quizá los datos no sirvan para contestar lo que nos interesa, o quizá necesitamos información extra o incluso puede que hayamos encontrado algo aún mas importante que lo que queríamos originalmente.\n\n\n4.10.2 Familiarízate con los datos\nSiempre es una buena idea realizar un análisis exploratorio de los datos. Modelar ciegamente tus datos te lleva a todo tipo de problemas. Tomarse el tiempo de mirar los datos es rara vez una pérdida de tiempo y al contrario suele ahorrarnos tiempo y proporcionar ideas útiles. A veces un buen resumen de los datos puede ser suficiente para nuestro propósito y hacer innecesarias otras aproximaciones más complejas como modelos estadísticos o de otros tipos.\nLa exploración de los datos debe conducir al entendimiento de los mismos. La forma exacta de lograr esto puede variar mucho de un conjunto de datos a otro y de un análisis a otro. Pero hay comprobaciones que suelen ser útiles, como comprobar si hay valores faltantes o errores en los datos. Es importantes considerar el contexto. Una valor de 200 es razonable si se refiere al peso en gramo de frutas, pero problemático si se refiere a registros de clima en el planeta Tierra. ¿Son correctos los tipos de datos? ¿Todos los valores que deberían ser números, son realmente números (generalmente enteros o flotantes) o son cadenas? ¿Qué variables son categóricas? ¿Cuáles son continuos? En esta etapa, es posible que deba realizar una limpieza de sus datos. Esto le ahorrará tiempo en el futuro. Y es posible que sea necesario comunicarse con quien generó o proveyó los datos, para asegurarse que estamos interpretando de forma correcta los datos y que cualquier procesamiento de los mismos es correcto.\nPor lo general, también nos gustaría hacer algunos gráficos, histogramas, diagramas de caja, diagramas de dispersión, matrices de correlaciones, etc. Además de los gráficos, también calcule resúmenes numéricos, medias y medianas, para todos los datos, o agrupando los datos, etc.\nAcá es importante llevar registro de lo que se va observando. Cualquier cosa que resulte llamativa, inesperada o que consideremos relevante para análisis posteriores. En esta etapa los gráficos y análisis no tienen que ser extremadamente prolijos. Después de todo es un análisis preliminar, pero mantener cierto orden es de utilidad. Un análisis más o menos ordenado puede ser suficiente para compartir en una discusión técnica con colegas o clientes. Incluso puede ser muy útil para nuestros yo futuro, nada tan frustrante como retomar un análisis luego de un par de meses y no entender que fue lo que nosotros mismos hicimos!\n\n\n4.10.3 Cuente una historia para los datos\nA menudo resulta útil pensar en cómo se podrían haber generado los datos. Esto suele denominarse proceso generador de datos o mecanismo de generación de datos. No necesitamos descubrir el mecanismo verdadero, muchas veces sólo necesitamos pensar en mecanismos plausibles.\nHaz dibujos y trata de ser muy esquemático, garabatos y figuras geométricas deberían ser suficientes a menos que seas un buen dibujante. Este paso puede ser complicado, así que usemos un ejemplo. Digamos que estás estudiando los niveles de agua de un lago, piensa en qué hace que el agua aumente; lluvia, ríos, etc, y lo que la hace disminuir; evaporación, animales bebiendo agua, producción de energía, etc. Intenta pensar cuáles de estos elementos pueden ser relevantes y cuáles podrían ser insignificantes. Utilice todo el contexto que tenga para su problema.\nIntente mantenerlo simple pero no más simple. Por ejemplo, un mecanismo podría ser “El peso de los cerdos aumenta cuando se les dá mayor cantidad de maíz”, ese es un buen mecanismo si todo lo que necesita predecir son sus ganancias por la venta de cerdos. Pero será un mecanismo demasiado simplista si se estudia la absorción intestinal a nivel celular.\nSi se te ocurren historias alternativas y no sabes decidir cuál es mejor. ¡No te preocupes, enuméralas todos! ¡Quizás podamos usar los datos para decidir!\n\n\n4.10.4 Escribe un modelo\nIntente traducir el proceso generador de datos a un modelo. Si te sientes cómodo con las matemáticas, úsalas. Si prefiere una representación visual como un modelo gráfico, úsela. Si te gusta el código, hazlo. Los modelos incompletos están bien como primer paso. Por ejemplo, si usa código, siéntase libre de usar pseudocódigo o agregar comentarios para señalar los elementos que faltan mientras piensa en el modelo. Puedes refinarlo más tarde.\nIntente comenzar de manera simple, no use jerarquías, preferible empezar con priors unidimensionales e independientes, omita interacciones para modelos lineales, etc. Si por alguna razón el punto de partida es un modelo complejo, está bien, puede pensar en formas de simplificarlo.\nA veces, es posible que puedas utilizar un modelo de libro de texto estándar o algo que hayas visto en una publicación de blog o en una charla. Es común que para ciertos problemas la gente tienda a utilizar ciertos modelos “predeterminados”. Puede que sea un buen comienzo, o quizá todo lo que necesite. Mantenga las cosas simples, a menos que necesite algo más.\nEste es un buen paso para pensar en tus antecedentes, no solo qué familia vas a utilizar, sino qué parámetros específicos. Si no tienes ni idea, utiliza un previo vago. Pero si tienes alguna información úsala. Intente codificar información muy general, como que este parámetro no puede ser negativo, o es probable que este parámetro sea más pequeño que esto o esté dentro de este rango. Busque la fruta madura, normalmente eso será suficiente. La excepción será cuando tengas suficiente información de buena calidad para definir un previo muy preciso, pero incluso entonces, eso es algo que puedes agregar más adelante.\n\n\n4.10.5 Implementar el modelo\nEscriba el modelo en un lenguaje de programación probabilístico. Si usó código en el ejemplo anterior, la línea entre este paso y el anterior puede ser difusa, está bien. Intente mantener el modelo simple al principio; agregaremos más capas más adelante a medida que sigamos iterando el flujo de trabajo. Empezar de forma sencilla normalmente le ahorra tiempo a largo plazo. Los modelos simples son más fáciles de depurar y depurar un problema a la vez es generalmente menos frustrante que tener que solucionar varios problemas antes de que nuestro modelo se ejecute.\nUna vez que tenga un modelo, verifique que el modelo se compile y/o ejecute sin errores. Al depurar un modelo, especialmente en una etapa inicial del análisis, es posible que desee trabajar con un conjunto de datos reducido, por ej un 50% o 10% si el conjunto de datos es demasiado grande, o tal vez comenzar con solo unas pocas covariables, y luego agrega el resto. Esto puede ayudar a acelerar el modelo, para que pueda cambiarlo e iterar más rápido. Esto tiene la desventaja de que es posible que se pierdan los datos necesarios para descubrir algún patrón relevante, pero podría estar bien al principio, cuando suele ser el momento en el que cometerá la mayoría de los errores o tendrá mayores dudas sobre lo que está haciendo. En las primeras etapas, también puede reducir la cantidad de pasos de ajuste y muestreo.\n\n\n4.10.6 Evaluar la distribución predictiva a priori\nGeneralmente es una buena idea generar datos a partir de la distribución predictiva a priori y compararlos con su conocimiento previo. ¿Está la mayor parte de la distribución simulada dentro de un rango razonable? ¿Existen valores extremos? Utilice valores de referencia como guía. Los valores de referencia son datos empíricos u observaciones históricas, normalmente serán valores mínimos, máximos o esperados. Evite comparar con los datos observados, ya que eso puede generar problemas si no es lo suficientemente cuidadoso.\n\n\n4.10.7 Calcular la distribución a posteriori\nHay muchas formas de calcular el a posteriori; en esta serie de recomendaciones asumimos el uso de métodos MCMC, ya que son los métodos más generales y más usados.\n\n\n4.10.8 Evaluar muestras\nCuando utilizamos métodos MCMC, debemos comprobar que las muestras sean lo suficientemente buenas. Para ello, necesitamos calcular diagnósticos como \\(\\hat R\\) (r-hat) y el tamaño de muestra efectivo (ESS). Y evalúe gráficos como traceplot y rank-plots. No es necesario que los diagnósticos sean tan buenos en las primeras etapas del flujo de trabajo. Al mismo tiempo, un diagnóstico muy malo podría ser una señal de un problema con nuestro(s) modelo(s).\n\n\n4.10.9 Validar el modelo\nHay muchas formas de validar su modelo, como una prueba predictiva a posteriori, valores p Bayesianos, análisis de residuos, recuperación de parámetros a partir de datos sintéticos. O una combinación de todo esto. A veces es posible que puedas utilizar un conjunto de extra de datos para evaluar el rendimiento predictivo de tu modelo. El objetivo principal aquí es encontrar si el modelo es lo suficientemente bueno para su propósito y qué limitaciones puede tener. Todos los modelos tendrán limitaciones, pero algunas limitaciones pueden ser irrelevantes en el contexto de su análisis, algunas pueden valer la pena eliminarlas mejorando los modelos y otras simplemente vale la pena saber que existen.\n\n\n4.10.10 Comparar modelos\nSi logras conseguir más de un modelo (normalmente es una buena idea), es posible que tengas que definir cuál te gustaría conservar (suponiendo que sólo necesitas uno). Para comparar modelos se pueden utilizar validación cruzada (incluido LOO) y/o criterios de información. Pero también puedes utilizar los resultados del paso anterior (validación del modelo). A veces comparamos modelos para mantener un solo modelo, la comparación de modelos también puede ayudarnos a comprender mejor un modelo, sus fortalezas y limitaciones, y también puede ser una motivación para mejorar un modelo o probar uno nuevo. El promediado de modelos, es decir, la combinación de varios modelos en uno solo, suele ser una estrategia sencilla y eficaz para mejorar el rendimiento predictivo.\n\n\n4.10.11 Resumir resultados\nResuma los resultados de una manera que le ayude a alcanzar sus objetivos. ¿Logró responder las preguntas clave? ¿Es esto algo que convencerá a tu jefe o al departamento de marketing? Piense en formas efectivas de mostrar los resultados. Si su audiencia es muy técnica, haga un resumen técnico, pero si su audiencia solo se preocupa por maximizar ganancias, concéntrese en eso. Intenta utilizar resúmenes que sean fáciles de entender sin ocultar detalles valiosos, no querrás engañar a tu audiencia.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Flujo de trabajo Bayesiano</span>"
    ]
  },
  {
    "objectID": "04_Flujo_de_trabajo_bayesiano.html#comentarios-finales",
    "href": "04_Flujo_de_trabajo_bayesiano.html#comentarios-finales",
    "title": "4  Flujo de trabajo Bayesiano",
    "section": "4.11 Comentarios finales",
    "text": "4.11 Comentarios finales\nEn conclusión, el flujo de trabajo Bayesiano no es un conjunto rígido de instrucciones sino un enfoque de modelado dinámico y en evolución. Piense en ello como un marco conceptual que guía sus pensamientos y acciones en la búsqueda de mejores modelos y análisis.\nLos métodos, herramientas y prácticas para el análisis Bayesiano mejorarán con el tiempo. A medida que avance la tecnología, es esperable una mayor automatización y mejorar en las herramientas de software y esta guía evolucionará en consecuencia.\nAdemás, el flujo de trabajo Bayesiano subraya la importancia de valorar tanto el viaje como el destino. Fomenta una comprensión más profunda del problema y mejora las habilidades aplicables en diversos dominios. En última instancia, el flujo de trabajo Bayesiano representa un compromiso con el aprendizaje y el refinamiento continuos en el modelado y el análisis.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Flujo de trabajo Bayesiano</span>"
    ]
  },
  {
    "objectID": "04_Flujo_de_trabajo_bayesiano.html#ejercicios",
    "href": "04_Flujo_de_trabajo_bayesiano.html#ejercicios",
    "title": "4  Flujo de trabajo Bayesiano",
    "section": "4.12 Ejercicios",
    "text": "4.12 Ejercicios\n\n(Borrador, Está bien esto como ejercicio o lo demostramos en el texto?) Demuestre que la transformada integral de probabilidad es cierta.\n(Borrador) Usando la transformada integral de probabilidad describa una método general para generar muestreas aleatorias de cualquier distribución a partir de una distribución uniforme.\n(Borrador) deberíamos tener una serie de ejercicios donde calculen los valores-p marginales para distribuciónes sintéticas, por tomar una Gaussiana de base y comparar con\n\n\nuna gaussian más ancha, otra más angosta y otra desplazada y ver en cada caso como la distribución se desvía de la uniforme.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Flujo de trabajo Bayesiano</span>"
    ]
  }
]